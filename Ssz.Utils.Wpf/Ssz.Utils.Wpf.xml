<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ssz.Utils.Wpf</name>
    </assembly>
    <members>
        <member name="M:Ssz.Utils.Wpf.ClipboardHelper.ParseClipboardData">
            <summary>        
                Uses CultureHelper.SystemCultureInfo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.ClipboardHelper.SetClipboardData(System.Collections.Generic.List{System.String[]})">
            <summary>
                Uses CultureHelper.SystemCultureInfo
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Ssz.Utils.Wpf.DispatcherWrapper.Dispose">
            <summary>
                This is the implementation of the IDisposable.Dispose method.  The client
                application should invoke this method when this instance is no longer needed.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.DispatcherWrapper.Dispose(System.Boolean)">
            <summary>
                This method is invoked when the IDisposable.Dispose or Finalize actions are
                requested.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.DispatcherWrapper.Finalize">
            <summary>
                Invoked by the .NET Framework while doing heap managment (Finalize).
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.NameValueCollectionTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
                Returns true if this type converter can convert from a given type.
            </summary>
            <returns>
                bool - True if this converter can convert from the provided type, false if not.
            </returns>
            <param name="context"> The ITypeDescriptorContext for this call. </param>
            <param name="sourceType"> The Type being queried for support. </param>
        </member>
        <member name="M:Ssz.Utils.Wpf.NameValueCollectionTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
                Attempts to convert to a DoubleDataSourceItemInfo from the given object.
            </summary>
            <returns>
                The DoubleDataSourceItemInfo which was constructed.
            </returns>
            <exception cref="T:System.NotSupportedException">
                A NotSupportedException is thrown if the example object is null or is not a valid type
                which can be converted to a DoubleDataSourceItemInfo.
            </exception>
            <param name="context"> The ITypeDescriptorContext for this call. </param>
            <param name="culture"> The requested CultureInfo.  Note that conversion uses "en-US" rather than this parameter. </param>
            <param name="value"> The object to convert to an instance of DoubleDataSourceItemInfo. </param>
        </member>
        <member name="M:Ssz.Utils.Wpf.NameValueCollectionValueSerializer`1.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.NameValueCollectionValueSerializer`1.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.NameValueCollectionValueSerializer`1.ConvertFromString(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.NameValueCollectionValueSerializer`1.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.NameValueCollectionValueSerializer`1.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.Wpf.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.Properties.Resources.WpfMessageBoxCancellButton">
            <summary>
              Looks up a localized string similar to _Cancel.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.Properties.Resources.WpfMessageBoxNoButton">
            <summary>
              Looks up a localized string similar to _No.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.Properties.Resources.WpfMessageBoxNoForAllButton">
            <summary>
              Looks up a localized string similar to No for All.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.Properties.Resources.WpfMessageBoxOkButton">
            <summary>
              Looks up a localized string similar to O_K.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.Properties.Resources.WpfMessageBoxYesButton">
            <summary>
              Looks up a localized string similar to _Yes.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.Properties.Resources.WpfMessageBoxYesForAllButton">
            <summary>
              Looks up a localized string similar to Yes for All.
            </summary>
        </member>
        <member name="T:Ssz.Utils.Wpf.RecentFilesCollectionManager">
            <summary>
                Recent manager - manages Most Recently Used Files list
                for Windows Window application.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.RecentFilesCollectionManager.Add(System.String)">
            <summary>
                Add file name to Recent list.
                Call this function when file is opened successfully.
                If file already exists in the list, it is moved to the first place.
            </summary>
            <param name="fullFileName">File Name</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.RecentFilesCollectionManager.Remove(System.String)">
            <summary>
                Remove file name from Recent list.
                Call this function when File - Open operation failed.
            </summary>
            <param name="fullFileName">File Name</param>
        </member>
        <member name="P:Ssz.Utils.Wpf.RecentFilesCollectionManager.MaxDisplayNameLength">
            <summary>
                Maximum length of displayed file name in menu (default is 40).
                Set this property to change default value (optional).
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.RecentFilesCollectionManager.MaxNumberOfFiles">
            <summary>
                Maximum length of Recent list (default is 10).
                Set this property to change default value (optional).
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.RecentFilesCollectionManager.CurrentDirectory">
            <summary>
                Set current directory.
                Default value is program current directory which is set when
                Initialize function is called.
                Set this property to change default value (optional)
                after call to Initialize.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.RecentFilesCollectionManager.GetShortDisplayName(System.String,System.Int32)">
            <summary>
                Truncate a path to fit within a certain number of characters
                by replacing path components with ellipses.
                This solution is provided by CodeProject and GotDotNet C# expert
                Richard Deeming.
            </summary>
            <param name="longName">Long file name</param>
            <param name="maxLen">Maximum length</param>
            <returns>Truncated file name</returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.RecentFilesCollectionManager.GetDisplayName(System.String)">
            <summary>
                Get display file name from full name.
            </summary>
            <param name="fullName">Full file name</param>
            <returns>Short display name</returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.RecentFilesCollectionManager.LoadRecent">
            <summary>
                Load Recent list from Registry.
                Called from Initialize.
            </summary>
        </member>
        <member name="T:Ssz.Utils.Wpf.RelayCommand">
             <summary>
             The RelayCommand is a core class in the MVVM pattern to allow a ViewModel class
             to implement the code associated with a command request that has been made by the View
             </summary>
             <remarks>
             The RelayCommand implements the ICommand interface with its three methods (Execute, 
             CanExecute, and CanExecuteChanged).
             The intent is for the ViewModel class to create an instance of the RelayCommand class for 
             each of the commands that are supported in the ViewModel so that when the DataBinding
             from the View access the command property, the associated callback is made on the 
             ViewModel so that it can execute the command.
             
             <example><code>
             public class MyViewModel : INotifyPropertyChanged
             {
            		public MyViewModel()
            		{
            			//Hook the databound property to the method which does the work
            			DoSomethingCommand = new RelayCommand(DoSomething);
            		}
            		
            		///<summary>The property for the View to databind to.</summary>
            		public RelayCommand DoSomethingCommand { get; private set; }
            
                 ///<summary>The method that does the work associated with the DoSomethingCommand databound property</summary>
            		public void DoSomething()
            		{
            			//TODO - Implement the command here in my viewmodel class
            		}
             }
             </code></example>
             </remarks>
        </member>
        <member name="M:Ssz.Utils.Wpf.RelayCommand.#ctor(System.Action)">
            <summary>
            Will callback on the provided method when Execute() is called
            </summary>
            <param name="executeMethod">The method to call which will execute the command</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.RelayCommand.#ctor(System.Action{System.Object})">
            <summary>
            Will callback on the provided method when Execute() is called
            </summary>
            <param name="executeMethod">The method to call which will execute the command</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Will callback on the provided method when Execute() is called.
            Will callback on the provided method when CanExecute() is called
            </summary>
            <param name="executeMethod">The method to call which will execute the command</param>
            <param name="canExecuteMethod">The method to call to determine if Execute() can be called</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.RelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Will callback on the provided method when Execute() is called.
            Will callback on the provided method when CanExecute() is called
            </summary>
            <param name="executeMethod">The method to call which will execute the command</param>
            <param name="canExecuteMethod">The method to call to determine if Execute() can be called</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.RelayCommand.CanExecute(System.Object)">
            <summary>
            Invokes the Func as defined in the RelayCommand's constructor 
            </summary>
            <remarks>
            If the CanExecute callback has not been defined, then the Execute method
            is always available to be called.
            </remarks>
            <param name="parameter">The parameter passed in from the caller</param>
            <returns>
            true if Execute() can be called
            false if Execute() cannot be called
            </returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.RelayCommand.Execute(System.Object)">
            <summary>
            Invokes the action as defined in the RelayCommand's constructor 
            </summary>
            <remarks>
            Calls back on the defined method
            </remarks>
            <param name="parameter">The object to pass along to the execute command</param>
        </member>
        <member name="E:Ssz.Utils.Wpf.RelayCommand.CanExecuteChanged">
            <summary>
            Notification when changes occur that affect whether or not the command should execute
            </summary>
        </member>
        <member name="T:Ssz.Utils.Wpf.RotationViewbox.LayoutInvalidationCatcher">
            <summary>
                Wrap this around a class that we want to catch the measure and arrange
                processes occuring on, and propagate to the parent RotationViewbox, if any.
                Do this because layout invalidations don't flow up out of a
                Viewport2DVisual3D object.
            </summary>
        </member>
        <member name="T:Ssz.Utils.Wpf.ScreenHelper">
            <summary>
                All functions work with WPF coordinates.
                Warning! frameworkElement.PointToScreen returns values in screen coordinates, not WPF coordinates.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ScreenHelper.GetSystemScreens">
            <summary>
                Returns screens working areas in WPF coordinates.
                First screen in array is primary screen.
                result != null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.ScreenHelper.GetPrimarySystemScreen">
            <summary>
                Returns primary screen working area in WPF coordinates.        
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.ScreenHelper.GetSystemScreen(System.Windows.Point)">
            <summary>
                Returns system screen containing the point.
                All values in WPF coordinates.
                Returns null, if not found.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.ScreenHelper.IsFullyVisible(System.Windows.Rect)">
            <summary>
                All values in WPF coordinates.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.ScreenHelper.SetFullyVisible(System.Windows.Window,System.Windows.Rect)">
            <summary>
                Set window fully contained in rect.
                All values in WPF coordinates.
                window != null
            </summary>
            <param name="window"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ScreenHelper.GetNearestSystemScreen(System.Windows.Point)">
            <summary>
                All values in WPF coordinates.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.ScreenHelper.GetRect(System.Windows.FrameworkElement)">
            <summary>
                Gets location of frameworkElement on system screen.
                All values in WPF coordinates.
                Warning! frameworkElement.PointToScreen returns values in screen coordinates, not WPF coordinates.
                frameworkElement != null
            </summary>
            <param name="frameworkElement"></param>
            <returns></returns>
        </member>
        <member name="P:Ssz.Utils.Wpf.ScreenHelper.ScreenScaleX">
            <summary>
                Screen coordinate/WPF coordinate ratio on X-axis.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ScreenHelper.ScreenScaleY">
            <summary>
                Screen coordinate/WPF coordinate ratio on Y-axis.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ScreenHelper.IsValidCoordinate(System.Nullable{System.Double})">
            <summary>
                Returns true if valid.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.ScreenHelper.IsValidLength(System.Nullable{System.Double})">
            <summary>
                Returns true if valid.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.SystemMenu.SystemMenuWindow.#ctor">
            <summary>
                Initializes a new instance of the SystemMenuWindow class.
            </summary>
        </member>
        <member name="T:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder">
            <summary>
            A border that clips its contents.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.CornerRadiusProperty">
            <summary>
            The corner radius property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.ClipContentProperty">
            <summary>
            The clip content property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder._border">
            <summary>
            Stores the main border.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder._bottomLeftClip">
            <summary>
            Stores the clip responsible for clipping the bottom left corner.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder._bottomLeftContentControl">
            <summary>
            Stores the bottom left content control.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder._bottomRightClip">
            <summary>
            Stores the clip responsible for clipping the bottom right corner.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder._bottomRightContentControl">
            <summary>
            Stores the bottom right content control.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder._topLeftClip">
            <summary>
            Stores the clip responsible for clipping the top left corner.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder._topLeftContentControl">
            <summary>
            Stores the top left content control.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder._topRightClip">
            <summary>
            Stores the clip responsible for clipping the top right corner.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder._topRightContentControl">
            <summary>
            Stores the top right content control.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.#ctor">
            <summary>
            ClippingBorder constructor.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.CornerRadius">
            <summary>
            Gets or sets the border corner radius.
            This is a thickness, as there is a problem parsing CornerRadius types.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.ClipContent">
            <summary>
            Gets or sets a value indicating whether the content is clipped.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.OnApplyTemplate">
            <summary>
            Gets the UI elements out of the template.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.UpdateCornerRadius(System.Windows.CornerRadius)">
            <summary>
            Sets the corner radius.
            </summary>
            <param name="newCornerRadius">The new corner radius.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.UpdateClipContent(System.Boolean)">
            <summary>
            Updates whether the content is clipped.
            </summary>
            <param name="clipContent">Whether the content is clipped.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.CornerRadiusChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the corner radius.
            </summary>
            <param name="dependencyObject">The clipping border.</param>
            <param name="eventArgs">Dependency Property Changed Event Args</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.ClipContentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the content clipping.
            </summary>
            <param name="dependencyObject">The clipping border.</param>
            <param name="eventArgs">Dependency Property Changed Event Args</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.ClippingBorderSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Updates the clips.
            </summary>
            <param name="sender">The clipping border</param>
            <param name="e">Size Changed Event Args.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.ContentControlSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Updates the clip size.
            </summary>
            <param name="sender">A content control.</param>
            <param name="e">Size Changed Event Args</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.ClippingBorder.UpdateClipSize(System.Windows.Size)">
            <summary>
            Updates the clip size.
            </summary>
            <param name="size">The control size.</param>
        </member>
        <member name="T:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder">
            <summary>
            Content control that draws a glow around its inside.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.InnerGlowOpacityProperty">
            <summary>
            The inner glow opacity property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.InnerGlowSizeProperty">
            <summary>
            The inner glow size property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.CornerRadiusProperty">
            <summary>
            The corner radius property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.InnerGlowColorProperty">
            <summary>
            The inner glow color.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.ClipContentProperty">
            <summary>
            The clip content property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.ContentZIndexProperty">
            <summary>
            The content z-index property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder._bottomGlow">
            <summary>
            Stores the bottom glow border.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder._bottomGlowStop0">
            <summary>
            Stores the bottom glow stop 0;
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder._bottomGlowStop1">
            <summary>
            Stores the bottom glow stop 1.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder._leftGlow">
            <summary>
            Stores the left glow border.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder._leftGlowStop0">
            <summary>
            Stores the left glow stop 0;
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder._leftGlowStop1">
            <summary>
            Stores the left glow stop 1;
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder._rightGlow">
            <summary>
            Stores the right glow border.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder._rightGlowStop0">
            <summary>
            Stores the right glow stop 0;
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder._rightGlowStop1">
            <summary>
            Stores the right glow stop 1.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder._topGlow">
            <summary>
            Stores the top glow border.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder._topGlowStop0">
            <summary>
            Stores the top glow stop 0;
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder._topGlowStop1">
            <summary>
            Stores the top glow stop 1;
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.#ctor">
            <summary>
            InnerGlowBorder constructor.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.ClipContent">
            <summary>
            Gets or sets a value indicating whether the content is clipped.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.ContentZIndex">
            <summary>
            Gets or sets the content z-index. 0 for behind shadow, 1 for in-front.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.InnerGlowOpacity">
            <summary>
            Gets or sets the inner glow opacity.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.InnerGlowColor">
            <summary>
            Gets or sets the inner glow color.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.InnerGlowSize">
            <summary>
            Gets or sets the inner glow size.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.CornerRadius">
            <summary>
            Gets or sets the border corner radius.
            This is a thickness, as there is a problem parsing CornerRadius types.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.OnApplyTemplate">
            <summary>
            Gets the template parts out.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.UpdateGlowColor(System.Windows.Media.Color)">
            <summary>
            Updates the inner glow color.
            </summary>
            <param name="color">The new color.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.UpdateGlowSize(System.Windows.Thickness)">
            <summary>
            Sets the glow size.
            </summary>
            <param name="newGlowSize">The new glow size.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.InnerGlowColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the inner glow color when the DP changes.
            </summary>
            <param name="dependencyObject">The inner glow border.</param>
            <param name="eventArgs">The new property event args.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.InnerGlowBorder.InnerGlowSizeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the glow size.
            </summary>
            <param name="dependencyObject">The inner glow border.</param>
            <param name="eventArgs">Dependency Property Changed Event Args</param>
        </member>
        <member name="T:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder">
            <summary>
            Content control that draws and outer glow around itself.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.OuterGlowOpacityProperty">
            <summary>
            The outer glow opacity property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.OuterGlowSizeProperty">
            <summary>
            The outer glow size property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.CornerRadiusProperty">
            <summary>
            The corner radius property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.ShadowCornerRadiusProperty">
            <summary>
            The shadow corner radius property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.OuterGlowColorProperty">
            <summary>
            The outer glow color.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.ClipContentProperty">
            <summary>
            The clip content property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder._outerGlowBorder">
            <summary>
            Stores the outer glow border.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder._shadowHorizontal1">
            <summary>
            Stores the left gradient stop.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder._shadowHorizontal2">
            <summary>
            Stores the right gradient stop.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder._shadowOuterStop1">
            <summary>
            The top out gradient stop.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder._shadowOuterStop2">
            <summary>
            The bottom outer gradient stop.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder._shadowVertical1">
            <summary>
            Stores the top gradient stop.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder._shadowVertical2">
            <summary>
            Stores the bottom gradient stop.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.#ctor">
            <summary>
            Out glow border constructor.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.ClipContent">
            <summary>
            Gets or sets a value indicating whether the content is clipped.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.OuterGlowOpacity">
            <summary>
            Gets or sets the outer glow opacity.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.OuterGlowSize">
            <summary>
            Gets or sets the outer glow size.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.OuterGlowColor">
            <summary>
            Gets or sets the outer glow color.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.CornerRadius">
            <summary>
            Gets or sets the border corner radius.
            This is a thickness, as there is a problem parsing CornerRadius types.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.ShadowCornerRadius">
            <summary>
            Gets or sets the border corner radius.
            This is a thickness, as there is a problem parsing CornerRadius types.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.OnApplyTemplate">
            <summary>
            Gets the parts out of the template.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.UpdateGlowSize(System.Double)">
            <summary>
            Updates the glow size.
            </summary>
            <param name="size">The new size.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.UpdateGlowColor(System.Windows.Media.Color)">
            <summary>
            Updates the outer glow color.
            </summary>
            <param name="color">The new color.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.OuterGlowColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the outer glow color when the DP changes.
            </summary>
            <param name="dependencyObject">The outer glow border.</param>
            <param name="eventArgs">The new property event args.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.OuterGlowContentControlSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Updates the gradient stops on the drop shadow.
            </summary>
            <param name="sender">The outer glow border.</param>
            <param name="e">Size changed event args.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.Borders.OuterGlowBorder.UpdateStops(System.Windows.Size)">
            <summary>
            Updates the gradient stops.
            </summary>
            <param name="size">The size of the control.</param>
        </member>
        <member name="T:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock">
            <summary>
            A control that displays text, with a drop shadow.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DropShadowColorProperty">
            <summary>
            The drop shadow color property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DropShadowOpacityProperty">
            <summary>
            The drop shadow opacity property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.TextProperty">
            <summary>
            The text property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.TextDecorationsProperty">
            <summary>
            The text decorations property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.TextWrappingProperty">
            <summary>
            The text wrapping property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DropShadowDistanceProperty">
            <summary>
            The drop shadow distance property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DropShadowAngleProperty">
            <summary>
            The drop shadow angle property.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock._dropShadowBrush">
            <summary>
            Stores the drop shadow brush.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock._dropShadowTranslate">
            <summary>
            Stores the drop shadow translate transform.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.#ctor">
            <summary>
            DropShadowTextBlock constructor.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DropShadowColor">
            <summary>
            Gets or sets the drop shadow color.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DropShadowOpacity">
            <summary>
            Gets or sets the drop shadow opacity.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.Text">
            <summary>
            Gets or sets the link text.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.TextDecorations">
            <summary>
            Gets or sets the text decorations.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.TextWrapping">
            <summary>
            Gets or sets the text wrapping.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DropShadowDistance">
            <summary>
            Gets or sets the drop shadow distance.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DropShadowAngle">
            <summary>
            Gets or sets the drop shadow angle.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.OnApplyTemplate">
            <summary>
            Gets the UI elements out of the template.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DegreesToRadians(System.Double)">
            <summary>
            Converts degrees into radians.
            </summary>
            <param name="degrees">The degree value.</param>
            <returns>The degrees as radians.</returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.GetOffset(System.Double,System.Double)">
            <summary>
            Gets a point offset by a distance and angle (in degrees).
            </summary>
            <param name="angle">The angle in degrees.</param>
            <param name="distance">The distance.</param>
            <returns>The offset point.</returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.UpdateDropShadowPosition">
            <summary>
            Updates the drop shadow.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.UpdateDropShadowBrush">
            <summary>
            Updates the drop shadow brush.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DropShadowDistanceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the drop shadow.
            </summary>
            <param name="dependencyObject">The drop shadow text block.</param>
            <param name="eventArgs">Dependency Property Changed Event Args</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DropShadowAngleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the drop shadow.
            </summary>
            <param name="dependencyObject">The drop shadow text block.</param>
            <param name="eventArgs">Dependency Property Changed Event Args</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DropShadowColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the drop shadow.
            </summary>
            <param name="dependencyObject">The drop shadow text block.</param>
            <param name="eventArgs">Dependency Property Changed Event Args</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.DropShadowTextBlock.DropShadowOpacityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the drop shadow.
            </summary>
            <param name="dependencyObject">The drop shadow text block.</param>
            <param name="eventArgs">Dependency Property Changed Event Args</param>
        </member>
        <member name="T:Ssz.Utils.Wpf.ToggleSwitch.HorizontalToggleSwitch">
            <summary>
             Horizontally oriented toggle switch control.
            </summary>
        </member>
        <member name="T:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase">
            <summary>
             Base class for the toggle switch control.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase._isMouseCaptured">
            <summary>
            True if the mouse has been captured by this control, false otherwise.
            </summary> 
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase._isSpaceKeyDown">
            <summary> 
            True if the SPACE key is currently pressed, false otherwise. 
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase._isMouseLeftButtonDown">
            <summary>
            True if the mouse's left button is currently down, false otherwise. 
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase._mousePosition">
            <summary> 
            Last known position of the mouse with respect to this Button.
            </summary> 
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase._suspendStateChanges">
            <summary>
            True if visual state changes are suspended; false otherwise. 
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.Offset">
            <summary>
            The current offset of the Thumb.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.CheckedOffset">
            <summary>
            The current offset of the Thumb when it's in the Checked state.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.UncheckedOffset">
            <summary>
            The current offset of the Thumb when it's in the Unchecked state.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.DragOffset">
            <summary>
            The offset of the thumb while it's being dragged.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.IsDragging">
            <summary>
            Gets or sets whether the thumb position is being manipulated.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.IsPressed">
            <summary> 
            Gets a value that indicates whether a ToggleSwitch is currently pressed.
            </summary> 
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ContentTemplateProperty">
            <summary>
             DependencyProperty for the <see cref="T:System.Windows.Controls.ControlTemplate">ControlTemplate</see> property.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ContentTemplate">
            <summary>
             The template applied to the <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.CheckedContent">Checked</see> and <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.UncheckedContent">Unchecked</see> content properties.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.CheckedContentProperty">
            <summary>
             DependencyProperty for the <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.CheckedContent">CheckedContent</see> property.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.CheckedContent">
            <summary>
             The content shown on the checked side of the toggle switch
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.CheckedForegroundProperty">
            <summary>
             DependencyProperty for the <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.CheckedForeground">CheckedForeground</see> property.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.CheckedForeground">
            <summary>
             The brush used for the foreground of the checked side of the toggle switch.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.CheckedBackgroundProperty">
            <summary>
             DependencyProperty for the <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.CheckedBackground">CheckedBackground</see> property.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.CheckedBackground">
            <summary>
             The brush used for the background of the checked side of the toggle switch.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.UncheckedContentProperty">
            <summary>
             DependencyProperty for the <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.UncheckedContent">UncheckedContent</see> property.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.UncheckedContent">
            <summary>
             The content shown on the unchecked side of the toggle switch.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.UncheckedForegroundProperty">
            <summary>
             DependencyProperty for the <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.UncheckedForeground">UncheckedForeground</see> property.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.UncheckedForeground">
            <summary>
             The brush used for the foreground of the Unchecked side of the toggle switch.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.UncheckedBackgroundProperty">
            <summary>
             DependencyProperty for the <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.UncheckedBackground">UncheckedBackground</see> property.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.UncheckedBackground">
            <summary>
             The brush used for the background of the Unchecked side of the toggle switch.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ElasticityProperty">
            <summary>
             DependencyProperty for the <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.Elasticity">Elasticity</see> property.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.Elasticity">
            <summary>
             Determines the percentage of the way the <see cref="T:System.Windows.Controls.Primitives.Thumb">thumb</see> must be dragged before the switch changes it's <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.IsChecked">IsChecked</see> state.
            </summary>
            <remarks>
             This value must be within the range of 0.0 - 1.0. 
            </remarks>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ThumbTemplateProperty">
            <summary>
             DependencyProperty for the <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ThumbTemplate">ThumbTemplate</see> property.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ThumbTemplate">
            <summary>
             The <see cref="T:System.Windows.Controls.Primitives.Thumb">thumb's</see> control template.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ThumbBrushProperty">
            <summary>
             DependencyProperty for the <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ThumbBrush">ThumbBrush</see> property.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ThumbBrush">
            <summary>
             The brush used to fill the <see cref="T:System.Windows.Controls.Primitives.Thumb">thumb</see>.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ThumbSizeProperty">
            <summary>
             DependencyProperty for the <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ThumbSize">ThumbSize</see> property.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ThumbSize">
            <summary>
             The size of the toggle switch's <see cref="T:System.Windows.Controls.Primitives.Thumb">thumb</see>.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.IsCheckedProperty">
            <summary>
             DependencyProperty for the <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.IsChecked">IsChecked</see> property.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.IsChecked">
            <summary>
             Gets or sets whether the control is in the checked state.
            </summary>
        </member>
        <member name="E:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.Unchecked">
            <summary>
             Event raised when the toggle switch is unchecked.
            </summary>
        </member>
        <member name="E:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.Checked">
            <summary>
             Event raised when the toggle switch is checked.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.#ctor">
            <summary> 
            Initializes a new instance of the ToggleSwitchBase class.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnDragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Raised while dragging the <see cref="T:System.Windows.Controls.Primitives.Thumb">Thumb</see>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnDragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Raised when the dragging of the <see cref="T:System.Windows.Controls.Primitives.Thumb">Thumb</see> has completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.LayoutControls">
            <summary>
            Recalculated the layout of the control.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.GetTemplateChildren">
            <summary>
            Initializes the control's template parts.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.AddEventHandlers">
            <summary>
            Subscribe event listeners.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.RemoveEventHandlers">
            <summary>
            Unsubscribe event listeners.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnDragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Raised when a drag has started on the <see cref="T:System.Windows.Controls.Primitives.Thumb">Thumb</see>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnClick">
            <summary>
            Called when the control is clicked.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Raised when the size of the control has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.CaptureMouseInternal">
            <summary> 
            Capture the mouse. 
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ReleaseMouseCaptureInternal">
            <summary>
            Release mouse capture if we already had it. 
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnLayoutDependancyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raised when a dependency property that affects the control's layout has changed.
            </summary>
            <param name="d">The ToggleSwitch control</param>
            <param name="e"></param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the IsEnabled property changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary> 
            Responds to the LostFocus event.
            </summary> 
            <param name="e">The event data for the LostFocus event.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary> 
            Responds to the KeyDown event.
            </summary> 
            <param name="e">The event data for the KeyDown event.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnKeyDownInternal(System.Windows.Input.Key)">
            <summary> 
            Handles the KeyDown event for ButtonBase.
            </summary> 
            <param name="key">
            The keyboard key associated with the event.
            </param> 
            <returns>True if the event was handled, false otherwise.</returns>
            <remarks>
            This method exists for the purpose of unit testing since we can't 
            set KeyEventArgs.Key to simulate key press events. 
            </remarks>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary> 
            Responds to the KeyUp event. 
            </summary>
            <param name="e">The event data for the KeyUp event.</param> 
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnKeyUpInternal(System.Windows.Input.Key)">
            <summary> 
            Handles the KeyUp event for ButtonBase. 
            </summary>
            <param name="key">The keyboard key associated with the event.</param> 
            <returns>True if the event was handled, false otherwise.</returns>
            <remarks>
            This method exists for the purpose of unit testing since we can't 
            set KeyEventArgs.Key to simulate key press events.
            </remarks>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary> 
            Responds to the MouseLeftButtonDown event.
            </summary>
            <param name="e"> 
            The event data for the MouseLeftButtonDown event.
            </param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary> 
            Responds to the MouseLeftButtonUp event.
            </summary>
            <param name="e"> 
            The event data for the MouseLeftButtonUp event.
            </param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary> 
            Responds to the MouseMove event.
            </summary> 
            <param name="e">The event data for the MouseMove event.</param>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.IsValidMousePosition">
            <summary>
            Determine if the mouse is above the button based on its last known 
            position.
            </summary>
            <returns> 
            True if the mouse is considered above the button, false otherwise. 
            </returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.ChangeCheckStates(System.Boolean)">
            <summary>
            Updates the control's layout to reflect the current <see cref="P:Ssz.Utils.Wpf.ToggleSwitch.ToggleSwitchBase.IsChecked">IsChecked</see> state.
            </summary>
            <param name="useTransitions">Whether to use transitions during the layout change.</param>
        </member>
        <member name="T:Ssz.Utils.Wpf.ToggleSwitch.VerticalToggleSwitch">
            <summary>
             Vertically oriented toggle switch control.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.TreeHelper.FindChild``1(System.Windows.DependencyObject,System.String)">
            <summary>
                Searches in all sub-tree
            </summary>
            <typeparam name="T"></typeparam>
            <param name="that"></param>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.TreeHelper.FindChilds``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
                Searches in all sub-tree        
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parent"></param>
            <param name="additionalCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.TreeHelper.FindChildsOrSelf``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
                Searches in all sub-tree        
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parent"></param>
            <param name="additionalCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.TreeHelper.FindChild``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
                Searches in all sub-tree
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parent"></param>
            <param name="additionalCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.TreeHelper.FindParent``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="additionalCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.TreeHelper.IsUserVisible(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Determines if the specified WPF element in the specified WPF container is currently visible
            </summary>
            <remarks>
            WPF has a complex tree system where controls are embeded into other controls and walking that 
            stack is not easy.  This method will walk the stack for us to determine if both the element
            and the container it is in are visible.
            
            An example of this use is with alarms.  Alarms will typically be embedded into a ListView.
            When we acknowledge the page, we want to only acknowledge the alarms that are currently 
            visible to the user.  So we rip through the entire alarm list, and for each element in
            the list, we check to see if that element is visible within its ListView container.
            </remarks>
            <example>
            This sample shows how to do something with the visible elements in a WPF ListView control named 'MyListView'
            <code>
            for (int i=0; i_MyListView.Items.Count; i++)
            {
                FrameworkElement container = MyListView;
                FrameworkElement element = container.ItemContainerGenerator.ContainerFromIndex(i) as FrameworkElement;
                if (TreeHelper.IsUserVisible(element, container))
                {
                    //Do something with the visible item
                }
            }
            </code>
            </example>
            <param name="element">The element that we are checking if it is visible</param>
            <param name="container">The container that is holding this element</param>
            <returns>
            true if the element is visible
            false if the element is not visible
            </returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.TreeHelper.GetDependencyProperties(System.Object)">
            <summary>       
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.WindowsExplorerHelper.OpenFolderInExplorerAndSelectFiles(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="folder"></param>
            <param name="filesToSelect"></param>
        </member>
        <member name="T:Ssz.Utils.Wpf.WpfMessageBox.DelegateCommand">
            <summary>
                This class allows delegating the commanding logic to methods passed as parameters,
                and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.WpfMessageBox.DelegateCommand.Execute">
            <summary>
                Execution of the command
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.WpfMessageBox.DelegateCommand.IsAutomaticRequeryDisabled">
            <summary>
                Property to enable or disable CommandManager's automatic requery on this command
            </summary>
        </member>
        <member name="T:Ssz.Utils.Wpf.WpfMessageBox.DelegateCommand`1">
            <summary>
                This class allows delegating the commanding logic to methods passed as parameters,
                and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
            <typeparam name="T">Type of the parameter passed to the delegates</typeparam>
        </member>
        <member name="T:Ssz.Utils.Wpf.WpfMessageBox.CommandManagerHelper">
            <summary>
                This class contains methods for the CommandManager that help avoid memory leaks by
                using weak references.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxButton.OK">
            <summary>
                The message box displays an OK button.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxButton.OKCancel">
            <summary>
                The message box displays OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxButton.YesNoCancel">
            <summary>
                The message box displays Yes, No, and Cancel buttons.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxButton.YesNo">
            <summary>
                The message box displays Yes and No buttons.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxButton.YesNoYesAllNoAllCancel">
            <summary>
                The message box displays Yes, No, Yes for All, No for All, and Cancel buttons.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxResult.None">
            <summary>
                The message box returns no result.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxResult.OK">
            <summary>
                The result value of the message box is OK.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxResult.Cancel">
            <summary>
                The result value of the message box is Cancel.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxResult.Yes">
            <summary>
                The result value of the message box is Yes.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxResult.No">
            <summary>
                The result value of the message box is No.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxResult.YesForAll">
            <summary>
                The result value of the message box is Yes.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxResult.NoForAll">
            <summary>
                The result value of the message box is No.
            </summary>
        </member>
        <member name="T:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxWindow">
            <summary>
                Interaction logic for WPFMessageBoxWindow.xaml
            </summary>
            <summary>
            WpfMessageBoxWindow
            </summary>
        </member>
        <member name="M:Ssz.Utils.Wpf.WpfMessageBox.WpfMessageBoxWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.WpfScreenHelper.SystemInformation.VirtualScreen">
            <summary>
            Gets the bounds of the virtual screen.
            </summary>
            <returns>A <see cref="T:System.Windows.Rect" /> that specifies the bounding rectangle of the entire virtual screen.</returns>
        </member>
        <member name="P:Ssz.Utils.Wpf.WpfScreenHelper.SystemInformation.WorkingArea">
            <summary>
            Gets the size, in pixels, of the working area of the screen.
            </summary>
            <returns>A <see cref="T:System.Windows.Rect" /> that represents the size, in pixels, of the working area of the screen.</returns>
        </member>
        <member name="T:Ssz.Utils.Wpf.WpfScreenHelper.WindowsScreen">
            <summary>
            Represents a display device or multiple display devices on a single system.
            [assembly:SupportedOSPlatform("windows")]
            </summary>
        </member>
        <member name="P:Ssz.Utils.Wpf.WpfScreenHelper.WindowsScreen.AllScreens">
            <summary>
            Gets an array of all displays on the system.
            </summary>
            <returns>An enumerable of type Screen, containing all displays on the system.</returns>
        </member>
        <member name="P:Ssz.Utils.Wpf.WpfScreenHelper.WindowsScreen.Bounds">
            <summary>
            Gets the bounds of the display.
            </summary>
            <returns>A <see cref="T:System.Windows.Rect" />, representing the bounds of the display.</returns>
        </member>
        <member name="P:Ssz.Utils.Wpf.WpfScreenHelper.WindowsScreen.DeviceName">
            <summary>
            Gets the device name associated with a display.
            </summary>
            <returns>The device name associated with a display.</returns>
        </member>
        <member name="P:Ssz.Utils.Wpf.WpfScreenHelper.WindowsScreen.Primary">
            <summary>
            Gets a value indicating whether a particular display is the primary device.
            </summary>
            <returns>true if this display is primary; otherwise, false.</returns>
        </member>
        <member name="P:Ssz.Utils.Wpf.WpfScreenHelper.WindowsScreen.PrimaryScreen">
            <summary>
            Gets the primary display.
            </summary>
            <returns>The primary display.</returns>
        </member>
        <member name="P:Ssz.Utils.Wpf.WpfScreenHelper.WindowsScreen.WorkingArea">
            <summary>
            Gets the working area of the display. The working area is the desktop area of the display, excluding taskbars, docked windows, and docked tool bars.
            </summary>
            <returns>A <see cref="T:System.Windows.Rect" />, representing the working area of the display.</returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.WpfScreenHelper.WindowsScreen.FromHandle(System.IntPtr)">
            <summary>
            Retrieves a Screen for the display that contains the largest portion of the specified control.
            </summary>
            <param name="hwnd">The window handle for which to retrieve the Screen.</param>
            <returns>A Screen for the display that contains the largest region of the object. In multiple display environments where no display contains any portion of the specified window, the display closest to the object is returned.</returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.WpfScreenHelper.WindowsScreen.FromPoint(System.Windows.Point)">
            <summary>
            Retrieves a Screen for the display that contains the specified point.
            </summary>
            <param name="point">A <see cref="T:System.Windows.Point" /> that specifies the location for which to retrieve a Screen.</param>
            <returns>A Screen for the display that contains the point. In multiple display environments where no display contains the point, the display closest to the specified point is returned.</returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.WpfScreenHelper.WindowsScreen.Equals(System.Object)">
            <summary>
            Gets or sets a value indicating whether the specified object is equal to this Screen.
            </summary>
            <param name="obj">The object to compare to this Screen.</param>
            <returns>true if the specified object is equal to this Screen; otherwise, false.</returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.WpfScreenHelper.WindowsScreen.GetHashCode">
            <summary>
            Computes and retrieves a hash code for an object.
            </summary>
            <returns>A hash code for an object.</returns>
        </member>
        <member name="M:Ssz.Utils.Wpf.Xaml2Emf.CreateEmf(System.String,System.Windows.Media.Drawing)">
            <summary>
                drawing != null
            </summary>
            <param name="fileName"></param>
            <param name="drawing"></param>
        </member>
    </members>
</doc>
