<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Fluent="clr-namespace:Fluent" xmlns:converters="clr-namespace:Fluent.Converters" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" xmlns:FluentHelpers="clr-namespace:Fluent.Helpers" xmlns:styleSelectors="clr-namespace:Fluent.StyleSelectors" xmlns:templateSelectors="clr-namespace:Fluent.TemplateSelectors" xmlns:System="clr-namespace:System;assembly=mscorlib" xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:theming="clr-namespace:Fluent.Theming">
  <ControlTemplate x:Key="ControlFocusEmptyTemplate" TargetType="{x:Type Control}">
    <Rectangle Stroke="Transparent">
      <Rectangle.Fill>
        <SolidColorBrush />
      </Rectangle.Fill>
    </Rectangle>
  </ControlTemplate>
  <converters:ApplicationMenuRightScrollViewerExtractorConverter x:Key="ApplicationMenuRightScrollViewerExtractorConverter" />
  <Storyboard x:Key="Fluent.Ribbon.Storyboards.Backstage.IsOpenTrueStoryboard">
    <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)">
      <EasingThicknessKeyFrame KeyTime="0" Value="-125,0,0,0" />
      <EasingThicknessKeyFrame KeyTime="0:0:0.5" Value="0">
        <EasingThicknessKeyFrame.EasingFunction>
          <CubicEase EasingMode="EaseOut" />
        </EasingThicknessKeyFrame.EasingFunction>
      </EasingThicknessKeyFrame>
    </ThicknessAnimationUsingKeyFrames>
  </Storyboard>
  <Storyboard x:Key="Fluent.Ribbon.Storyboards.Backstage.IsOpenFalseStoryboard">
    <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)">
      <EasingThicknessKeyFrame KeyTime="0" Value="0" />
      <EasingThicknessKeyFrame KeyTime="0:0:0.3" Value="-125,0,0,0">
        <EasingThicknessKeyFrame.EasingFunction>
          <CubicEase EasingMode="EaseOut" />
        </EasingThicknessKeyFrame.EasingFunction>
      </EasingThicknessKeyFrame>
    </ThicknessAnimationUsingKeyFrames>
  </Storyboard>
  <BooleanToVisibilityConverter x:Key="boolToVisibilityConverter" />
  <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.MenuItem.HeaderOnly" TargetType="Fluent:MenuItem">
    <Grid Background="{TemplateBinding Background}">
      <ContentPresenter x:Name="textBlock" Width="Auto" Height="Auto" Margin="5 3 3 3" VerticalAlignment="Center" ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" RecognizesAccessKey="{Binding Path=(Fluent:MenuItem.RecognizesAccessKey), RelativeSource={RelativeSource TemplatedParent}}" />
    </Grid>
  </ControlTemplate>
  <Fluent:ScreenTip x:Key="Fluent.Ribbon.Resources.RibbonTabControl.DisplayOptionsScreenTip" Title="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.DisplayOptionsButtonScreenTipTitle, Mode=OneWay}" x:Shared="False" Text="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.DisplayOptionsButtonScreenTipText, Mode=OneWay}" />
  <DataTemplate x:Key="Fluent.Ribbon.Templates.RibbonGroupBox.OneLineHeaderTemplate">
    <TextBlock HorizontalAlignment="Stretch" VerticalAlignment="Center" Text="{Binding}" TextAlignment="Center" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" />
  </DataTemplate>
  <DataTemplate x:Key="Fluent.Ribbon.Templates.RibbonGroupBox.TwoLineHeaderTemplate">
    <Fluent:TwoLineLabel HorizontalAlignment="Center" VerticalAlignment="Center" HasGlyph="True" Text="{Binding}" />
  </DataTemplate>
  <Style x:Key="Fluent.Ribbon.Styles.RibbonGroupBox.TwoLineHeaderContentControl" TargetType="{x:Type ContentControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
          <ContentPresenter Fluent:RibbonGroupBox.IsCollapsedHeaderContentPresenter="True" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="TwoLineLabelControlTemplate" TargetType="{x:Type Fluent:TwoLineLabel}">
    <StackPanel x:Name="stackPanel" HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Vertical">
      <AccessText x:Name="PART_TextRun" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" TextWrapping="Wrap" />
      <StackPanel x:Name="stackPanel1" HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Horizontal">
        <AccessText x:Name="PART_TextRun2" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" TextWrapping="Wrap" />
        <Border x:Name="border" Width="5" Height="Auto" Margin="0" HorizontalAlignment="Center">
          <Path x:Name="path" Width="5" Height="3" Margin="0 2 0 0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L5,0 2.5,3z" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" StrokeThickness="0" />
        </Border>
      </StackPanel>
    </StackPanel>
    <ControlTemplate.Triggers>
      <Trigger Property="HasTwoLines" Value="False">
        <Setter TargetName="PART_TextRun2" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="border" Property="Margin" Value="0" />
        <Setter TargetName="border" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="stackPanel" Property="HorizontalAlignment" Value="Left" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="stackPanel1" Property="Margin" Value="3 0 0 0" />
        <Setter TargetName="stackPanel1" Property="VerticalAlignment" Value="Center" />
      </Trigger>
      <Trigger Property="HasGlyph" Value="False">
        <Setter TargetName="border" Property="Width" Value="0.1" />
        <Setter TargetName="path" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger SourceName="PART_TextRun2" Property="Text" Value="">
        <Setter TargetName="PART_TextRun2" Property="Visibility" Value="Hidden" />
      </Trigger>
      <Trigger SourceName="PART_TextRun2" Property="Text" Value="{x:Null}">
        <Setter TargetName="PART_TextRun2" Property="Visibility" Value="Hidden" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="RibbonTitleBarControlTemplate" TargetType="{x:Type Fluent:RibbonTitleBar}">
    <Grid>
      <ContentPresenter x:Name="PART_QuickAccessToolbarHolder" ContentSource="QuickAccessToolBar" />
      <ContentPresenter x:Name="PART_HeaderHolder" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" IsHitTestVisible="False" />
      <Fluent:RibbonContextualGroupsContainer x:Name="PART_ItemsContainer" IsItemsHost="True" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsCollapsed" Value="True">
        <Setter TargetName="PART_QuickAccessToolbarHolder" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ItemsContainer" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="HideContextTabs" Value="True">
        <Setter TargetName="PART_QuickAccessToolbarHolder" Property="Visibility" Value="Hidden" />
        <Setter TargetName="PART_ItemsContainer" Property="Visibility" Value="Hidden" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Fluent.Ribbon.Styles.Backstage.ComboBox" TargetType="{x:Type Fluent:ComboBox}">
    <Setter Property="Height" Value="42" />
    <Setter Property="IsEditable" Value="False" />
    <Setter Property="IsReadOnly" Value="True" />
    <Setter Property="Width" Value="229" />
  </Style>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.BackstageTabControl.Button" TargetType="{x:Type Fluent:Button}">
    <Grid Background="Transparent">
      <Border x:Name="border" Background="{TemplateBinding Fluent:RibbonProperties.MouseOverBackground}" Visibility="Collapsed" />
      <StackPanel Margin="25 0 15 0" HorizontalAlignment="Left" VerticalAlignment="Center" Orientation="Horizontal">
        <Fluent:IconPresenter x:Name="iconImage" Margin="0 0 8 0" HorizontalAlignment="Center" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <ContentControl x:Name="controlLabel" VerticalAlignment="Center" Content="{TemplateBinding Header}" Focusable="False">
          <ContentControl.Resources>
            <Style TargetType="TextBlock">
              <Setter Property="TextTrimming" Value="CharacterEllipsis" />
              <Setter Property="TextWrapping" Value="NoWrap" />
            </Style>
          </ContentControl.Resources>
        </ContentControl>
      </StackPanel>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocused" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="BackstageBackButtonTemplate" TargetType="Button">
    <Grid x:Name="ContentGrid" Fluent:FrameworkHelper.UseLayoutRounding="False" Background="Transparent">
      <ContentControl Margin="{TemplateBinding Padding}" HorizontalAlignment="Left" Focusable="False">
        <Grid>
          <Path x:Name="arrowpath" Width="16" Height="12" Data="F1 M 36,22L 36,26L 19.75,26L 27,33L 20.5,33L 11,24L 20.5,15L 27,15L 19.75,22L 36,22 Z " Fill="{TemplateBinding Foreground}" Stretch="Uniform" />
          <Ellipse x:Name="backellipse" Width="34" Height="34" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" />
          <Path Width="Auto" Margin="0" HorizontalAlignment="Stretch" Data="M0,0 C0,35 0,35 0,35 C0,35 35,35 35,35 L35,0 z" Fill="Transparent" Stretch="None" />
        </Grid>
      </ContentControl>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsKeyboardFocused" Value="True">
        <Setter TargetName="ContentGrid" Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="arrowpath" Property="Opacity" Value="0.5" />
        <Setter TargetName="backellipse" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="ContentGrid" Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="arrowpath" Property="Opacity" Value="0.5" />
        <Setter TargetName="backellipse" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="Focusable" Value="false" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="Transparent" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="Fluent.Ribbon.ColorGallery.ListBox.Template.Row0" TargetType="{x:Type ListBox}">
    <Border HorizontalAlignment="Stretch" Background="{TemplateBinding Background}">
      <UniformGrid HorizontalAlignment="Left" Columns="{Binding Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ColorGallery}}}" IsItemsHost="True" />
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.ColorGallery.ListBox.Template.Row1" TargetType="{x:Type ListBox}">
    <Border HorizontalAlignment="Stretch" Background="{TemplateBinding Background}">
      <UniformGrid HorizontalAlignment="Left" Columns="{Binding Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ColorGallery}}}" IsItemsHost="True" Rows="1" />
    </Border>
  </ControlTemplate>
  <Fluent:ColorGradientItemTemplateSelector x:Key="ColorGradientItemTemplateSelect" />
  <Style x:Key="SeparatorTabItemStyle" TargetType="Fluent:SeparatorTabItem">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Fluent:SeparatorTabItem">
          <ContentPresenter ContentSource="Header" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SliderButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Focusable" Value="false" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="Transparent" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="SliderRepeatButtonControlTemplate" TargetType="{x:Type RepeatButton}">
    <Grid>
      <ContentPresenter Width="14" Height="14" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" />
    </Grid>
  </ControlTemplate>
  <DrawingImage x:Key="Fluent.Ribbon.Images.ApplicationMenu" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M 0,85.3333L 170.667,85.3333L 170.667,0L 0,0L 0,85.3333 Z " />
          <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M 91.3333,71.3333L 16,71.3333C 14.5333,71.3333 13.3333,70.1333 13.3333,68.6667L 13.3333,10C 13.3333,8.53333 14.5333,7.33333 16,7.33333L 91.3333,7.33333C 92.8,7.33333 94,8.53333 94,10L 94,68.6667C 94,70.1333 92.8,71.3333 91.3333,71.3333 Z " />
          <GeometryDrawing Brush="#FF497DB1" Geometry="F1 M 41.3333,64L 37.3333,64L 37.3333,14.6667L 41.3333,14.6667M 78.8,25.3333L 53.8667,25.3333C 52.8,25.3333 52,24.5333 52,23.4667L 52,21.8667C 52,20.8 52.8,20 53.8667,20L 78.8,20C 79.8667,20 80.6667,20.8 80.6667,21.8667L 80.6667,23.4667C 80.6667,24.5333 79.8667,25.3333 78.8,25.3333 Z M 78.8,37.3333L 53.8667,37.3333C 52.8,37.3333 52,36.5333 52,35.4667L 52,33.8667C 52,32.8 52.8,32 53.8667,32L 78.8,32C 79.8667,32 80.6667,32.8 80.6667,33.8667L 80.6667,35.4667C 80.6667,36.5333 79.8667,37.3333 78.8,37.3333 Z M 78.8,48L 53.8667,48C 52.8,48 52,47.2 52,46.1333L 52,44.5333C 52,43.4667 52.8,42.6667 53.8667,42.6667L 78.8,42.6667C 79.8667,42.6667 80.6667,43.4667 80.6667,44.5333L 80.6667,46.1333C 80.6667,47.2 79.8667,48 78.8,48 Z M 78.8,58.6667L 53.8667,58.6667C 52.8,58.6667 52,57.8667 52,56.8L 52,55.2C 52,54.1333 52.8,53.3333 53.8667,53.3333L 78.8,53.3333C 79.8667,53.3333 80.6667,54.1333 80.6667,55.2L 80.6667,56.8C 80.6667,57.8667 79.8667,58.6667 78.8,58.6667 Z M 92,68.6667C 92,69.0667 91.7333,69.3333 91.3333,69.3333L 42.5333,69.3333C 42.2667,67.8667 40.9333,66.6667 39.3333,66.6667C 37.7333,66.6667 36.4,67.8667 36.1333,69.3333L 16,69.3333C 15.6,69.3333 15.3333,69.0667 15.3333,68.6667L 15.3333,10C 15.3333,9.6 15.6,9.33333 16,9.33333L 36.1333,9.33333C 36.4,10.8 37.7333,12 39.3333,12C 40.9333,12 42.2667,10.8 42.5333,9.33333L 91.3333,9.33333C 91.7333,9.33333 92,9.6 92,10M 91.3333,5.33333L 16,5.33333C 13.4667,5.33333 11.3333,7.46666 11.3333,10L 11.3333,68.6667C 11.3333,71.2 13.4667,73.3333 16,73.3333L 91.3333,73.3333C 93.8667,73.3333 96,71.2 96,68.6667L 96,10C 96,7.46666 93.8667,5.33333 91.3333,5.33333 Z " />
          <GeometryDrawing Brush="#FFD1D1D1" Geometry="F1 M 20.444,49L 30.6667,49L 30.6667,63.6667L 20.444,63.6667L 20.444,49 Z " />
          <GeometryDrawing Brush="#9AD1D1D1" Geometry="F1 M 20.444,32.556L 30.6667,32.556L 30.6667,47.2227L 20.444,47.2227L 20.444,32.556 Z " />
          <GeometryDrawing Brush="#4DD1D1D1" Geometry="F1 M 20.444,15.2227L 30.6667,15.2227L 30.6667,29.8893L 20.444,29.8893L 20.444,15.2227 Z " />
          <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M 137.867,58L 161.334,32.2667C 162.399,31.2 161.601,29.3333 160.133,29.3333L 112.399,29.3333C 111.201,29.3333 110.667,30.6667 111.466,31.6L 135.466,58C 136.133,58.6667 137.201,58.6667 137.867,58 Z " />
          <GeometryDrawing Brush="#FF497DB1" Geometry="F1 M 115.333,32L 136.667,55.3333L 158,32M 136.667,61.2C 135.467,61.2 134.267,60.6667 133.467,59.7333L 109.333,33.3333C 108.267,32.1333 108,30.5333 108.667,29.0667C 109.333,27.6 110.8,26.6667 112.267,26.6667L 160,26.6667C 161.733,26.6667 163.333,27.7333 164,29.3333C 164.667,30.9333 164.4,32.8 163.2,34L 139.733,59.7333C 139.067,60.6667 137.867,61.2 136.667,61.2 Z " />
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.Copy" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 4.66667,87.3333L 90,87.3333L 90,2L 4.66667,2L 4.66667,87.3333 Z " />
          <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M 52,65.3333L 9.33334,65.3333L 9.33334,9.33334L 33,9.33334L 52,26L 52,65.3333 Z ">
            <GeometryDrawing.Pen>
              <Pen Brush="#FF515151" MiterLimit="2.75" Thickness="4.66667" />
            </GeometryDrawing.Pen>
          </GeometryDrawing>
          <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M 84,80L 41.3333,80L 41.3333,24L 65,24L 84,40.6667L 84,80 Z ">
            <GeometryDrawing.Pen>
              <Pen Brush="#FF515151" MiterLimit="2.75" Thickness="4.66667" />
            </GeometryDrawing.Pen>
          </GeometryDrawing>
          <GeometryDrawing Geometry="F1 M 63.3333,24L 63.3333,43.3333L 84,43.3333">
            <GeometryDrawing.Pen>
              <Pen Brush="#FF515151" MiterLimit="2.75" Thickness="4.66667" />
            </GeometryDrawing.Pen>
          </GeometryDrawing>
          <GeometryDrawing Brush="#FF497DB1" Geometry="F1 M 15.3333,27L 15.3333,28.3333C 15.3333,29.4333 16.2333,30.3333 17.3333,30.3333L 24,30.3333C 25.1,30.3333 26,29.4333 26,28.3333L 26,27C 26,25.9 25.1,25 24,25L 17.3333,25C 16.2333,25 15.3333,25.9 15.3333,27 Z M 15.3333,37.6667L 15.3333,39C 15.3333,40.1 16.2333,41 17.3333,41L 36,41C 37.1,41 38,40.1 38,39L 38,37.6667C 38,36.5667 37.1,35.6667 36,35.6667L 17.3333,35.6667C 16.2333,35.6667 15.3333,36.5667 15.3333,37.6667 Z M 17.3333,47.6667L 36,47.6667C 37.1,47.6667 38,48.5667 38,49.6667L 38,51C 38,52.1 37.1,53 36,53L 17.3333,53C 16.2333,53 15.3333,52.1 15.3333,51L 15.3333,49.6667C 15.3333,48.5667 16.2333,47.6667 17.3333,47.6667 Z " />
          <GeometryDrawing Brush="#FF497DB1" Geometry="F1 M 48.6667,40.3333L 48.6667,41.6667C 48.6667,42.7667 49.5667,43.6667 50.6667,43.6667L 57.3333,43.6667C 58.4333,43.6667 59.3333,42.7667 59.3333,41.6667L 59.3333,40.3333C 59.3333,39.2333 58.4333,38.3333 57.3333,38.3333L 50.6667,38.3333C 49.5667,38.3333 48.6667,39.2333 48.6667,40.3333 Z M 48.6667,51L 48.6667,52.3333C 48.6667,53.4333 49.5667,54.3333 50.6667,54.3333L 74,54.3333C 75.1,54.3333 76,53.4333 76,52.3333L 76,51C 76,49.9 75.1,49 74,49L 50.6667,49C 49.5667,49 48.6667,49.9 48.6667,51 Z M 50.6667,61L 74,61C 75.1,61 76,61.9 76,63L 76,64.3333C 76,65.4333 75.1,66.3333 74,66.3333L 50.6667,66.3333C 49.5667,66.3333 48.6667,65.4333 48.6667,64.3333L 48.6667,63C 48.6667,61.9 49.5667,61 50.6667,61 Z " />
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.Cut" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 4.66667,86L 90,86L 90,0.666664L 4.66667,0.666664L 4.66667,86 Z " />
          <GeometryDrawing Brush="#FF666666" Geometry="F1 M 66.8841,0.666664L 45.7748,29.0547L 24.6668,0.666664C 21.8641,16.544 32.7961,30.4493 39.5988,37.36L 28.2175,52.6667L 33.5508,58L 45.7748,43.3307L 58.0001,58L 63.3335,52.6667L 51.9521,37.36C 58.7548,30.4493 69.6855,16.544 66.8841,0.666664 Z " />
          <GeometryDrawing Geometry="F1 M 70.6667,80C 78.0293,80 84,74.0293 84,66.6667C 84,59.304 78.0293,53.3333 70.6667,53.3333C 63.304,53.3333 57.3333,59.304 57.3333,66.6667C 57.3333,74.0293 63.304,80 70.6667,80 Z M 10.6667,66.6667C 10.6667,59.304 16.636,53.3333 24,53.3333C 31.364,53.3333 37.3333,59.304 37.3333,66.6667C 37.3333,74.0293 31.364,80 24,80C 16.636,80 10.6667,74.0293 10.6667,66.6667 Z ">
            <GeometryDrawing.Pen>
              <Pen Brush="#FF497DB1" MiterLimit="2.75" Thickness="5.33334" />
            </GeometryDrawing.Pen>
          </GeometryDrawing>
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.DefaultPlaceholder" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 10.6667,96L 96,96L 96,10.6667L 10.6667,10.6667L 10.6667,96 Z " />
          <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M 17.3333,53.3333C 17.3333,33.4507 33.4507,17.3333 53.3333,17.3333C 73.216,17.3333 89.3333,33.4507 89.3333,53.3333C 89.3333,73.216 73.216,89.3333 53.3333,89.3333C 33.4507,89.3333 17.3333,73.216 17.3333,53.3333 Z " />
          <GeometryDrawing Geometry="F1 M 16,53.3333C 16,32.7147 32.7147,16 53.3333,16C 73.952,16 90.6667,32.7147 90.6667,53.3333C 90.6667,73.952 73.952,90.6667 53.3333,90.6667C 32.7147,90.6667 16,73.952 16,53.3333 Z ">
            <GeometryDrawing.Pen>
              <Pen Brush="#FF8099BD" MiterLimit="2.75" Thickness="8" />
            </GeometryDrawing.Pen>
          </GeometryDrawing>
          <GeometryDrawing Brush="#FF6F9A42" Geometry="F1 M 25.3333,53.3333C 25.3333,37.8693 37.8693,25.3333 53.3333,25.3333C 68.7973,25.3333 81.3333,37.8693 81.3333,53.3333C 81.3333,68.7973 68.7973,81.3333 53.3333,81.3333C 37.8693,81.3333 25.3333,68.7973 25.3333,53.3333 Z " />
          <GeometryDrawing Geometry="F1 M 31.25,66C 31.25,57.5307 41.1378,50.6667 53.3333,50.6667C 65.5303,50.6667 75.4167,57.5307 75.4167,66C 75.4167,74.4693 65.5303,81.3333 53.3333,81.3333C 41.1378,81.3333 31.25,74.4693 31.25,66 Z ">
            <GeometryDrawing.Brush>
              <RadialGradientBrush Center="0.5,0.5" GradientOrigin="0.5,0.5" RadiusX="0.408531" RadiusY="0.568391">
                <RadialGradientBrush.GradientStops>
                  <GradientStop Color="#6CFFFFFF" Offset="0" />
                  <GradientStop Color="#6CB7CCA0" Offset="0.539535" />
                  <GradientStop Color="#6C6F9A42" Offset="1" />
                </RadialGradientBrush.GradientStops>
                <RadialGradientBrush.RelativeTransform>
                  <TransformGroup />
                </RadialGradientBrush.RelativeTransform>
              </RadialGradientBrush>
            </GeometryDrawing.Brush>
          </GeometryDrawing>
          <GeometryDrawing Geometry="F1 M 30.6667,42.6667C 30.6667,33.0933 40.8147,25.3333 53.3333,25.3333C 65.852,25.3333 76,33.0933 76,42.6667C 76,52.24 65.852,57.6667 53.3333,57.6667C 40.8147,57.6667 30.6667,52.24 30.6667,42.6667 Z ">
            <GeometryDrawing.Brush>
              <LinearGradientBrush StartPoint="0.5,2.35961e-007" EndPoint="0.5,0.907216">
                <LinearGradientBrush.GradientStops>
                  <GradientStop Color="#CAFFFFFF" Offset="0" />
                  <GradientStop Color="#65FFFFFF" Offset="0.725581" />
                  <GradientStop Color="#00FFFFFF" Offset="1" />
                </LinearGradientBrush.GradientStops>
              </LinearGradientBrush>
            </GeometryDrawing.Brush>
          </GeometryDrawing>
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.DialogLauncher" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 0,85.3331L 85.3333,85.3331L 85.3333,-0.000259399L 0,-0.000259399L 0,85.3331 Z " />
          <GeometryDrawing Brush="#FF999999" Geometry="F1 M 21.3336,10.6667L 10.6669,10.6667L 10.6669,21.3333L 10.6669,80L 21.3336,80L 21.3336,21.3333L 80.0003,21.3333L 80.0003,10.6667M 42.2283,48.436L 60.0376,66.2453L 41.3323,84.9507L 41.3323,85.3333L 85.3336,85.3333L 85.3336,41.332L 84.9509,41.332L 67.5789,58.704L 49.7709,40.8947L 42.2283,48.436 Z " />
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.Help" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 0,85.3333L 85.3333,85.3333L 85.3333,0L 0,0L 0,85.3333 Z " />
          <GeometryDrawing Brush="#FF497DB1" Geometry="F1 M 85.3333,42.6667C 85.3333,66.2307 66.2307,85.3333 42.6667,85.3333C 19.1027,85.3333 0,66.2307 0,42.6667C 0,19.1027 19.1027,0 42.6667,0C 66.2307,0 85.3333,19.1027 85.3333,42.6667 Z " />
          <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M 36.8092,57.4479C 36.8092,53.7604 37.2675,50.8229 38.1842,48.6145C 39.1009,46.427 40.9134,44.0104 43.6217,41.3854C 46.33,38.7604 48.0384,36.9062 48.7675,35.7812C 49.8717,34.0937 50.4342,32.2604 50.4342,30.2812C 50.4342,27.677 49.7884,25.677 48.4967,24.302C 47.205,22.927 45.3092,22.2395 42.8092,22.2395C 40.4134,22.2395 38.4967,22.927 37.0384,24.2604C 35.58,25.6145 34.8509,27.4479 34.8509,29.7395L 24.7259,29.7395C 24.7675,24.8229 26.455,20.9479 29.7467,18.0729C 33.0384,15.2187 37.3925,13.7812 42.8092,13.7812C 48.3925,13.7812 52.7467,15.1979 55.8717,18.0312C 58.9967,20.8645 60.5592,24.8229 60.5592,29.9062C 60.5592,34.4479 58.4342,38.9062 54.2259,43.2812L 49.1009,48.3229C 47.2675,50.4062 46.3092,53.4479 46.2675,57.4479L 36.8092,57.4479 Z M 36.1009,70.4062C 36.1009,68.7812 36.6009,67.4479 37.6425,66.427C 38.6634,65.427 40.0592,64.9062 41.8092,64.9062C 43.58,64.9062 44.9759,65.427 46.0175,66.4687C 47.0384,67.5104 47.5592,68.8229 47.5592,70.4062C 47.5592,71.9479 47.0592,73.2187 46.0592,74.2395C 45.0592,75.2812 43.6425,75.7812 41.8092,75.7812C 39.9759,75.7812 38.5592,75.2812 37.58,74.2395C 36.58,73.2187 36.1009,71.9479 36.1009,70.4062 Z " />
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.MoreColors" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 0,85.3333L 85.3333,85.3333L 85.3333,0L 0,0L 0,85.3333 Z " />
          <GeometryDrawing Brush="#FFD76345" Geometry="F1 M 15.5469,75.6068L 38.3523,44.2188L 1.3016,32.1815C 0.454933,35.5361 0.000266667,39.0481 0.000266667,42.6668C 0.000266667,55.9308 6.0536,67.7815 15.5469,75.6068 Z " />
          <GeometryDrawing Brush="#FFE68C42" Geometry="F1 M 40,39.1459L 40,0.0912094C 23.088,1.13521 8.852,12.0272 2.94133,27.1045L 40,39.1459 Z " />
          <GeometryDrawing Brush="#FFEAC282" Geometry="F1 M 45.3333,39.1459L 82.3933,27.1045C 76.48,12.0272 62.2453,1.13521 45.3333,0.0912094L 45.3333,39.1459 Z " />
          <GeometryDrawing Brush="#FF4F82B7" Geometry="F1 M 42.6667,47.3528L 19.872,78.7261C 26.468,82.9048 34.2813,85.3328 42.6667,85.3328C 51.052,85.3328 58.8653,82.9048 65.4613,78.7261L 42.6667,47.3528 Z " />
          <GeometryDrawing Brush="#FF76A797" Geometry="F1 M 46.9817,44.2188L 69.7871,75.6068C 79.2804,67.7801 85.3337,55.9308 85.3337,42.6668C 85.3337,39.0481 84.8791,35.5361 84.0311,32.1801L 46.9817,44.2188 Z " />
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.Paste" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 0,86L 85.3333,86L 85.3333,0.666664L 0,0.666664L 0,86 Z " />
          <GeometryDrawing Brush="#FFEAC282" Geometry="F1 M 40,31.3333L 72.6667,31.3333C 74.1387,31.3333 75.3333,30.14 75.3333,28.6667L 75.3333,12.6667C 75.3333,11.1947 74.1387,10 72.6667,10L 64,10L 64,11.104L 64,18.2293C 64,22.5213 60.5213,26 56.2293,26L 23.7707,26C 19.4787,26 16,22.5213 16,18.2293L 16,11.104L 16,10L 7.33333,10C 5.86133,10 4.66667,11.1947 4.66667,12.6667L 4.66667,77.3333C 4.66667,78.8053 5.86133,80 7.33333,80L 34.6667,80C 36.1387,80 37.3333,78.8053 37.3333,77.3333L 37.3333,34C 37.3333,32.528 38.528,31.3333 40,31.3333 Z " />
          <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M 82,82.6667L 47.3333,82.6667C 46.596,82.6667 46,82.0707 46,81.3333L 46,41.3333C 46,40.5973 46.596,40 47.3333,40L 68.6667,40L 83.3333,52L 83.3333,81.3333C 83.3333,82.0707 82.7373,82.6667 82,82.6667 Z " />
          <GeometryDrawing Geometry="F1 M 68.6667,40L 68.6667,52L 84,52M 82,82.6667L 47.3333,82.6667C 46.596,82.6667 46,82.0707 46,81.3333L 46,41.3333C 46,40.5973 46.596,40 47.3333,40L 68.6667,40L 83.3333,52L 83.3333,81.3333C 83.3333,82.0707 82.7373,82.6667 82,82.6667 Z ">
            <GeometryDrawing.Pen>
              <Pen Brush="#FF666666" MiterLimit="2.75" Thickness="4" />
            </GeometryDrawing.Pen>
          </GeometryDrawing>
          <GeometryDrawing Brush="#FF666666" Geometry="F1 M 40,14.6667C 37.4227,14.6667 35.3333,12.5773 35.3333,10C 35.3333,7.42267 37.4227,5.33333 40,5.33333C 42.5773,5.33333 44.6667,7.42267 44.6667,10C 44.6667,12.5773 42.5773,14.6667 40,14.6667 Z M 56.2293,8.66666L 49.228,8.66666C 48.5787,4.14533 44.7,0.666664 40,0.666664C 35.3,0.666664 31.4213,4.14533 30.7733,8.66666L 23.7707,8.66666C 22.424,8.66666 21.3333,9.75733 21.3333,11.104L 21.3333,18.2293C 21.3333,19.576 22.424,20.6667 23.7707,20.6667L 56.2293,20.6667C 57.576,20.6667 58.6667,19.576 58.6667,18.2293L 58.6667,11.104C 58.6667,9.75733 57.576,8.66666 56.2293,8.66666 Z " />
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.Warning" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup>
          <DrawingGroup.Children>
            <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 0,85.3333L 85.3333,85.3333L 85.3333,0L 0,0L 0,85.3333 Z " />
            <GeometryDrawing Brush="#FFE9C281" Geometry="F1 M 37.5892,9.95308L 2.41053,70.8837C 0.154533,74.7931 2.97587,79.6784 7.48787,79.6784L 77.8452,79.6784C 82.3585,79.6784 85.1799,74.7931 82.9225,70.8837L 47.7452,9.95308C 45.4865,6.04373 39.8452,6.04373 37.5892,9.95308 Z " />
            <GeometryDrawing Brush="#FF333333" Geometry="F1 M 37.9675,54.0599L 37.9675,25.1849L 48.2592,25.1849L 48.2592,54.0599L 37.9675,54.0599 Z M 49.1342,63.3933C 49.1342,64.2266 48.9675,64.9974 48.655,65.7058C 48.3425,66.4141 47.905,67.0391 47.3633,67.5391C 46.8217,68.0391 46.1758,68.4558 45.4467,68.7474C 44.6967,69.0391 43.9258,69.2058 43.1133,69.2058C 42.28,69.2058 41.5092,69.0599 40.8008,68.7683C 40.0925,68.4974 39.4675,68.1016 38.9467,67.5599C 38.405,67.0391 37.9883,66.4349 37.655,65.7266C 37.3217,65.0391 37.155,64.2891 37.155,63.4558C 37.155,62.6849 37.3008,61.9349 37.6133,61.2266C 37.9258,60.5183 38.3425,59.8933 38.8842,59.3516C 39.405,58.8099 40.03,58.3933 40.78,58.0808C 41.5092,57.7891 42.28,57.6224 43.1133,57.6224C 43.9258,57.6224 44.6967,57.7891 45.4467,58.0808C 46.1758,58.3933 46.8217,58.8099 47.3633,59.3099C 47.905,59.8308 48.3425,60.4558 48.655,61.1641C 48.9675,61.8724 49.1342,62.6224 49.1342,63.3933 Z " />
          </DrawingGroup.Children>
        </DrawingGroup>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <ControlTemplate x:Key="RibbonWindowControlTemplate" TargetType="{x:Type Fluent:RibbonWindow}">
    <Grid LayoutTransform="{Binding LayoutTransform, RelativeSource={RelativeSource TemplatedParent}}" RenderTransform="{Binding RenderTransform, RelativeSource={RelativeSource TemplatedParent}}">
      <AdornerDecorator x:Name="Adorner">
        <Grid Background="{TemplateBinding Background}">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
          </Grid.RowDefinitions>
          <DockPanel Grid.Row="0" Height="{TemplateBinding TitleBarHeight}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{TemplateBinding TitleBackground}" LastChildFill="True">
            <Image x:Name="PART_Icon" Width="16" Height="16" Margin="4 2 0 0" VerticalAlignment="{TemplateBinding VerticalIconAlignment}" DockPanel.Dock="Left" SnapsToDevicePixels="True" Source="{Fluent:IconConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}},&#xA;                                                             {Binding RelativeSource={RelativeSource Self}}}" Stretch="Uniform" Visibility="{TemplateBinding IsIconVisible, Converter={StaticResource boolToVisibilityConverter}}" />
            <ContentPresenter x:Name="PART_WindowCommands" Grid.Row="0" HorizontalAlignment="Right" Panel.ZIndex="1" Content="{TemplateBinding WindowCommands}" DockPanel.Dock="Right" />
            <Fluent:RibbonTitleBar x:Name="PART_RibbonTitleBar" Foreground="{TemplateBinding TitleForeground}" Header="{TemplateBinding Title}" IsCollapsed="{TemplateBinding IsCollapsed}" />
          </DockPanel>
          <ContentPresenter x:Name="PART_ContentPresenter" Grid.Row="1" />
        </Grid>
      </AdornerDecorator>
      <Border x:Name="PART_Border" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{x:Null}" BorderBrush="{TemplateBinding GlowBrush}" BorderThickness="{TemplateBinding BorderThickness}" UseLayoutRounding="True" />
      <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" VerticalAlignment="Bottom" IsTabStop="false" Visibility="Collapsed" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsActive" Value="False">
        <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=NonActiveGlowBrush, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="PART_WindowCommands" Property="Opacity" Value="0.5" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsActive" Value="False" />
          <Condition Property="NonActiveGlowBrush" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=NonActiveBorderBrush, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsActive" Value="True" />
          <Condition Property="GlowBrush" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=BorderBrush, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
          <Condition Property="WindowState" Value="Normal" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Border" Property="Visibility" Value="Visible" />
        <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="WindowState" Value="Maximized">
        <Setter TargetName="Adorner" Property="Margin" Value="0" />
        <Setter TargetName="PART_Border" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_Icon" Property="Margin" Value="2 2 0 0" />
        <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <theming:RibbonLibraryThemeProvider x:Key="{x:Static theming:RibbonLibraryThemeProvider.DefaultInstance}" />
  <Thickness x:Key="Fluent.Ribbon.Values.RibbonTabControl.Content.BorderThickness">0</Thickness>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.WindowCommands.CaptionButton" TargetType="{x:Type Button}">
    <Grid Background="{TemplateBinding Background}">
      <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="False">
        <Setter TargetName="contentPresenter" Property="Opacity" Value="0.75" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.WhiteBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Fluent.Ribbon.Styles.WindowCommands.CaptionButton" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Foreground}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.WindowCommands.CaptionButton}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Width" Value="46" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Pressed.Background}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="RibbonButtonControlTemplate" TargetType="{x:Type Fluent:Button}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <StackPanel x:Name="stackPanel" Width="Auto" Margin="{TemplateBinding Padding}" Orientation="Vertical">
        <Fluent:IconPresenter x:Name="iconImage" Margin="0 2 0 0" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2 0 2 0" HorizontalAlignment="Stretch" VerticalAlignment="Center" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
      </StackPanel>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2 0 2 0" />
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="iconImage" Property="Margin" Value="2 0 2 0" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="border" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2 0 2 0" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="iconImage" Property="Margin" Value="2 0 2 0" />
        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.Button.Simplified" TargetType="{x:Type Fluent:Button}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <StackPanel x:Name="stackPanel" Width="Auto" Height="Auto" Margin="{TemplateBinding Padding}" VerticalAlignment="Stretch" Orientation="Horizontal">
        <Grid x:Name="iconImageGrid" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center">
          <Fluent:IconPresenter x:Name="iconImage" IconSize="{Binding (Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="iconImageBorder" Width="{Binding ActualWidth, ElementName=iconImage}" Height="{Binding ActualHeight, ElementName=iconImage}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
        </Grid>
        <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2 0 0 0" HorizontalAlignment="Stretch" VerticalAlignment="Center" HasTwoLines="False" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
      </StackPanel>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Small" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Middle" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Large" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="controlLabel" Property="Margin" Value="0" />
        <Setter TargetName="iconImageGrid" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="stackPanel" Property="Margin" Value="4 0" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonButtonStyle" TargetType="{x:Type Fluent:Button}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Fluent:RibbonProperties.IconSize" Value="Large" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="SnapsToDevicePixels" Value="False" />
    <Setter Property="Template" Value="{DynamicResource RibbonButtonControlTemplate}" />
    <Setter Property="Width" Value="Auto" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Height" Value="68" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Width" Value="22" />
      </Trigger>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Padding" Value="6 2" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.Button.Simplified}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="Size" Value="Small" />
        </MultiTrigger.Conditions>
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.WindowCommands" TargetType="Fluent:WindowCommands">
    <StackPanel Orientation="Horizontal">
      <ItemsControl x:Name="PART_Items" Margin="0 0 2 0" Focusable="False" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}" ItemTemplate="{TemplateBinding ItemTemplate}" ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}" ItemsSource="{Binding Items, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" Visibility="{TemplateBinding ItemsPanelVisibility}">
        <ItemsControl.ItemsPanel>
          <ItemsPanelTemplate>
            <StackPanel Orientation="Horizontal" />
          </ItemsPanelTemplate>
        </ItemsControl.ItemsPanel>
      </ItemsControl>
      <Button x:Name="PART_Min" Uid="{Binding Minimize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" Padding="0" Focusable="False" SnapsToDevicePixels="True" Style="{DynamicResource Fluent.Ribbon.Styles.WindowCommands.CaptionButton}" ToolTip="{Binding Minimize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}">
        <Path Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" Data="F1M3,8L13,8 13,7 3,7z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
      </Button>
      <Button x:Name="PART_Max" Uid="{Binding Maximize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" Padding="0" Focusable="False" SnapsToDevicePixels="True" Style="{DynamicResource Fluent.Ribbon.Styles.WindowCommands.CaptionButton}" ToolTip="{Binding Maximize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" Visibility="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={x:Static converters:StaticConverters.EqualsToVisibilityConverter}, ConverterParameter={x:Static WindowState.Normal}}">
        <Path Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" Data="F1M12,12L4,12 4,4 12,4z M3,13L13,13 13,3 3,3z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
      </Button>
      <Button x:Name="PART_Restore" Uid="{Binding Restore, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" Padding="0" Focusable="False" SnapsToDevicePixels="True" Style="{DynamicResource Fluent.Ribbon.Styles.WindowCommands.CaptionButton}" ToolTip="{Binding Restore, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" Visibility="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={x:Static converters:StaticConverters.EqualsToVisibilityConverter}, ConverterParameter={x:Static WindowState.Maximized}}">
        <Path Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" Data="F1M11.999,10.002L10.998,10.002 10.998,5.002 5.998,5.002 5.998,4.001 11.999,4.001z M10.002,11.999L4.001,11.999 4.001,5.998 10.002,5.998z M5.002,3L5.002,5.002 3,5.002 3,13 10.998,13 10.998,10.998 13,10.998 13,3z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
      </Button>
      <Button x:Name="PART_Close" Uid="{Binding Close, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" Padding="0" Focusable="False" SnapsToDevicePixels="True" Style="{DynamicResource Fluent.Ribbon.Styles.WindowCommands.CaptionButton}" ToolTip="{Binding Close, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}">
        <Path Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" Data="F1M8.583,8L13,12.424 12.424,13 8,8.583 3.576,13 3,12.424 7.417,8 3,3.576 3.576,3 8,7.417 12.424,3 13,3.576z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
      </Button>
    </StackPanel>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="NoResize">
        <Setter TargetName="PART_Max" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_Min" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_Restore" Property="Visibility" Value="Collapsed" />
      </DataTrigger>
      <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="CanMinimize">
        <Setter TargetName="PART_Max" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_Restore" Property="Visibility" Value="Collapsed" />
      </DataTrigger>
      <DataTrigger Binding="{Binding IsMouseOver, ElementName=PART_Close}" Value="True">
        <Setter TargetName="PART_Close" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CloseButton.MouseOver.Background}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding IsPressed, ElementName=PART_Close}" Value="True">
        <Setter TargetName="PART_Close" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CloseButton.Pressed.Background}" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type Fluent:WindowCommands}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.WindowCommands}" />
  </Style>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.WindowCommands.Button" TargetType="{x:Type Button}">
    <Grid Background="{TemplateBinding Background}">
      <ContentPresenter x:Name="contentPresenter" Margin="11 1 11 1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
      <Rectangle x:Name="border" Width="0" Height="15" Margin="10 0 0 0" HorizontalAlignment="Right" VerticalAlignment="Stretch" Fill="{TemplateBinding Foreground}" IsHitTestVisible="False" SnapsToDevicePixels="True" Opacity="0.25" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="False">
        <Setter TargetName="contentPresenter" Property="Opacity" Value=".75" />
      </Trigger>
      <Trigger Property="IsKeyboardFocused" Value="True" />
      <Trigger Property="ToggleButton.IsChecked" Value="True" />
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.DarkIdealForegroundDisabledBrush}" />
      </Trigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource PreviousData}}" Value="{x:Null}">
        <Setter TargetName="border" Property="Rectangle.Width" Value="1" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Fluent.Ribbon.Styles.WindowCommands.Button" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{DynamicResource TransparentWhiteBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.WindowCommands.Button}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="ControlStyleEmptyFocus" TargetType="{x:Type Control}">
    <Setter Property="Template" Value="{DynamicResource ControlFocusEmptyTemplate}" />
  </Style>
  <ControlTemplate x:Key="BackstageToggleButtonControlTemplate" TargetType="{x:Type Fluent:Backstage}">
    <Border x:Name="border2" Height="Auto" MinWidth="60" Margin="0 0 0 0" Background="{TemplateBinding Background}">
      <Grid>
        <Rectangle x:Name="rectangle" />
        <ContentPresenter x:Name="contentPresenter" Margin="10 0 10 0" HorizontalAlignment="Center" VerticalAlignment="Center" ContentSource="Header" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="rectangle" Property="Fill" Value="{DynamicResource HighTransparentWhiteBrush}" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="border2" Property="Opacity" Value="0.5" />
        <Setter TargetName="contentPresenter" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="IsOpen" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="border2" Property="IsMouseOver" Value="True" />
          <Condition Property="IsOpen" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="rectangle" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonBackstageStyle" TargetType="{x:Type Fluent:Backstage}">
    <Setter Property="AreAnimationsEnabled" Value="{DynamicResource {x:Static SystemParameters.ClientAreaAnimationKey}}" />
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Backstage.Background}" />
    <Setter Property="Fluent:FrameworkHelper.UseLayoutRounding" Value="True" />
    <Setter Property="Fluent:KeyTip.Keys" Value="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.BackstageButtonKeyTip, Mode=OneWay}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.Backstage.Foreground}" />
    <Setter Property="Header" Value="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.BackstageButtonText, Mode=OneWay}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template" Value="{DynamicResource BackstageToggleButtonControlTemplate}" />
  </Style>
  <ControlTemplate x:Key="RibbonTabItemControlTemplate" TargetType="{x:Type Fluent:RibbonTabItem}">
    <Grid x:Name="grid" Height="Auto">
      <Border x:Name="groupBorder" Margin="0 0 0 1" Background="{Binding Group.Background, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=Transparent}" BorderThickness="0" OpacityMask="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Contextual.Background.OpacityMask}" />
      <Border x:Name="selectedBorder" VerticalAlignment="Stretch" Background="{TemplateBinding ActiveTabBackground}" BorderBrush="{TemplateBinding ActiveTabBorderBrush}" BorderThickness="1 1 1 0" Visibility="Collapsed" />
      <Border x:Name="mouseOverBorder" Background="{TemplateBinding Background}" BorderThickness="0" />
      <Border x:Name="PART_ContentContainer" Padding="{TemplateBinding HeaderPadding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
        <ContentControl x:Name="PART_HeaderContentHost" AutomationProperties.AutomationId="{TemplateBinding Name}" AutomationProperties.Name="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" Focusable="False" />
      </Border>
      <Grid x:Name="separatorGrid" Width="1" Margin="0" HorizontalAlignment="Right" Visibility="Collapsed">
        <Rectangle x:Name="separatorRectangle1" Width="1" Margin="0" Fill="{TemplateBinding BorderBrush}" Stroke="{TemplateBinding BorderBrush}" />
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_ContentContainer" Property="Opacity" Value="0.5" />
      </Trigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Fluent:RibbonTabControl}, Path=SelectedItem}" Value="{x:Null}">
        <Setter TargetName="groupBorder" Property="Margin" Value="0" />
      </DataTrigger>
      <Trigger Property="IsSeparatorVisible" Value="True">
        <Setter TargetName="selectedBorder" Property="Margin" Value="0 0 1 0" />
        <Setter TargetName="separatorGrid" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="Group" Value="{x:Null}">
        <Setter TargetName="groupBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Selector.IsSelected" Value="True">
        <Setter TargetName="selectedBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <!-- Foreground for Selected, with group -->
      <Trigger Property="Selector.IsSelected" Value="True">
        <Setter Property="Foreground" Value="{Binding Group.TabItemSelectedForeground, RelativeSource={RelativeSource Self}}" />
      </Trigger>
      <!-- Foreground for selected, no group -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelected" Value="True" />
          <Condition Property="Group" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Selected.Foreground}" />
      </MultiTrigger>
      <!-- Background and foreground for MouseOver, with group -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="grid" Property="IsMouseOver" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{Binding Path=(Fluent:RibbonProperties.MouseOverBackground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground" Value="{Binding Group.TabItemMouseOverForeground, RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <!-- Foreground for selected MouseOver, with group -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="grid" Property="IsMouseOver" Value="True" />
          <Condition Property="Selector.IsSelected" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{Binding Group.TabItemSelectedMouseOverForeground, RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <!-- Background and foreground for MouseOver, no group -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="grid" Property="IsMouseOver" Value="True" />
          <Condition Property="Group" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{Binding Path=(Fluent:RibbonProperties.MouseOverBackground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground" Value="{Binding Path=(Fluent:RibbonProperties.MouseOverForeground), RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <!-- Background for Selected, Minimized, IsOpen, with group -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelected" Value="True" />
          <Condition Property="IsMinimized" Value="True" />
          <Condition Property="IsOpen" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="grid" Property="Background" Value="Transparent" />
      </MultiTrigger>
      <!-- Background for Selected, Minimized, IsOpen, no group -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelected" Value="True" />
          <Condition Property="IsMinimized" Value="True" />
          <Condition Property="IsOpen" Value="True" />
          <Condition Property="Group" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="grid" Property="Background" Value="Transparent" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonTabItemStyle" TargetType="{x:Type Fluent:RibbonTabItem}">
    <Setter Property="ActiveTabBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Active.Background}" />
    <Setter Property="ActiveTabBorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}" />
    <Setter Property="Fluent:RibbonProperties.MouseOverBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.MouseOver.Background}" />
    <Setter Property="Fluent:RibbonProperties.MouseOverForeground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.MouseOver.Foreground}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Foreground}" />
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding}" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Height" Value="Auto" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="IsMinimized" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:RibbonTabControl}}, Path=IsMinimized, Mode=OneWay, FallbackValue=False}" />
    <Setter Property="IsOpen" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:RibbonTabControl}}, Path=IsDropDownOpen, Mode=OneWay, FallbackValue=True}" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Template" Value="{DynamicResource RibbonTabItemControlTemplate}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Style.Triggers>
      <Trigger Property="Group" Value="{x:Null}">
        <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Fluent:RibbonProperties.MouseOverForeground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Selected.MouseOver.Foreground}" />
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsContextual, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Group.Visibility, RelativeSource={RelativeSource Self}}" Value="Collapsed" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Visibility" Value="Collapsed" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="GroupBoxSeparator" TargetType="Separator">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Separator.Background}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Separator">
          <Border x:Name="SeparatorBorder" Width="1" Height="55" Margin="2 5 2 10" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{TemplateBinding Background}" />
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSimplified, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:RibbonGroupBox}}, FallbackValue=False}" Value="True">
              <Setter TargetName="SeparatorBorder" Property="Height" Value="Auto" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="DialogLauncherButtonControlTemplate" TargetType="{x:Type Fluent:Button}">
    <Border x:Name="outerBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
      <Fluent:IconPresenter x:Name="iconImage" HorizontalAlignment="Center" VerticalAlignment="Center" CustomSize="8,8" IconSize="Custom" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="LargeIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImage" Property="SmallIcon" Value="{DynamicResource Fluent.Ribbon.Images.DialogLauncher}" />
      </MultiTrigger>
      <Trigger Property="FlowDirection" Value="RightToLeft">
        <Setter TargetName="iconImage" Property="RenderTransform">
          <Setter.Value>
            <ScaleTransform ScaleX="-1" />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ToolTipStyle" TargetType="{x:Type ToolTip}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ScreenTip.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ScreenTip.BorderBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolTip}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="5" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="5" />
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
              <ContentPresenter Margin="4 4 4 4" />
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ScreenTipControlTemplate" TargetType="{x:Type Fluent:ScreenTip}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="5" />
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="5" />
      </Grid.RowDefinitions>
      <Border Grid.RowSpan="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
        <Grid>
          <StackPanel x:Name="screenTipPanel">
            <TextBlock x:Name="title" Margin="7 8 7 10" FontWeight="Bold" Text="{TemplateBinding Property=Title}" TextWrapping="Wrap" />
            <Grid x:Name="imageAndTextSection">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Image x:Name="image" MaxHeight="48" Margin="7 5 3 7" HorizontalAlignment="Left" VerticalAlignment="Top" Source="{TemplateBinding Property=Image}" Stretch="Uniform" />
              <TextBlock Grid.Column="1" Margin="8 0 8 6" Text="{TemplateBinding Property=Text}" TextWrapping="Wrap" />
            </Grid>
            <Border x:Name="separator" Width="Auto" Height="2" Margin="5" HorizontalAlignment="Stretch" Background="{DynamicResource GrayBrush6}" BorderThickness="0 0 0 1" IsEnabled="{Binding Path=IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Control, AncestorLevel=2}}" Visibility="{Binding ElementName=disableReasonSection, Path=Visibility}" />
            <Grid x:Name="disableReasonSection">
              <Image Width="16" Height="16" Margin="5 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Top" Source="{DynamicResource Fluent.Ribbon.Images.Warning}" Stretch="Uniform" />
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TextBlock x:Name="disableReasonHeader" x:Uid="disableReasonHeader" Grid.Row="0" Margin="28 0 5 2" HorizontalAlignment="Stretch" FontWeight="Bold" Text="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ScreenTipDisableReasonHeader, Mode=OneWay}" TextWrapping="Wrap" />
                <TextBlock x:Name="disableReasonText" Grid.Row="1" Margin="28 0 5 6" HorizontalAlignment="Stretch" Text="{TemplateBinding Property=DisableReason}" TextWrapping="Wrap" />
                <TextBlock x:Name="helpText" Grid.Row="2" Grid.RowSpan="1" Margin="28 0 5 6" HorizontalAlignment="Stretch" Text="{Binding Text, ElementName=textBlock, Mode=Default}" TextWrapping="Wrap" />
              </Grid>
            </Grid>
            <Border x:Name="separator2" Width="Auto" Height="2" Margin="5" HorizontalAlignment="Stretch" Background="{DynamicResource GrayBrush6}" BorderThickness="0 0 0 1" Visibility="{TemplateBinding Property=HelpLabelVisibility}" />
            <Grid x:Name="helpSection" Visibility="{TemplateBinding Property=HelpLabelVisibility}">
              <Image Width="16" Height="16" Margin="5 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Top" Source="{DynamicResource Fluent.Ribbon.Images.Help}" Stretch="Uniform" />
              <TextBlock x:Name="textBlock" x:Uid="HelpText" Margin="28 0 6 6" HorizontalAlignment="Stretch" FontWeight="Bold" Text="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ScreenTipF1LabelHeader, Mode=OneWay}" TextWrapping="Wrap" />
              <ContentControl x:Name="helpTopic" Content="{TemplateBinding Property=HelpTopic}" Visibility="Collapsed" />
            </Grid>
          </StackPanel>
        </Grid>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger SourceName="separator" Property="IsEnabled" Value="False">
        <Setter TargetName="disableReasonSection" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger SourceName="separator" Property="IsEnabled" Value="True">
        <Setter TargetName="disableReasonSection" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="helpTopic" Property="Content" Value="{x:Null}" />
          <Condition SourceName="disableReasonText" Property="Text" Value="" />
        </MultiTrigger.Conditions>
        <Setter TargetName="separator" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
      <Trigger SourceName="disableReasonText" Property="Text" Value="">
        <Setter TargetName="disableReasonSection" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger SourceName="helpTopic" Property="Content" Value="{x:Null}">
        <Setter TargetName="helpSection" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="helpText" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="separator2" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger SourceName="disableReasonSection" Property="Visibility" Value="Visible">
        <Setter TargetName="helpText" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Text" Value="" />
          <Condition Property="Image" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="imageAndTextSection" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
      <Trigger Property="Image" Value="{x:Null}">
        <Setter TargetName="image" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ScreenTipStyle" TargetType="{x:Type Fluent:ScreenTip}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ScreenTip.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ScreenTip.BorderBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Template" Value="{DynamicResource ScreenTipControlTemplate}" />
    <Setter Property="Width" Value="205" />
  </Style>
  <Style x:Key="TwoLineLabelStyle" TargetType="{x:Type Fluent:TwoLineLabel}">
    <Setter Property="Template" Value="{DynamicResource TwoLineLabelControlTemplate}" />
  </Style>
  <ControlTemplate x:Key="RibbonToggleButtonControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <StackPanel x:Name="stackPanel" Width="Auto" Margin="{TemplateBinding Padding}" Orientation="Vertical">
        <Fluent:IconPresenter x:Name="iconImage" Margin="0 2 0 0" HorizontalAlignment="Center" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2 0 2 0" HorizontalAlignment="Stretch" VerticalAlignment="Center" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
      </StackPanel>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2 -2 2 2" />
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="iconImage" Property="Margin" Value="1 0 2 0" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="border" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2 2 2 2" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="iconImage" Property="Margin" Value="1 0 2 0" />
        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsChecked" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.CheckedMouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.CheckedMouseOver.BorderBrush}" />
      </MultiTrigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.ToggleButton.Simplified" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <StackPanel x:Name="stackPanel" Width="Auto" Height="Auto" Margin="{TemplateBinding Padding}" VerticalAlignment="Stretch" Orientation="Horizontal">
        <Grid x:Name="iconImageGrid" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center">
          <Fluent:IconPresenter x:Name="iconImage" Margin="0" IconSize="{Binding (Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="iconImageBorder" Width="{Binding ActualWidth, ElementName=iconImage}" Height="{Binding ActualHeight, ElementName=iconImage}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
        </Grid>
        <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2 0 0 0" HorizontalAlignment="Stretch" VerticalAlignment="Center" HasTwoLines="False" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
      </StackPanel>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Small" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Middle" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Large" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="controlLabel" Property="Margin" Value="0" />
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="stackPanel" Property="Margin" Value="4 0" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsChecked" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.CheckedMouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.CheckedMouseOver.BorderBrush}" />
      </MultiTrigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="RibbonInnerButtonControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" SnapsToDevicePixels="False">
      <Grid Height="Auto">
        <Rectangle x:Name="rectangle" StrokeThickness="0" Visibility="Collapsed" />
        <StackPanel x:Name="stackPanel" Width="Auto" HorizontalAlignment="Stretch" Orientation="Vertical" SnapsToDevicePixels="True">
          <Fluent:IconPresenter x:Name="iconImage" Margin="0 1 0 0" HorizontalAlignment="Center" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
          <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2 0 2 2" HorizontalAlignment="Stretch" VerticalAlignment="Center" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
        </StackPanel>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2 0 2 1" />
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="iconImage" Property="Margin" Value="1 0 2 0" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="border" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2 0 -1 1" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="controlLabel" Property="Visibility" Value="Visible" />
        <Setter TargetName="iconImage" Property="Margin" Value="1 0 2 0" />
        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.SplitButton.ToggleButton.Simplified" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" SnapsToDevicePixels="False">
      <StackPanel x:Name="stackPanel" Width="Auto" Height="Auto" Margin="{TemplateBinding Padding}" VerticalAlignment="Stretch" Orientation="Horizontal">
        <Grid x:Name="iconImageGrid" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center">
          <Fluent:IconPresenter x:Name="iconImage" IconSize="{Binding (Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="iconImageBorder" Width="{Binding ActualWidth, ElementName=iconImage}" Height="{Binding ActualHeight, ElementName=iconImage}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
        </Grid>
        <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2 0 0 0" HorizontalAlignment="Stretch" VerticalAlignment="Center" HasTwoLines="False" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
      </StackPanel>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Small" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Middle" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Large" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="controlLabel" Property="Margin" Value="0" />
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="stackPanel" Property="Margin" Value="4 0" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="RibbonCheckBoxControlTemplate" TargetType="{x:Type Fluent:CheckBox}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="16" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
        <Border x:Name="border" Width="13" Height="13" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
          <Grid>
            <Path x:Name="CheckIcon" Width="7.5" Height="6.9" HorizontalAlignment="Center" VerticalAlignment="Center" Fluent:FrameworkHelper.UseLayoutRounding="False" Data="M48.4375,110.4375 L51.4995,112.812 L56.3745,107.24883" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" StrokeEndLineCap="Triangle" StrokeStartLineCap="Triangle" StrokeThickness="1.5" Opacity="0" />
            <Rectangle x:Name="IndeterminateIcon" Width="7" Height="7" Fill="{DynamicResource GrayBrush2}" Opacity="0" />
            <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource WhiteBrush}" RadiusX="1" RadiusY="1" Opacity="0" />
          </Grid>
        </Border>
      </Grid>
      <ContentControl Grid.Column="1" Margin="2 0 0 0" Foreground="{TemplateBinding Foreground}" IsTabStop="False">
        <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" />
      </ContentControl>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
        <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
        <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="DisabledVisualElement" Property="Opacity" Value=".55" />
        <Setter TargetName="contentPresenter" Property="Opacity" Value=".55" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="CheckIcon" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="IsChecked" Value="{x:Null}">
        <Setter TargetName="IndeterminateIcon" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="FlowDirection" Value="RightToLeft">
        <Setter TargetName="CheckIcon" Property="LayoutTransform">
          <Setter.Value>
            <ScaleTransform ScaleX="-1" />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.CheckBox.Simplified" TargetType="{x:Type Fluent:CheckBox}">
    <Border x:Name="border" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
      <StackPanel x:Name="stackPanel" Margin="{TemplateBinding Padding}" Orientation="Horizontal">
        <Border Width="13" Height="13" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
          <Grid>
            <Path x:Name="CheckIcon" Width="7.5" Height="6.9" HorizontalAlignment="Center" VerticalAlignment="Center" Fluent:FrameworkHelper.UseLayoutRounding="False" Data="M48.4375,110.4375 L51.4995,112.812 L56.3745,107.24883" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" StrokeEndLineCap="Triangle" StrokeStartLineCap="Triangle" StrokeThickness="1.5" Opacity="0" />
            <Rectangle x:Name="IndeterminateIcon" Width="7" Height="7" Fill="{DynamicResource GrayBrush2}" Opacity="0" />
            <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource WhiteBrush}" RadiusX="1" RadiusY="1" Opacity="0" />
          </Grid>
        </Border>
        <ContentControl Margin="2 0 0 0" Foreground="{TemplateBinding Foreground}" IsTabStop="False">
          <StackPanel Width="Auto" Orientation="Horizontal">
            <Grid x:Name="iconImageGrid" Margin="0 0 2 0" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed">
              <Fluent:IconPresenter x:Name="iconImage" IconSize="{TemplateBinding Fluent:RibbonProperties.IconSize}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
              <Border x:Name="iconImageBorder" Width="{Binding ActualWidth, ElementName=iconImage}" Height="{Binding ActualHeight, ElementName=iconImage}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
            </Grid>
            <ContentPresenter x:Name="contentPresenter" Margin="1 0 0 0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" />
          </StackPanel>
        </ContentControl>
      </StackPanel>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Small" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Middle" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Large" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="iconImageGrid" Property="Margin" Value="0" />
        <Setter TargetName="iconImageGrid" Property="Visibility" Value="Visible" />
        <Setter TargetName="stackPanel" Property="Margin" Value="4 0" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="iconImageGrid" Property="Margin" Value="0" />
        <Setter TargetName="iconImageGrid" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
        <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
        <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush}" />
        <Setter TargetName="stackPanel" Property="Opacity" Value=".5" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="CheckIcon" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="IsChecked" Value="{x:Null}">
        <Setter TargetName="IndeterminateIcon" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="FlowDirection" Value="RightToLeft">
        <Setter TargetName="CheckIcon" Property="LayoutTransform">
          <Setter.Value>
            <ScaleTransform ScaleX="-1" />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonCheckBoxStyle" TargetType="{x:Type Fluent:CheckBox}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.BorderBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Margin" Value="2 2 2 2" />
    <Setter Property="Template" Value="{DynamicResource RibbonCheckBoxControlTemplate}" />
    <Setter Property="ToolTipService.ShowDuration" Value="30000" />
    <Style.Triggers>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="6 2" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.CheckBox.Simplified}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="Size" Value="Small" />
        </MultiTrigger.Conditions>
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="RibbonRadioButtonControlTemplate" TargetType="{x:Type Fluent:RadioButton}">
    <BulletDecorator x:Name="bulletDecorator" Height="22" Background="Transparent" SnapsToDevicePixels="true">
      <BulletDecorator.Bullet>
        <Grid Width="12" Height="12" Margin="4 4 0 0" HorizontalAlignment="Left" VerticalAlignment="Center">
          <Rectangle Margin="-6 0" Fill="{DynamicResource TransparentWhiteBrush}" />
          <Ellipse x:Name="normal" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
          <Ellipse x:Name="Checked1" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" Opacity="0" />
        </Grid>
      </BulletDecorator.Bullet>
      <TextBlock Margin="8 3 4 0" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
    </BulletDecorator>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="normal" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="normal" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="Checked1" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter TargetName="bulletDecorator" Property="Opacity" Value="0.3" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.RadioButton.Simplified" TargetType="{x:Type Fluent:RadioButton}">
    <Border x:Name="border" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
      <BulletDecorator x:Name="bulletDecorator" Height="Auto" Margin="{TemplateBinding Padding}" Background="Transparent" SnapsToDevicePixels="true">
        <BulletDecorator.Bullet>
          <Grid Width="12" Height="12" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Center">
            <Rectangle Margin="-6 0" Fill="{DynamicResource TransparentWhiteBrush}" />
            <Ellipse x:Name="normal" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
            <Ellipse x:Name="Checked1" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" Opacity="0" />
          </Grid>
        </BulletDecorator.Bullet>
        <StackPanel Width="Auto" Margin="2 0 0 0" Orientation="Horizontal">
          <Grid x:Name="iconImageGrid" Margin="0 0 2 0" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed">
            <Fluent:IconPresenter x:Name="iconImage" IconSize="{TemplateBinding Fluent:RibbonProperties.IconSize}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border x:Name="iconImageBorder" Width="{Binding ActualWidth, ElementName=iconImage}" Height="{Binding ActualHeight, ElementName=iconImage}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
          </Grid>
          <ContentPresenter x:Name="contentPresenter" Margin="1 0 0 0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" />
        </StackPanel>
      </BulletDecorator>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Small" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Middle" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Large" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="bulletDecorator" Property="Margin" Value="4 0" />
        <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="iconImageGrid" Property="Margin" Value="0" />
        <Setter TargetName="iconImageGrid" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="iconImageGrid" Property="Margin" Value="0" />
        <Setter TargetName="iconImageGrid" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="normal" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="normal" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="Checked1" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter TargetName="bulletDecorator" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{x:Type Fluent:RadioButton}" TargetType="{x:Type Fluent:RadioButton}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.BorderBrush}" />
    <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
    <Setter Property="FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="{DynamicResource BlackBrush}" StrokeDashArray="1 2" StrokeThickness="1" />
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Template" Value="{DynamicResource RibbonRadioButtonControlTemplate}" />
    <Setter Property="ToolTipService.ShowDuration" Value="30000" />
    <Style.Triggers>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="6 2" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.RadioButton.Simplified}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="Size" Value="Small" />
        </MultiTrigger.Conditions>
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="GalleryGroupContainerTemplate" TargetType="{x:Type Fluent:GalleryGroupContainer}">
    <DockPanel LastChildFill="True">
      <Grid x:Name="headerGrid" Height="21" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryGroupContainer.Header.Background}" DockPanel.Dock="Top">
        <TextBlock Margin="7 0" HorizontalAlignment="Left" VerticalAlignment="Center" FontWeight="Bold" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" />
      </Grid>
      <Fluent:UniformGridWithItemSize HorizontalAlignment="Left" IsItemsHost="True" ItemHeight="{TemplateBinding ItemHeight}" ItemWidth="{TemplateBinding ItemWidth}" MaxColumns="{TemplateBinding MaxItemsInRow}" MinColumns="{TemplateBinding MinItemsInRow}" Orientation="{TemplateBinding Orientation}" />
    </DockPanel>
    <ControlTemplate.Triggers>
      <Trigger Property="IsHeadered" Value="False">
        <Setter TargetName="headerGrid" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="GalleryGroupContainerStyle" TargetType="{x:Type Fluent:GalleryGroupContainer}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Template" Value="{DynamicResource GalleryGroupContainerTemplate}" />
    <Style.Triggers>
      <Trigger Property="IsHeadered" Value="False">
        <Setter Property="HorizontalAlignment" Value="Left" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ScrollButtonControlTemplate" TargetType="{x:Type RepeatButton}">
    <Border Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollViewer.Button.Background}">
      <Border x:Name="OuterBorder" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollViewer.Button.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollViewer.Button.BorderBrush}" BorderThickness="1">
        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ScrollButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Template" Value="{DynamicResource ScrollButtonControlTemplate}" />
  </Style>
  <Style x:Key="RibbonScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="CanContentScroll" Value="True" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid x:Name="Grid" Background="{TemplateBinding Background}" IsHitTestVisible="True">
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" IsHitTestVisible="True" />
            <RepeatButton Width="13" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Stretch" Command="{x:Static ScrollBar.LineLeftCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
              <RepeatButton.Visibility>
                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0" FallbackValue="Visibility.Collapsed">
                  <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </RepeatButton.Visibility>
              <Path Width="3" Height="5" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 1,-1z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
            </RepeatButton>
            <RepeatButton Width="13" Height="Auto" HorizontalAlignment="Right" VerticalAlignment="Stretch" Command="{x:Static ScrollBar.LineRightCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
              <RepeatButton.Visibility>
                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100" FallbackValue="Visibility.Collapsed">
                  <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </RepeatButton.Visibility>
              <Path Width="3" Height="5" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M1,0L0,1 0,-1z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
            </RepeatButton>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
  </Style>
  <Style x:Key="RibbonTabScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="CanContentScroll" Value="True" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid x:Name="Grid" Background="{TemplateBinding Background}" IsHitTestVisible="True">
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" IsHitTestVisible="True" />
            <RepeatButton Width="13" Height="Auto" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Stretch" Command="{x:Static ScrollBar.LineLeftCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
              <RepeatButton.Visibility>
                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0" FallbackValue="Visibility.Collapsed">
                  <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </RepeatButton.Visibility>
              <Path Width="3" Height="5" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 1,-1z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
            </RepeatButton>
            <RepeatButton Width="13" Height="Auto" Margin="0" HorizontalAlignment="Right" VerticalAlignment="Stretch" Command="{x:Static ScrollBar.LineRightCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
              <RepeatButton.Visibility>
                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100" FallbackValue="Visibility.Collapsed">
                  <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </RepeatButton.Visibility>
              <Path Width="3" Height="5" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M1,0L0,1 0,-1z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
            </RepeatButton>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
  </Style>
  <ControlTemplate x:Key="MenuScrollViewerControlTemplate" TargetType="{x:Type ScrollViewer}">
    <Grid x:Name="Grid" Background="{TemplateBinding Background}" IsHitTestVisible="True">
      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" IsHitTestVisible="True" />
      <RepeatButton Width="Auto" Height="12" HorizontalAlignment="Stretch" VerticalAlignment="Top" ClickMode="Hover" Command="{x:Static ScrollBar.LineUpCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
        <RepeatButton.Visibility>
          <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0" FallbackValue="Visibility.Collapsed">
            <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
          </MultiBinding>
        </RepeatButton.Visibility>
        <Path Width="5" Height="3" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,-1 2,0z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
      </RepeatButton>
      <RepeatButton Width="Auto" Height="12" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" ClickMode="Hover" Command="{x:Static ScrollBar.LineDownCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
        <RepeatButton.Visibility>
          <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100" FallbackValue="Visibility.Collapsed">
            <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
          </MultiBinding>
        </RepeatButton.Visibility>
        <Path Width="5" Height="3" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 2,0z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
      </RepeatButton>
    </Grid>
  </ControlTemplate>
  <Style x:Key="Fluent.Ribbon.Styles.RibbonGroupsContainerScrollViewer" BasedOn="{StaticResource RibbonScrollViewer}" TargetType="{x:Type Fluent:RibbonGroupsContainerScrollViewer}" />
  <ControlTemplate x:Key="ScrollViewerControlTemplate" TargetType="{x:Type ScrollViewer}">
    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <Grid x:Name="Grid" Background="{TemplateBinding Background}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="*" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Rectangle x:Name="Corner" Grid.Row="1" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.Column="0" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
        <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
      </Grid>
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="RibbonContextualTabGroupControlTemplate" TargetType="{x:Type Fluent:RibbonContextualTabGroup}">
    <Border x:Name="rootBorder" Width="Auto" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{TemplateBinding InnerVisibility}">
      <Border Height="Auto" VerticalAlignment="Stretch" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0 0">
        <Grid Height="Auto" Margin="0" VerticalAlignment="Stretch">
          <Rectangle Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{TemplateBinding Background}" OpacityMask="{DynamicResource Fluent.Ribbon.Brushes.RibbonContextualTabGroup.Background.OpacityMask}" />
          <Rectangle Width="Auto" Height="4" HorizontalAlignment="Stretch" VerticalAlignment="Top" Fill="{TemplateBinding BorderBrush}" />
          <Grid Margin="0 4 0 0">
            <TextBlock Margin="6 0" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="CharacterEllipsis" />
          </Grid>
        </Grid>
      </Border>
    </Border>
  </ControlTemplate>
  <Style x:Key="RibbonTitleBarStyle" TargetType="{x:Type Fluent:RibbonTitleBar}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding}" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Template" Value="{DynamicResource RibbonTitleBarControlTemplate}" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="KeyTipStyle" TargetType="{x:Type Fluent:KeyTip}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.KeyTip.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.KeyTip.BorderBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:KeyTip}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <TextBlock Margin="4 -1 4 1" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" TextWrapping="Wrap" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.5" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ResizeBothThumbControlTemplate" TargetType="{x:Type Thumb}">
    <Grid Background="Transparent">
      <Rectangle Width="2" Height="2" Margin="0 0 2 1" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
      <Rectangle Width="2" Height="2" Margin="0 0 2 5" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
      <Rectangle Width="2" Height="2" Margin="0 0 6 1" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
      <Rectangle Width="2" Height="2" Margin="0 0 3 2" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
      <Rectangle Width="2" Height="2" Margin="0 0 3 6" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
      <Rectangle Width="2" Height="2" Margin="0 0 7 2" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="ResizeVerticalThumbControlTemplate" TargetType="{x:Type Thumb}">
    <Grid Background="Transparent">
      <StackPanel Margin="0 1 0 0" HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Horizontal" d:LayoutOverrides="Height">
        <Grid Width="Auto" Height="Auto" Margin="1 0 0 0" HorizontalAlignment="Left">
          <Rectangle Width="2" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
          <Rectangle Width="2" Height="2" Margin="0 0 1 1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
        </Grid>
        <Grid Width="Auto" Height="Auto" Margin="1 0 0 0" HorizontalAlignment="Left">
          <Rectangle Width="2" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
          <Rectangle Width="2" Height="2" Margin="0 0 1 1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
        </Grid>
        <Grid Width="Auto" Height="Auto" Margin="1 0 0 0" HorizontalAlignment="Left">
          <Rectangle Width="2" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
          <Rectangle Width="2" Height="2" Margin="0 0 1 1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
        </Grid>
        <Grid Width="Auto" Height="Auto" Margin="1 0 0 0" HorizontalAlignment="Left">
          <Rectangle Width="2" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
          <Rectangle Width="2" Height="2" Margin="0 0 1 1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
        </Grid>
      </StackPanel>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="MenuSeparatorControlTemplate" TargetType="{x:Type Separator}">
    <Grid Height="Auto">
      <Path Height="1" Margin="32 1 3 2" VerticalAlignment="Center" Data="M0,0L1,0" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" StrokeDashArray="2 2" />
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="MenuGroupSeparatorControlTemplate" TargetType="{x:Type Fluent:GroupSeparatorMenuItem}">
    <Grid Height="Auto" Background="{DynamicResource Fluent.Ribbon.Brushes.GroupSeparator.Background}">
      <TextBlock Margin="7 0" HorizontalAlignment="Left" VerticalAlignment="Center" FontWeight="Bold" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
    </Grid>
  </ControlTemplate>
  <Style x:Key="GalleryDropDownButtonStyle" TargetType="{x:Type Fluent:DropDownButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:DropDownButton}">
          <Grid>
            <Border x:Name="PART_ButtonBorder" Background="Transparent">
              <Fluent:TwoLineLabel x:Name="twoLineLabel" Margin="6 -2 0 0" HorizontalAlignment="Left" VerticalAlignment="Top" Foreground="{DynamicResource WhiteBrush}" HasGlyph="True" HasTwoLines="False" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
            <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
              <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
                <Border x:Name="PART_DropDownBorder" Grid.ColumnSpan="1" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
                  <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                    <Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
                    <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                      <Rectangle Grid.RowSpan="2" Width="1" Height="Auto" Margin="24 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Stretch" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                      <ScrollViewer Margin="1" HorizontalScrollBarVisibility="Hidden" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto">
                        <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Vertical" />
                      </ScrollViewer>
                    </Grid>
                  </Grid>
                </Border>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="twoLineLabel" Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.ExtremeHighlightBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="GalleryItemControlTemplate" TargetType="{x:Type Fluent:GalleryItem}">
    <Grid Background="Transparent">
      <Border x:Name="keyboardFocusBorder" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.Pressed}" BorderThickness="1" Visibility="Collapsed" />
      <Border x:Name="hoverBorder" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.MouseOver}" Visibility="Collapsed" />
      <Border x:Name="selectedBorder" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.Selected}" Visibility="Collapsed" />
      <Border x:Name="pressedBorder" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.Pressed}" Visibility="Collapsed" />
      <ContentPresenter x:Name="contentPresenter" Margin="1" Opacity="1" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="selectedBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="hoverBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsKeyboardFocused" Value="True">
        <Setter TargetName="keyboardFocusBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="pressedBorder" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="GalleryItemStyle" TargetType="{x:Type Fluent:GalleryItem}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template" Value="{DynamicResource GalleryItemControlTemplate}" />
  </Style>
  <ControlTemplate x:Key="ComboBoxItemTemplate" TargetType="{x:Type ComboBoxItem}">
    <Grid Background="Transparent">
      <Grid Margin="0 0.5" Background="{TemplateBinding Background}">
        <Border x:Name="ItemBackground" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" IsHitTestVisible="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="{TemplateBinding Foreground}" />
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="ItemBackground" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="ItemBackground" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="Padding" Value="3" />
    <Setter Property="Template" Value="{DynamicResource ComboBoxItemTemplate}" />
  </Style>
  <ControlTemplate x:Key="InRibbonGalleryToggleButtonControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
      <Grid Height="Auto">
        <StackPanel x:Name="stackPanel" Width="Auto" Orientation="Vertical">
          <Fluent:IconPresenter x:Name="iconImage" Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
          <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2 -2 2 2" HorizontalAlignment="Center" VerticalAlignment="Stretch" HasGlyph="True" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
        </StackPanel>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="-2 0 2 2" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
        <Setter TargetName="controlLabel" Property="Width" Value="10" />
        <Setter TargetName="iconImage" Property="Margin" Value="1 2 0 2" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="border" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2 -2 2 2" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Top" />
        <Setter TargetName="iconImage" Property="Margin" Value="1 2 2 2" />
        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsChecked" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.InRibbonGallery.ToggleButton.Simplified" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
      <Grid x:Name="stackPanel" Width="Auto" Height="Auto" Margin="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid x:Name="iconImageGrid" Grid.Column="0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center">
          <Fluent:IconPresenter x:Name="iconImage" IconSize="{Binding (Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="iconImageBorder" Width="{Binding ActualWidth, ElementName=iconImage}" Height="{Binding ActualHeight, ElementName=iconImage}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
        </Grid>
        <Fluent:TwoLineLabel x:Name="controlLabel" Grid.Column="1" Margin="2 0 0 0" HorizontalAlignment="Stretch" VerticalAlignment="Center" HasGlyph="False" HasTwoLines="False" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
        <Fluent:TwoLineLabel x:Name="controlLabel2" Grid.Column="2" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Center" HasGlyph="True" HasTwoLines="False" Text="" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Small" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Middle" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Large" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="controlLabel" Property="Margin" Value="0" />
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="controlLabel" Property="Margin" Value="0" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
        <Setter TargetName="stackPanel" Property="Margin" Value="4 0 1 0" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="controlLabel" Property="Margin" Value="0" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="controlLabel2" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsChecked" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="InRibbonGalleryButton" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:ToggleButton}">
          <Border x:Name="border" Background="{DynamicResource WhiteBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1 1 1 1">
            <Grid x:Name="grid">
              <Path Width="7" Height="1" Margin="0 6 0 0" HorizontalAlignment="Center" VerticalAlignment="Top" Data="M0,0L1,0" Fill="{DynamicResource WhiteBrush}" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" />
              <Path Width="5" Height="3" Margin="0 8 0 0" HorizontalAlignment="Center" VerticalAlignment="Top" Data="M0,0L1,1 2,0z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" StrokeThickness="0" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="grid" Property="Opacity" Value="0.5" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InRibbonGalleryRepeatButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border x:Name="border" Background="{DynamicResource WhiteBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1">
            <ContentPresenter x:Name="contentPresenter" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="BackstageTabItemControlTemplate" TargetType="{x:Type Fluent:BackstageTabItem}">
    <Grid x:Name="rootGrid" Background="Transparent">
      <Border x:Name="selectedBorder" Margin="0" Background="{TemplateBinding Fluent:RibbonProperties.IsSelectedBackground}" Visibility="Collapsed" />
      <Border x:Name="hoverBorder" Margin="0 0 0 0" Background="{TemplateBinding Fluent:RibbonProperties.MouseOverBackground}" Visibility="Collapsed" />
      <StackPanel Margin="25 0 15 0" HorizontalAlignment="Left" VerticalAlignment="Center" Orientation="Horizontal">
        <Fluent:IconPresenter x:Name="iconImage" Margin="0 0 8 0" HorizontalAlignment="Center" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <ContentControl x:Name="PART_Header" Content="{TemplateBinding Header}" Focusable="False" Foreground="{DynamicResource Fluent.Ribbon.Brushes.BackstageTabItem.Header.Foreground}">
          <ContentControl.Resources>
            <Style TargetType="TextBlock">
              <Setter Property="TextTrimming" Value="CharacterEllipsis" />
              <Setter Property="TextWrapping" Value="NoWrap" />
            </Style>
          </ContentControl.Resources>
        </ContentControl>
      </StackPanel>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_Header" Property="Opacity" Value="0.5" />
        <Setter TargetName="hoverBorder" Property="Visibility" Value="Hidden" />
      </Trigger>
      <Trigger Property="Selector.IsSelected" Value="True">
        <Setter TargetName="selectedBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsKeyboardFocused" Value="True">
        <Setter TargetName="hoverBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger SourceName="rootGrid" Property="IsMouseOver" Value="True">
        <Setter TargetName="hoverBorder" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="BackstageTabItemStyle" TargetType="{x:Type Fluent:BackstageTabItem}">
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:BackstageTabControl}}}" />
    <Setter Property="DockPanel.Dock" Value="Top" />
    <Setter Property="Fluent:RibbonProperties.IsSelectedBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.BackstageTabItem.Selected.Background}" />
    <Setter Property="Fluent:RibbonProperties.MouseOverBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.BackstageTabItem.MouseOver.Background}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="Height" Value="38" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Template" Value="{DynamicResource BackstageTabItemControlTemplate}" />
  </Style>
  <Style x:Key="Fluent.Ribbon.Styles.Backstage.Button" TargetType="{x:Type Fluent:Button}">
    <Setter Property="BorderBrush" Value="{DynamicResource GrayBrush6}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Height" Value="81" />
    <Setter Property="Padding" Value="0 9 0 0" />
    <Setter Property="Size" Value="Large" />
    <Setter Property="Width" Value="85" />
  </Style>
  <Style x:Key="Fluent.Ribbon.Styles.Backstage.ToggleButton" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="BorderBrush" Value="{DynamicResource GrayBrush6}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Height" Value="81" />
    <Setter Property="Padding" Value="0 9 0 0" />
    <Setter Property="Size" Value="Large" />
    <Setter Property="Width" Value="85" />
  </Style>
  <Style x:Key="Fluent.Ribbon.Styles.Backstage.DropDownButton" TargetType="{x:Type Fluent:DropDownButton}">
    <Setter Property="BorderBrush" Value="{DynamicResource GrayBrush6}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Height" Value="81" />
    <Setter Property="Padding" Value="0 9 0 0" />
    <Setter Property="Size" Value="Large" />
    <Setter Property="Width" Value="85" />
  </Style>
  <Style x:Key="InnerBackstageSeparatorTabItemStyle" TargetType="{x:Type Fluent:SeparatorTabItem}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:SeparatorTabItem}">
          <Grid Margin="0 0 10 0">
            <TextBlock Margin="0 5" VerticalAlignment="Center" FontFamily="Segoe UI Light, Lucida Sans Unicode, Verdana" FontSize="17" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InnerBackstageTabControlItem" TargetType="{x:Type TabItem}">
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Grid Margin="0 3" Background="Transparent">
            <Border x:Name="border" Margin="0" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
              <ContentPresenter Margin="5 5 50 5" ContentSource="Header" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="Selector.IsSelected" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InnerBackstageTabControlStyle" TargetType="{x:Type TabControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <ControlTemplate.Resources>
            <Style BasedOn="{StaticResource InnerBackstageSeparatorTabItemStyle}" TargetType="{x:Type Fluent:SeparatorTabItem}" />
            <Style BasedOn="{StaticResource InnerBackstageTabControlItem}" TargetType="{x:Type TabItem}" />
          </ControlTemplate.Resources>
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource GrayBrush7}" BorderThickness="0 0 1 0" />
            <StackPanel Grid.Column="0" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" IsItemsHost="True" />
            <ContentPresenter x:Name="PART_SelectedContentHost" Grid.Column="1" Margin="0" VerticalAlignment="Stretch" ContentSource="SelectedContent" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Fluent.Ribbon.Styles.BackstageTabControl.Button" TargetType="{x:Type Fluent:Button}">
    <Setter Property="DockPanel.Dock" Value="Top" />
    <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
    <Setter Property="Fluent:RibbonProperties.MouseOverBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.BackstageTabItem.MouseOver.Background}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" />
    <Setter Property="Height" Value="38" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.BackstageTabControl.Button}" />
  </Style>
  <Style x:Key="BackstageBackButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Backstage.BackButton.Background}" />
    <Setter Property="DockPanel.Dock" Value="Top" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.Backstage.BackButton.Foreground}" />
    <Setter Property="Height" Value="48" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Template" Value="{DynamicResource BackstageBackButtonTemplate}" />
  </Style>
  <Style x:Key="Fluent.Ribbon.Styles.BackstageTabControl.SeparatorTabItem" TargetType="{x:Type Fluent:SeparatorTabItem}">
    <Setter Property="DockPanel.Dock" Value="Top" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Margin" Value="25 10 20 10" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:SeparatorTabItem}">
          <StackPanel>
            <TextBlock x:Name="header" Margin="10 5" VerticalAlignment="Center" FontSize="14" FontWeight="SemiBold" Foreground="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" Visibility="Visible" />
            <Line Height="1" MinWidth="75" Stretch="Uniform" Stroke="{DynamicResource HighTransparentWhiteBrush}" X2="1" />
          </StackPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="HasHeader" Value="False">
              <Setter TargetName="header" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RibbonStartScreenStyle" BasedOn="{StaticResource RibbonBackstageStyle}" TargetType="{x:Type Fluent:StartScreen}">
    <Setter Property="AreAnimationsEnabled" Value="False" />
    <Setter Property="Fluent:KeyTip.Keys" Value="{x:Null}" />
    <Setter Property="HideContextTabsOnOpen" Value="True" />
    <Setter Property="Template" Value="{x:Null}" />
  </Style>
  <Style x:Key="RibbonSeparatorStyle" TargetType="{x:Type Separator}">
    <Setter Property="Margin" Value="4 0 4 0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Separator">
          <Rectangle Width="1" VerticalAlignment="Stretch" Stroke="{DynamicResource Fluent.Ribbon.Brushes.GroupSeparator.Background}" StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RibbonToolBarStyle" TargetType="{x:Type Fluent:RibbonToolBar}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="SeparatorStyle">
      <Setter.Value>
        <Style BasedOn="{StaticResource RibbonSeparatorStyle}" TargetType="{x:Type Separator}">
          <Setter Property="Margin" Value="4" />
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="RibbonToolBarControlGroupTemplate" TargetType="{x:Type Fluent:RibbonToolBarControlGroup}">
    <StackPanel Orientation="Horizontal">
      <Separator x:Name="separatorLeft" Style="{DynamicResource RibbonSeparatorStyle}" Visibility="Collapsed" />
      <StackPanel IsItemsHost="true" Orientation="Horizontal" />
      <Separator x:Name="separatorRight" Style="{DynamicResource RibbonSeparatorStyle}" Visibility="Collapsed" />
    </StackPanel>
    <ControlTemplate.Triggers>
      <Trigger Property="IsLastInRow" Value="False">
        <Setter TargetName="separatorRight" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{x:Type Fluent:StatusBar}" TargetType="{x:Type Fluent:StatusBar}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
    <Setter Property="Height" Value="Auto" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <Fluent:StatusBarPanel Height="Auto" Margin="0" VerticalAlignment="Stretch" IsItemsHost="True" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="MinHeight" Value="23" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:StatusBar}">
          <ControlTemplate.Resources>
            <Style x:Key="{x:Static StatusBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
              <Setter Property="OverridesDefaultStyle" Value="True" />
              <Setter Property="SnapsToDevicePixels" Value="True" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Width="10" Background="Transparent" BorderBrush="Transparent" />
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </ControlTemplate.Resources>
          <Border Height="Auto" Background="{TemplateBinding Background}" BorderThickness="0">
            <ItemsPresenter x:Name="itemsPresenter" Height="Auto" />
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="CanResizeWithGrip">
              <Setter TargetName="itemsPresenter" Property="Margin" Value="0 0 16 0" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RibbonStatusBarItemStyle" TargetType="{x:Type Fluent:StatusBarItem}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" />
    <Setter Property="Margin" Value="0 0 2 0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:StatusBarItem}">
          <ContentPresenter Margin="{TemplateBinding Padding}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundDisabledBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="Focusable" Value="false" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Name="Border" Margin="0" Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollButton.Default.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollButton.Default.BorderBrush}" BorderThickness="1">
            <Path x:Name="path" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Fill="{TemplateBinding Foreground}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Background}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.BorderBrush}" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="Border" Property="Background" Value="Transparent" />
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
              <Setter TargetName="path" Property="Opacity" Value="0.5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="Focusable" Value="false" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border x:Name="border" Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollThumb.Default.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollThumb.Default.BorderBrush}" BorderThickness="1" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsDragging" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="VerticalScrollBarLineButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="Focusable" Value="false" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Name="Border" Margin="0" Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollButton.Default.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollButton.Default.BorderBrush}" BorderThickness="1">
            <Path x:Name="path" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Fill="{TemplateBinding Foreground}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="Border" Property="Background" Value="Transparent" />
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
              <Setter TargetName="path" Property="Opacity" Value="0.5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="VerticalScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="Focusable" Value="false" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border x:Name="border" Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollThumb.Default.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollThumb.Default.BorderBrush}" BorderThickness="1" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsDragging" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition MaxHeight="18" />
        <RowDefinition Height="0.00001*" />
        <RowDefinition MaxHeight="18" />
      </Grid.RowDefinitions>
      <Border Grid.RowSpan="3" Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollBar.Background}" />
      <RepeatButton x:Name="repeatButton" Grid.Row="0" Height="17" Margin="1 1 1 0" VerticalAlignment="Top" Background="{DynamicResource WhiteBrush}" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" Style="{DynamicResource VerticalScrollBarLineButton}" />
      <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true" ViewportSize="{TemplateBinding ViewportSize}">
        <Track.Resources>
          <!--
                        Set the Thumb's minimum height to 50.
                        The Thumb's minimum height is half the
                        value of VerticalScrollBarButtonHeightKey.
                    -->
          <System:Double x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}">
                        36
                    </System:Double>
        </Track.Resources>
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="ScrollBar.PageUpCommand" Style="{DynamicResource ScrollBarPageButton}" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb Margin="1 0 1 0" RenderTransformOrigin="0.5,0.5" Style="{DynamicResource VerticalScrollBarThumb}" />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="ScrollBar.PageDownCommand" Style="{DynamicResource ScrollBarPageButton}" />
        </Track.IncreaseRepeatButton>
      </Track>
      <RepeatButton x:Name="repeatButton1" Grid.Row="3" Height="17" Margin="1 0 1 1" Background="{DynamicResource WhiteBrush}" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z" Style="{DynamicResource VerticalScrollBarLineButton}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="repeatButton" Property="Background" Value="{x:Null}" />
        <Setter TargetName="repeatButton1" Property="Background" Value="{x:Null}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition MaxWidth="18" />
        <ColumnDefinition Width="0.00001*" />
        <ColumnDefinition MaxWidth="18" />
      </Grid.ColumnDefinitions>
      <Border Grid.ColumnSpan="3" Margin="0" Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollBar.Background}" />
      <RepeatButton x:Name="repeatButton" Grid.Column="0" Width="17" Margin="1 1 0 1" Background="{DynamicResource WhiteBrush}" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" Style="{DynamicResource ScrollBarLineButton}" />
      <Track Name="PART_Track" Grid.Column="1" Margin="0 1 0 1" IsDirectionReversed="False" ViewportSize="{TemplateBinding ViewportSize}">
        <Track.Resources>
          <!--
                        Set the Thumb's minimum height to 50.
                        The Thumb's minimum height is half the
                        value of VerticalScrollBarButtonHeightKey.
                    -->
          <System:Double x:Key="{x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}">
                        36
                    </System:Double>
        </Track.Resources>
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="ScrollBar.PageLeftCommand" Style="{DynamicResource ScrollBarPageButton}" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb Margin="0 0 0 0" Style="{DynamicResource ScrollBarThumb}" />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="ScrollBar.PageRightCommand" Style="{DynamicResource ScrollBarPageButton}" />
        </Track.IncreaseRepeatButton>
      </Track>
      <RepeatButton x:Name="repeatButton1" Grid.Column="3" Width="17" Margin="0 1 1 1" Background="{DynamicResource WhiteBrush}" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z" Style="{DynamicResource ScrollBarLineButton}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="repeatButton" Property="Background" Value="{x:Null}" />
        <Setter TargetName="repeatButton1" Property="Background" Value="{x:Null}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="ScrollBar">
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Height" Value="17" />
        <Setter Property="Template" Value="{DynamicResource HorizontalScrollBar}" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{DynamicResource VerticalScrollBar}" />
        <Setter Property="Width" Value="17" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ScrollBarWhite" TargetType="ScrollBar">
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Height" Value="17" />
        <Setter Property="Template" Value="{DynamicResource HorizontalScrollBar}" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{DynamicResource VerticalScrollBar}" />
        <Setter Property="Width" Value="17" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="Fluent.Ribbon.ControlTemplates.TextBox" TargetType="{x:Type Fluent:TextBox}">
    <Grid Width="Auto" Height="22" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <StackPanel x:Name="PART_HeaderAndIconPanel" Margin="0 0 4 0" HorizontalAlignment="Left" Orientation="Horizontal">
        <Fluent:IconPresenter x:Name="iconImage" Margin="3 0 0 0" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition SharedSizeGroup="{Binding Path=(Fluent:RibbonGroupBoxWrapPanel.SharedSizeGroupName), RelativeSource={RelativeSource TemplatedParent}}" />
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="headerTextBlock" Margin="5 0 0 0" VerticalAlignment="Center" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
        </Grid>
      </StackPanel>
      <Border x:Name="PART_ContentBorder" Grid.Column="1" Width="{TemplateBinding InputWidth}" Height="Auto" HorizontalAlignment="Right" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.BorderBrush}" BorderThickness="1">
        <ScrollViewer x:Name="PART_ContentHost" Margin="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="InputWidth" Value="NaN">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
      </Trigger>
      <Trigger SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}">
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="PART_HeaderAndIconPanel" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="headerTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.BorderBrush}" />
        <Setter TargetName="PART_ContentHost" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="headerTextBlock" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_ContentHost" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_ContentHost" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.RibbonTextBox.Simplified" TargetType="{x:Type Fluent:TextBox}">
    <Border x:Name="border" Padding="{TemplateBinding Padding}" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
      <Grid Width="Auto" Height="Auto" Background="Transparent">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <StackPanel x:Name="PART_HeaderAndIconPanel" HorizontalAlignment="Left" Orientation="Horizontal">
          <Fluent:IconPresenter x:Name="iconImage" Margin="0 0 4 0" VerticalAlignment="Center" IconSize="{TemplateBinding Fluent:RibbonProperties.IconSize}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition SharedSizeGroup="{Binding Path=(Fluent:RibbonGroupBoxWrapPanel.SharedSizeGroupName), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.ColumnDefinitions>
            <TextBlock x:Name="headerTextBlock" Margin="0 0 4 0" VerticalAlignment="Center" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
          </Grid>
        </StackPanel>
        <Border x:Name="PART_ContentBorder" Grid.Column="1" Width="{TemplateBinding InputWidth}" Height="Auto" HorizontalAlignment="Right" VerticalAlignment="Center" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.BorderBrush}" BorderThickness="1">
          <Grid>
            <ScrollViewer x:Name="PART_ContentHost" Margin="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
            <TextBlock x:Name="PART_Watermark" Grid.Column="1" Width="{Binding ActualWidth, ElementName=PART_ContentHost}" Padding="2 0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" Opacity="0.5" />
          </Grid>
        </Border>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Small" />
          <Condition Property="Text" Value="" />
          <Condition Property="IsFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Watermark" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Middle" />
          <Condition Property="Text" Value="" />
          <Condition Property="IsFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Watermark" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="InputWidth" Value="NaN">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
      </Trigger>
      <Trigger SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}">
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="border" Property="Padding" Value="4 0" />
        <Setter TargetName="headerTextBlock" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="iconImage" Property="Margin" Value="0 0 2 0" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="headerTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.BorderBrush}" />
        <Setter TargetName="PART_ContentHost" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="headerTextBlock" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_ContentHost" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_ContentHost" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style BasedOn="{StaticResource {x:Type TextBoxBase}}" TargetType="{x:Type Fluent:TextBox}">
    <Setter Property="CaretBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.CaretBrush}" />
    <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="SelectionBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.SelectionBrush}" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.ControlTemplates.TextBox}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Padding" Value="6 2" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.RibbonTextBox.Simplified}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="Size" Value="Small" />
        </MultiTrigger.Conditions>
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="SpinnerButtonControlTemplate" TargetType="{x:Type RepeatButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
      <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" />
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="False" />
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="SpinnerButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Template" Value="{DynamicResource SpinnerButtonControlTemplate}" />
  </Style>
  <ControlTemplate x:Key="Fluent.Ribbon.ControlTemplates.Spinner" TargetType="{x:Type Fluent:Spinner}">
    <Grid Width="Auto" Height="22" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <StackPanel x:Name="headerAndIconPanel" Margin="0 0 4 0" HorizontalAlignment="Left" Orientation="Horizontal">
        <Fluent:IconPresenter x:Name="iconImage" Margin="4 0 0 0" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition SharedSizeGroup="{Binding Path=(Fluent:RibbonGroupBoxWrapPanel.SharedSizeGroupName), RelativeSource={RelativeSource TemplatedParent}}" />
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="headerTextBlock" Margin="5 0 0 0" VerticalAlignment="Center" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
        </Grid>
      </StackPanel>
      <Border x:Name="PART_ContentBorder" Grid.Column="1" Width="{TemplateBinding InputWidth}" Height="22" HorizontalAlignment="Right" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.BorderBrush}" BorderThickness="1">
        <Grid Grid.Column="1">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="17" />
          </Grid.ColumnDefinitions>
          <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
          </Grid.RowDefinitions>
          <TextBox x:Name="PART_TextBox" Grid.RowSpan="2" Grid.Column="0" Margin="0" Padding="2 0 2 0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderThickness="0" CaretBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.CaretBrush}" Foreground="{TemplateBinding Foreground}" SelectionBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.SelectionBrush}" Style="{x:Null}" />
          <Path x:Name="path" Grid.RowSpan="2" Grid.Column="1" Width="1" Margin="0 -1 0 -1" HorizontalAlignment="Left" Data="M0,0L0,1" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" StrokeThickness="1" Visibility="Collapsed" />
          <Path x:Name="path1" Grid.Column="1" Width="Auto" Height="1" Margin="0 0 -1 0" HorizontalAlignment="Left" VerticalAlignment="Bottom" Data="M0,0L1,0" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" StrokeThickness="1" Visibility="Collapsed" />
          <RepeatButton x:Name="PART_ButtonUp" Grid.Row="0" Grid.Column="1" HorizontalAlignment="Stretch" RenderTransformOrigin="0,0.5" Style="{DynamicResource SpinnerButtonStyle}">
            <Path Width="5" Height="3" Margin="1 2 0 1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,-1 2,0" Fill="{DynamicResource BlackBrush}" RenderOptions.EdgeMode="Aliased" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" StrokeThickness="0" />
          </RepeatButton>
          <RepeatButton x:Name="PART_ButtonDown" Grid.Row="1" Grid.Column="1" Style="{DynamicResource SpinnerButtonStyle}">
            <Path Width="5" Height="3" Margin="1 -1 0 0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 2,0" Fill="{DynamicResource BlackBrush}" RenderOptions.EdgeMode="Aliased" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" StrokeThickness="0" />
          </RepeatButton>
        </Grid>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="InputWidth" Value="NaN">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
      </Trigger>
      <Trigger SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}">
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="headerAndIconPanel" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="headerTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.BorderBrush}" />
        <Setter TargetName="PART_TextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
        <Setter TargetName="headerTextBlock" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_TextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="path" Property="Visibility" Value="Visible" />
        <Setter TargetName="path1" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.Spinner.Simplified" TargetType="{x:Type Fluent:Spinner}">
    <Border x:Name="border" Padding="{TemplateBinding Padding}" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
      <Grid Width="Auto" Height="Auto" Background="Transparent">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <StackPanel x:Name="headerAndIconPanel" HorizontalAlignment="Left" Orientation="Horizontal">
          <Fluent:IconPresenter x:Name="iconImage" Margin="0 0 4 0" VerticalAlignment="Center" IconSize="{Binding (Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition SharedSizeGroup="{Binding Path=(Fluent:RibbonGroupBoxWrapPanel.SharedSizeGroupName), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.ColumnDefinitions>
            <TextBlock x:Name="headerTextBlock" Margin="0 0 4 0" VerticalAlignment="Center" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
          </Grid>
        </StackPanel>
        <Border x:Name="PART_ContentBorder" Grid.Column="1" Width="{TemplateBinding InputWidth}" Height="22" HorizontalAlignment="Right" VerticalAlignment="Center" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.BorderBrush}" BorderThickness="1">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="17" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <TextBox x:Name="PART_TextBox" Grid.RowSpan="2" Grid.Column="0" Margin="0" Padding="2 0 2 0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderThickness="0" CaretBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.CaretBrush}" Foreground="{TemplateBinding Foreground}" SelectionBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.SelectionBrush}" Style="{x:Null}" />
            <Path x:Name="path" Grid.RowSpan="2" Grid.Column="1" Width="1" Margin="0 -1" HorizontalAlignment="Left" Data="M0,0L0,1" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" StrokeThickness="1" Visibility="Collapsed" />
            <Path x:Name="path1" Grid.Column="1" Width="Auto" Height="1" Margin="-1 0 -1 -0.5" HorizontalAlignment="Left" VerticalAlignment="Bottom" Data="M0,0L1,0" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" StrokeThickness="1" Visibility="Collapsed" />
            <RepeatButton x:Name="PART_ButtonUp" Grid.Row="0" Grid.Column="1" HorizontalAlignment="Stretch" RenderTransformOrigin="0,0.5" Style="{DynamicResource SpinnerButtonStyle}">
              <Path Width="5" Height="3" Margin="1 2 0 1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,-1 2,0" Fill="{DynamicResource BlackBrush}" RenderOptions.EdgeMode="Aliased" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" StrokeThickness="0" />
            </RepeatButton>
            <RepeatButton x:Name="PART_ButtonDown" Grid.Row="1" Grid.Column="1" Style="{DynamicResource SpinnerButtonStyle}">
              <Path Width="5" Height="3" Margin="1 -1 0 0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 2,0" Fill="{DynamicResource BlackBrush}" RenderOptions.EdgeMode="Aliased" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" StrokeThickness="0" />
            </RepeatButton>
          </Grid>
        </Border>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="InputWidth" Value="NaN">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
      </Trigger>
      <Trigger SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}">
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="border" Property="Padding" Value="4 0" />
        <Setter TargetName="headerTextBlock" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="iconImage" Property="Margin" Value="0 0 2 0" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="headerTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.BorderBrush}" />
        <Setter TargetName="PART_TextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
        <Setter TargetName="headerTextBlock" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_TextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="path" Property="Visibility" Value="Visible" />
        <Setter TargetName="path1" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="SpinnerStyle" TargetType="{x:Type Fluent:Spinner}">
    <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.ControlTemplates.Spinner}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="6 2" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.Spinner.Simplified}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="Size" Value="Small" />
        </MultiTrigger.Conditions>
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="RibbonComboButtonControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{DynamicResource WhiteBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <Grid Height="Auto" HorizontalAlignment="Right">
        <Rectangle x:Name="rectangle" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" Visibility="Collapsed" />
        <Path x:Name="path" Width="5" Height="3" Margin="3 0 3 0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 2,0z" Fill="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" IsHitTestVisible="False" Stretch="Fill" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="path" Property="Opacity" Value="0.5" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsChecked" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="rectangle" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Fluent.Ribbon.ColorGallery.ListBox.ItemContainerStyle" TargetType="{x:Type ListBoxItem}">
    <Setter Property="Padding" Value="{Binding Padding, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBox}}, FallbackValue='2,0,2,0'}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Grid Background="Transparent">
            <ContentPresenter Width="{Binding ChipWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ColorGallery}}, FallbackValue=13}" Height="{Binding ChipHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ColorGallery}}, FallbackValue=13}" Margin="{TemplateBinding Padding}" />
            <Border x:Name="outerBorder" Margin="{TemplateBinding Padding}" BorderThickness="1">
              <Border x:Name="innerBorder" BorderThickness="1" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.DarkExtremeHighlightBrush}" />
              <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.DarkExtremeHighlightBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ExtremeHighlightBrush}" />
              <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.DarkExtremeHighlightBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Content">
        <Trigger.Value>
          <Color />
        </Trigger.Value>
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Opacity" Value="0" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <DataTemplate x:Key="Fluent.Ribbon.ColorGallery.ListBox.ItemTemplate">
    <Rectangle Fill="{Binding Converter={x:Static converters:StaticConverters.ColorToSolidColorBrushValueConverter}}" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush}" />
  </DataTemplate>
  <Style x:Key="ColorGalleryListBox" TargetType="{x:Type ListBox}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Background}" />
    <Setter Property="ItemContainerStyle" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.ItemContainerStyle}" />
    <Setter Property="ItemTemplate" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.ItemTemplate}" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.Template.Row1}" />
  </Style>
  <Style x:Key="HightlightColorGalleryListBox" TargetType="{x:Type ListBox}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Background}" />
    <Setter Property="ItemContainerStyle" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.ItemContainerStyle}" />
    <Setter Property="ItemTemplate" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.ItemTemplate}" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.Template.Row0}" />
  </Style>
  <DataTemplate x:Key="GradientColorCenterDataTemplate">
    <Border Background="{Binding Converter={x:Static converters:StaticConverters.ColorToSolidColorBrushValueConverter}}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush}" BorderThickness="1 0 1 0" />
  </DataTemplate>
  <DataTemplate x:Key="GradientColorTopDataTemplate">
    <Border Background="{Binding Converter={x:Static converters:StaticConverters.ColorToSolidColorBrushValueConverter}}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush}" BorderThickness="1 1 1 0" />
  </DataTemplate>
  <DataTemplate x:Key="GradientColorBottomDataTemplate">
    <Border Background="{Binding Converter={x:Static converters:StaticConverters.ColorToSolidColorBrushValueConverter}}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush}" BorderThickness="1 0 1 1" />
  </DataTemplate>
  <Style x:Key="ColorGalleryGradientListBox" TargetType="{x:Type ListBox}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Background}" />
    <Setter Property="ItemContainerStyle" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.ItemContainerStyle}" />
    <Setter Property="ItemTemplateSelector" Value="{DynamicResource ColorGradientItemTemplateSelect}" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.Template.Row0}" />
  </Style>
  <Style TargetType="{x:Type Fluent:ColorGallery}">
    <Setter Property="ChipHeight" Value="13" />
    <Setter Property="ChipWidth" Value="13" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:ColorGallery}">
          <StackPanel KeyboardNavigation.DirectionalNavigation="Contained">
            <Fluent:MenuItem x:Name="PART_AutomaticColor" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.Automatic, Mode=OneWay}">
              <Fluent:MenuItem.Icon>
                <Rectangle Width="16" Height="16" Margin="-2 0 0 0" Fill="{DynamicResource BlackBrush}" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush}" />
              </Fluent:MenuItem.Icon>
            </Fluent:MenuItem>
            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
              <StackPanel Margin="0 1 0 1" Background="{TemplateBinding Background}" ClipToBounds="True" KeyboardNavigation.DirectionalNavigation="Contained">
                <Fluent:GroupSeparatorMenuItem x:Name="themeColorsSeparator" Header="Theme Colors" />
                <ListBox x:Name="PART_ThemeColorsListBox" Padding="2" ItemsSource="{Binding ThemeColors, RelativeSource={RelativeSource TemplatedParent}}" KeyboardNavigation.DirectionalNavigation="Contained" Style="{DynamicResource ColorGalleryListBox}" />
                <ListBox x:Name="PART_ThemeGradientColorsListBox" Padding="2 0 2 0" ItemsSource="{Binding ThemeGradients, RelativeSource={RelativeSource TemplatedParent}}" KeyboardNavigation.DirectionalNavigation="Contained" Style="{DynamicResource ColorGalleryGradientListBox}" />
                <Fluent:GroupSeparatorMenuItem x:Name="standardColorsSeparator" Header="Standard Colors" />
                <ListBox x:Name="PART_StandardColorsListBox" Padding="2" ItemsSource="{x:Static Fluent:ColorGallery.StandardThemeColors}" KeyboardNavigation.DirectionalNavigation="Contained" Style="{DynamicResource ColorGalleryListBox}" />
                <ListBox x:Name="PART_StandardGradientColorsListBox" Padding="2 0 2 0" ItemsSource="{Binding StandardGradients, RelativeSource={RelativeSource TemplatedParent}}" KeyboardNavigation.DirectionalNavigation="Contained" Style="{DynamicResource ColorGalleryGradientListBox}" />
                <Fluent:GroupSeparatorMenuItem x:Name="recentColorsSeparator" Header="Recent Colors" />
                <ListBox x:Name="PART_RecentColorsListBox" Padding="2" ItemsSource="{x:Static Fluent:ColorGallery.RecentColors}" KeyboardNavigation.DirectionalNavigation="Contained" Style="{DynamicResource ColorGalleryListBox}" />
              </StackPanel>
            </ScrollViewer>
            <Fluent:MenuItem x:Name="PART_NoColor" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.NoColor, Mode=OneWay}">
              <Fluent:MenuItem.Icon>
                <Rectangle Width="16" Height="16" Margin="-2 0 0 0" Fill="Transparent" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush}" />
              </Fluent:MenuItem.Icon>
            </Fluent:MenuItem>
            <Separator x:Name="separator">
              <Separator.Template>
                <ControlTemplate>
                  <Rectangle Width="Auto" Height="1" Fill="{DynamicResource Fluent.Ribbon.Brushes.Separator.Background}" />
                </ControlTemplate>
              </Separator.Template>
            </Separator>
            <Fluent:MenuItem x:Name="PART_MoreColors" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.MoreColors, Mode=OneWay}" Icon="{DynamicResource Fluent.Ribbon.Images.MoreColors}" />
          </StackPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsAutomaticColorButtonVisible" Value="False">
              <Setter TargetName="PART_AutomaticColor" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsNoColorButtonVisible" Value="False">
              <Setter TargetName="PART_NoColor" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsMoreColorsButtonVisible" Value="False">
              <Setter TargetName="PART_MoreColors" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="separator" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Mode" Value="HighlightColors">
              <Setter Property="ChipHeight" Value="26" />
              <Setter Property="ChipWidth" Value="26" />
              <Setter Property="Columns" Value="5" />
              <Setter TargetName="PART_RecentColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_StandardColorsListBox" Property="ItemsSource" Value="{x:Static Fluent:ColorGallery.HighlightColors}" />
              <Setter TargetName="PART_StandardColorsListBox" Property="Style" Value="{DynamicResource HightlightColorGalleryListBox}" />
              <Setter TargetName="PART_StandardGradientColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_ThemeColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_ThemeGradientColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="recentColorsSeparator" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="standardColorsSeparator" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="themeColorsSeparator" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Mode" Value="StandardColors">
              <Setter Property="ChipHeight" Value="20" />
              <Setter Property="ChipWidth" Value="20" />
              <Setter Property="Columns" Value="5" />
              <Setter Property="StandardColorGridRows" Value="6" />
              <Setter TargetName="PART_RecentColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_StandardColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_StandardGradientColorsListBox" Property="ItemsSource" Value="{x:Static Fluent:ColorGallery.StandardColors}" />
              <Setter TargetName="PART_ThemeColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_ThemeGradientColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="recentColorsSeparator" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="standardColorsSeparator" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="themeColorsSeparator" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <DataTrigger Binding="{Binding ThemeColors.Count, RelativeSource={RelativeSource Self}}" Value="0">
              <Setter TargetName="themeColorsSeparator" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Count, Source={x:Static Fluent:ColorGallery.RecentColors}}" Value="0">
              <Setter TargetName="recentColorsSeparator" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="SliderThumbControlTemplate" TargetType="{x:Type Thumb}">
    <Grid Margin="2.5 0.5">
      <Border Name="path" Width="3" Height="11" Background="{TemplateBinding Foreground}">
        <Border Name="hoverborder" />
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="hoverborder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="hoverborder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="SliderRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="Height" Value="16" />
    <Setter Property="Template" Value="{DynamicResource SliderRepeatButtonControlTemplate}" />
    <Setter Property="Width" Value="16" />
  </Style>
  <DrawingImage x:Key="Fluent.Ribbon.Images.Checked" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 0,85.3333L 85.3333,85.3333L 85.3333,0L 0,0L 0,85.3333 Z " />
          <GeometryDrawing Geometry="F1 M 65.1237,26.8028L 38.0797,58.5308L 20.2091,43.5268">
            <GeometryDrawing.Pen>
              <Pen Brush="{DynamicResource BlackBrush}" MiterLimit="2.75" Thickness="6.66667" />
            </GeometryDrawing.Pen>
          </GeometryDrawing>
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.QuickAccessToolbarDropDown" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 0,85.3333L 85.3333,85.3333L 85.3333,0L 0,0L 0,85.3333 Z " />
          <GeometryDrawing Brush="{DynamicResource Fluent.Ribbon.Brushes.Images.QuickAccessToolbarDropDown}" Geometry="F1 M 5.33333,13.3333L 80.0013,13.3333L 80.0013,0L 5.33333,0M 12.6667,28L 42.6667,64L 72.6667,28L 12.6667,28 Z " />
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.QuickAccessToolbarDropDown.BelowRibbon" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 0,85.3333L 85.3333,85.3333L 85.3333,0L 0,0L 0,85.3333 Z " />
          <GeometryDrawing Brush="{DynamicResource Fluent.Ribbon.Brushes.Images.QuickAccessToolbarDropDown.BelowRibbon}" Geometry="F1 M 5.33333,13.3333L 80.0013,13.3333L 80.0013,0L 5.33333,0M 12.6667,28L 42.6667,64L 72.6667,28L 12.6667,28 Z " />
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.QuickAccessToolbarExtender" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 0,85.3333L 85.3333,85.3333L 85.3333,0L 0,0L 0,85.3333 Z " />
          <GeometryDrawing Brush="{DynamicResource Fluent.Ribbon.Brushes.Images.QuickAccessToolbarExtender}" Geometry="F1 M 48,14L 48,71.3333L 80,42.6667M 5.33333,14L 37.3333,42.6667L 5.33333,71.3333L 5.33333,14 Z " />
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.QuickAccessToolbarExtender.BelowRibbon" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 0,85.3333L 85.3333,85.3333L 85.3333,0L 0,0L 0,85.3333 Z " />
          <GeometryDrawing Brush="{DynamicResource Fluent.Ribbon.Brushes.Images.QuickAccessToolbarExtender.BelowRibbon}" Geometry="F1 M 48,14L 48,71.3333L 80,42.6667M 5.33333,14L 37.3333,42.6667L 5.33333,71.3333L 5.33333,14 Z " />
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Fluent.Ribbon.Images.RibbonDisplayOptions" x:Shared="False">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="#00FFFFFF" Geometry="F1 M 6.50001,85.3333L 91.8333,85.3333L 91.8333,0L 6.50001,0L 6.50001,85.3333 Z " />
          <GeometryDrawing Geometry="F1 M 76.9987,28.7507L 49.1667,56.584L 21.3333,28.7507">
            <GeometryDrawing.Pen>
              <Pen Brush="{DynamicResource Fluent.Ribbon.Brushes.Images.RibbonDisplayOptions}" MiterLimit="2.75" Thickness="10.6667" />
            </GeometryDrawing.Pen>
          </GeometryDrawing>
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <Style x:Key="RibbonWindowStyle" TargetType="{x:Type Fluent:RibbonWindow}">
    <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="GlowBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
    <Setter Property="NonActiveBorderBrush" Value="#434346" />
    <Setter Property="NonActiveGlowBrush" Value="#434346" />
    <Setter Property="Template" Value="{StaticResource RibbonWindowControlTemplate}" />
    <Setter Property="TitleBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonWindow.TitleBackground}" />
    <Setter Property="TitleBarHeight" Value="{DynamicResource {x:Static SystemParameters.WindowCaptionHeightKey}}" />
    <Setter Property="TitleForeground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonWindow.TitleForeground}" />
  </Style>
  <Style BasedOn="{StaticResource SpinnerStyle}" TargetType="{x:Type Fluent:Spinner}" />
  <Style BasedOn="{StaticResource TwoLineLabelStyle}" TargetType="{x:Type Fluent:TwoLineLabel}" />
  <Style BasedOn="{StaticResource KeyTipStyle}" TargetType="{x:Type Fluent:KeyTip}" />
  <Style BasedOn="{StaticResource ScreenTipStyle}" TargetType="{x:Type Fluent:ScreenTip}" />
  <Style BasedOn="{StaticResource ToolTipStyle}" TargetType="{x:Type ToolTip}" />
  <Style BasedOn="{StaticResource GalleryGroupContainerStyle}" TargetType="{x:Type Fluent:GalleryGroupContainer}" />
  <Style BasedOn="{StaticResource SeparatorTabItemStyle}" TargetType="{x:Type Fluent:SeparatorTabItem}" />
  <Style BasedOn="{StaticResource RibbonBackstageStyle}" TargetType="{x:Type Fluent:Backstage}" />
  <Style BasedOn="{StaticResource BackstageTabItemStyle}" TargetType="{x:Type Fluent:BackstageTabItem}" />
  <Style BasedOn="{StaticResource RibbonStartScreenStyle}" TargetType="{x:Type Fluent:StartScreen}" />
  <Style BasedOn="{StaticResource RibbonButtonStyle}" TargetType="{x:Type Fluent:Button}" />
  <Style BasedOn="{StaticResource RibbonCheckBoxStyle}" TargetType="{x:Type Fluent:CheckBox}" />
  <Style BasedOn="{StaticResource GalleryItemStyle}" TargetType="{x:Type Fluent:GalleryItem}" />
  <Style BasedOn="{StaticResource RibbonTabItemStyle}" TargetType="{x:Type Fluent:RibbonTabItem}" />
  <Style BasedOn="{StaticResource RibbonToolBarStyle}" TargetType="{x:Type Fluent:RibbonToolBar}" />
  <Style BasedOn="{StaticResource RibbonWindowStyle}" TargetType="{x:Type Fluent:RibbonWindow}" />
  <Style BasedOn="{StaticResource RibbonStatusBarItemStyle}" TargetType="{x:Type Fluent:StatusBarItem}" />
  <Style BasedOn="{StaticResource RibbonTitleBarStyle}" TargetType="{x:Type Fluent:RibbonTitleBar}" />
  <Style BasedOn="{StaticResource Fluent.Ribbon.Styles.RibbonGroupsContainerScrollViewer}" TargetType="{x:Type Fluent:RibbonGroupsContainerScrollViewer}" />
  <ControlTemplate x:Key="RibbonGroupBoxDropDownButtonControlTemplate" TargetType="{x:Type Fluent:RibbonGroupBox}">
    <Grid Width="22">
      <Border x:Name="PART_ButtonBorder" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
        <Fluent:IconPresenter x:Name="iconImage" IconSize="Small" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Grid Width="Auto" Height="Auto" Margin="0 20">
          <Border x:Name="border" Height="Auto" Background="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}" BorderThickness="1" d:LayoutOverrides="Width">
            <Grid x:Name="PART_ParentPanel" Height="85" Margin="0 1 0 2">
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid x:Name="PART_UpPanel" Width="Auto" Height="Auto" Margin="2 0 4 0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Stretch">
                <Fluent:RibbonGroupBoxWrapPanel x:Name="PART_NormalUpPanel" IsItemsHost="True" Visibility="Visible" />
                <StackPanel x:Name="PART_SimplifiedUpPanel" IsItemsHost="False" Orientation="Horizontal" Visibility="Collapsed" />
              </Grid>
              <Grid x:Name="PART_DownGrid" Grid.Row="1" Height="Auto" MaxWidth="{Binding ActualWidth, ElementName=PART_UpPanel}" Margin="0 -2 2 2" VerticalAlignment="Bottom">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentControl x:Name="PART_HeaderContentControl" Margin="2 0" HorizontalAlignment="Stretch" VerticalAlignment="Center" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Header.Foreground}" KeyboardNavigation.IsTabStop="False" />
                <Fluent:Button x:Name="PART_DialogLauncherButton" Grid.Column="1" Width="15" Height="14" Margin="0 0 1 1" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Fluent:RibbonProperties.IconSize="Small" Background="Transparent" BorderBrush="Transparent" Command="{Binding LauncherCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding LauncherCommandParameter, RelativeSource={RelativeSource TemplatedParent}}" CommandTarget="{Binding LauncherCommandTarget, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" Header="{TemplateBinding LauncherText}" Icon="{TemplateBinding LauncherIcon}" IsEnabled="{Binding IsLauncherEnabled, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" Template="{DynamicResource DialogLauncherButtonControlTemplate}" ToolTip="{Binding LauncherToolTip, RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
              </Grid>
              <Fluent:Button x:Name="PART_SimplifiedDialogLauncherButton" Grid.Column="1" Width="15" Height="14" Margin="-4 0 2 0" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Fluent:RibbonProperties.IconSize="Small" Background="Transparent" BorderBrush="Transparent" Command="{Binding LauncherCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding LauncherCommandParameter, RelativeSource={RelativeSource TemplatedParent}}" CommandTarget="{Binding LauncherCommandTarget, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" Header="{TemplateBinding LauncherText}" Icon="{TemplateBinding LauncherIcon}" IsEnabled="{Binding IsLauncherEnabled, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" Template="{DynamicResource DialogLauncherButtonControlTemplate}" ToolTip="{Binding LauncherToolTip, RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSimplified" Value="True">
        <Setter TargetName="PART_DownGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_NormalUpPanel" Property="IsItemsHost" Value="False" />
        <Setter TargetName="PART_NormalUpPanel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ParentPanel" Property="Height" Value="Auto" />
        <Setter TargetName="PART_SimplifiedUpPanel" Property="IsItemsHost" Value="True" />
        <Setter TargetName="PART_SimplifiedUpPanel" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsLauncherVisible" Value="True" />
          <Condition Property="IsSimplified" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_DialogLauncherButton" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsLauncherVisible" Value="True" />
          <Condition Property="IsSimplified" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_SimplifiedDialogLauncherButton" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="LauncherToolTip" Value="{x:Null}">
        <Setter TargetName="PART_DialogLauncherButton" Property="ToolTip" Value="{Binding LauncherText, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="PART_SimplifiedDialogLauncherButton" Property="ToolTip" Value="{Binding LauncherText, RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonToggleButtonStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="Template" Value="{DynamicResource RibbonToggleButtonControlTemplate}" />
    <Setter Property="Width" Value="Auto" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Large" />
        <Setter Property="Height" Value="68" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Width" Value="22" />
      </Trigger>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Padding" Value="6 2" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.ToggleButton.Simplified}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="Size" Value="Small" />
        </MultiTrigger.Conditions>
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="InnerButtonStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Fluent:KeyTip.AutoPlacement" Value="{Binding Path=(Fluent:KeyTip.AutoPlacement), RelativeSource={RelativeSource AncestorType={x:Type Fluent:SplitButton}}}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Template" Value="{DynamicResource RibbonInnerButtonControlTemplate}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Top" />
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Large" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Left" />
        <Setter Property="Fluent:KeyTip.Margin" Value="-5,0,0,0" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Left" />
        <Setter Property="Fluent:KeyTip.Margin" Value="-5,0,0,0" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </Trigger>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Left" />
        <Setter Property="Fluent:KeyTip.Margin" Value="-5,0,0,0" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Padding" Value="6 0" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.SplitButton.ToggleButton.Simplified}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="Size" Value="Small" />
        </MultiTrigger.Conditions>
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MenuScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="CanContentScroll" Value="False" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template" Value="{StaticResource MenuScrollViewerControlTemplate}" />
    <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
  </Style>
  <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
    <Style.Resources>
      <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
    </Style.Resources>
    <Setter Property="Template" Value="{DynamicResource ScrollViewerControlTemplate}" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RibbonContextualTabGroupStyle" TargetType="{x:Type Fluent:RibbonContextualTabGroup}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Foreground}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="TabItemMouseOverForeground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonContextualTabGroup.TabItemMouseOverForeground}" />
    <Setter Property="TabItemSelectedForeground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonContextualTabGroup.TabItemSelectedForeground}" />
    <Setter Property="TabItemSelectedMouseOverForeground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonContextualTabGroup.TabItemSelectedMouseOverForeground}" />
    <Setter Property="Template" Value="{DynamicResource RibbonContextualTabGroupControlTemplate}" />
    <Setter Property="Width" Value="Auto" />
  </Style>
  <ControlTemplate x:Key="ToolbarDropDownButtonControlTemplate" TargetType="{x:Type Fluent:DropDownButton}">
    <Grid>
      <Border x:Name="PART_ButtonBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
        <Fluent:IconPresenter x:Name="iconImage" HorizontalAlignment="Center" VerticalAlignment="Center" CustomSize="8,8" IconSize="Custom" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
          <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
              <Grid HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="1" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Auto" SnapsToDevicePixels="True">
                  <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Vertical" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0 1 0 0">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.25" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MenuItemTemplate" TargetType="{x:Type MenuItem}">
    <Grid Background="{TemplateBinding Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="25" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
      <ContentPresenter x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="5 3 3 3" VerticalAlignment="Center" ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" RecognizesAccessKey="{Binding Path=(Fluent:MenuItem.RecognizesAccessKey), RelativeSource={RelativeSource TemplatedParent}}" d:LayoutOverrides="Width" />
      <Border x:Name="iconImageBorder" BorderThickness="1">
        <Fluent:IconPresenter x:Name="iconImage" Margin="3 2 2 2" HorizontalAlignment="Center" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
      </Border>
      <Image x:Name="checkedImage" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Stretch="Uniform" Visibility="Collapsed" />
      <TextBlock x:Name="gestureTextBlock" Grid.Column="2" Width="Auto" Height="Auto" Margin="3 3 15 3" VerticalAlignment="Center" Text="{TemplateBinding InputGestureText}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="InputGestureText" Value="{x:Null}">
        <Setter TargetName="gestureTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="InputGestureText" Value="">
        <Setter TargetName="gestureTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="iconImageBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
        <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="checkedImage" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="checkedImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="checkedImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="gestureTextBlock" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="HeaderMenuItemTemplate" TargetType="{x:Type MenuItem}">
    <Grid Background="{TemplateBinding Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="25" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
      <ContentPresenter x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="5 3 3 3" VerticalAlignment="Center" ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" RecognizesAccessKey="{Binding Path=(Fluent:MenuItem.RecognizesAccessKey), RelativeSource={RelativeSource TemplatedParent}}" d:LayoutOverrides="Width" />
      <Border x:Name="iconImageBorder" BorderThickness="1">
        <Fluent:IconPresenter x:Name="iconImage" Margin="3 2 2 2" HorizontalAlignment="Center" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
      </Border>
      <Image x:Name="checkedImage" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Stretch="Uniform" Visibility="Collapsed" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="7" Margin="1 0 9 0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
          <Border x:Name="DropDownBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}">
                  <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0 1 0 0">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Fluent:MenuItem.ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Fluent:MenuItem.ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="Fluent:MenuItem.ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="iconImageBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
        <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="checkedImage" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="checkedImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="checkedImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SplitedMenuItemTemplate" TargetType="{x:Type MenuItem}">
    <Grid Background="{TemplateBinding Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="25" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Rectangle Grid.Column="2" Width="1" Margin="0 4 23 4" HorizontalAlignment="Right" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" />
      <Grid Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="0.905*" />
          <ColumnDefinition x:Name="columnDefinition" Width="23" />
        </Grid.ColumnDefinitions>
        <Border x:Name="PART_ButtonBorder" Margin="0 0 -1 0" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
        <Border x:Name="Submenu_Border" Grid.Column="1" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
      </Grid>
      <ContentPresenter x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="5 3 3 3" VerticalAlignment="Center" ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" RecognizesAccessKey="{Binding Path=(Fluent:MenuItem.RecognizesAccessKey), RelativeSource={RelativeSource TemplatedParent}}" d:LayoutOverrides="Width" />
      <Border x:Name="iconImageBorder" BorderThickness="1">
        <Fluent:IconPresenter x:Name="iconImage" Margin="3 2 2 2" HorizontalAlignment="Center" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
      </Border>
      <Image x:Name="checkedImage" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Stretch="Uniform" Visibility="Collapsed" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="7" Margin="1 0 9 0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid x:Name="DropDown" Margin="0" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
          <Border x:Name="DropDownBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}">
                  <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0 1 0 0">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Fluent:MenuItem.ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Fluent:MenuItem.ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="Fluent:MenuItem.ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="iconImageBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
        <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="checkedImage" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Visibility" Value="Visible" />
        <Setter TargetName="Submenu_Border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsSubmenuOpen" Value="True">
        <Setter TargetName="Submenu_Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="checkedImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="checkedImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MenuItemWithDescriptionTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <Grid Background="{TemplateBinding Background}">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="45" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
      <ContentControl x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="0 3 3 3" VerticalAlignment="Center" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" TextElement.FontWeight="Bold" d:LayoutOverrides="Width" />
      <ContentPresenter x:Name="descriptionPresenter" Grid.Row="1" Grid.Column="1" Width="Auto" Height="Auto" Margin="0 3 3 3" VerticalAlignment="Center" ContentSource="Description" RecognizesAccessKey="{Binding Path=(Fluent:MenuItem.RecognizesAccessKey), RelativeSource={RelativeSource TemplatedParent}}" d:LayoutOverrides="Width" />
      <Border x:Name="iconImageBorder" BorderThickness="1">
        <Fluent:IconPresenter x:Name="iconImage" Margin="3 2 2 2" HorizontalAlignment="Center" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
      </Border>
      <Image x:Name="checkedImage" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Stretch="Uniform" Visibility="Collapsed" />
      <TextBlock x:Name="gestureTextBlock" Grid.Column="2" Width="Auto" Height="Auto" Margin="3 3 15 3" VerticalAlignment="Center" Text="{TemplateBinding InputGestureText}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="InputGestureText" Value="{x:Null}">
        <Setter TargetName="gestureTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="InputGestureText" Value="">
        <Setter TargetName="gestureTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="iconImageBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
        <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="checkedImage" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="checkedImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="checkedImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Fluent.Ribbon.Styles.MenuItem" TargetType="{x:Type Fluent:MenuItem}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.MenuItem.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Template" Value="{DynamicResource MenuItemTemplate}" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Fluent:MenuItem.IsSplited" Value="True" />
          <Condition Property="HasItems" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Template" Value="{DynamicResource SplitedMenuItemTemplate}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Fluent:MenuItem.IsSplited" Value="False" />
          <Condition Property="HasItems" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Template" Value="{DynamicResource HeaderMenuItemTemplate}" />
      </MultiTrigger>
      <DataTrigger Binding="{Binding Description, RelativeSource={RelativeSource Self}, Converter={x:Static converters:IsNullConverter.Instance}}" Value="False">
        <Setter Property="Template" Value="{DynamicResource MenuItemWithDescriptionTemplate}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MenuSeparatorStyle" TargetType="{x:Type Separator}">
    <Setter Property="Template" Value="{DynamicResource MenuSeparatorControlTemplate}" />
  </Style>
  <Style x:Key="MenuGroupSeparatorStyle" TargetType="{x:Type Fluent:GroupSeparatorMenuItem}">
    <Setter Property="Template" Value="{DynamicResource MenuGroupSeparatorControlTemplate}" />
  </Style>
  <Style TargetType="{x:Type Fluent:RibbonMenu}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:RibbonMenu}">
          <ControlTemplate.Resources>
            <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
          </ControlTemplate.Resources>
          <Grid>
            <Rectangle Grid.RowSpan="2" Width="1" Height="Auto" Margin="24 0 0 0" HorizontalAlignment="Left" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
            <StackPanel x:Name="menuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Continue" Orientation="Vertical" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="GalleryControlTemplate" TargetType="{x:Type Fluent:Gallery}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
        <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Border x:Name="layoutRoot" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <Grid Width="Auto">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Border x:Name="border" Height="13" Background="{DynamicResource Fluent.Ribbon.Brushes.Gallery.Header.Background}" BorderBrush="{x:Null}" BorderThickness="0">
          <Fluent:DropDownButton x:Name="PART_DropDownButton" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top" Header="{TemplateBinding SelectedFilterTitle}" Style="{DynamicResource GalleryDropDownButtonStyle}" />
        </Border>
        <ScrollViewer x:Name="scrollViewer" Grid.Row="1" Grid.RowSpan="1" Margin="1" Focusable="False">
          <Fluent:GalleryPanel Background="{DynamicResource WhiteBrush}" Filter="{TemplateBinding SelectedFilterGroups}" GroupBy="{TemplateBinding GroupBy}" GroupByAdvanced="{TemplateBinding GroupByAdvanced}" IsGrouped="{TemplateBinding IsGrouped}" IsItemsHost="True" ItemContainerGenerator="{Binding ItemContainerGenerator, RelativeSource={RelativeSource TemplatedParent}}" ItemHeight="{TemplateBinding ItemHeight}" ItemWidth="{TemplateBinding ItemWidth}" MaxItemsInRow="{TemplateBinding MaxItemsInRow}" MinItemsInRow="{TemplateBinding MinItemsInRow}" Orientation="{TemplateBinding Orientation}" />
        </ScrollViewer>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="HasFilter" Value="False">
        <Setter TargetName="border" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="GalleryStyle" TargetType="{x:Type Fluent:Gallery}">
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Template" Value="{DynamicResource GalleryControlTemplate}" />
    <Style.Triggers>
      <Trigger Property="IsLastItem" Value="True">
        <Setter Property="BorderThickness" Value="0" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <StackPanel Orientation="Vertical" />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <WrapPanel Orientation="Horizontal" />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="InRibbonGalleryToggleButtonStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Template" Value="{DynamicResource InRibbonGalleryToggleButtonControlTemplate}" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Width" Value="Auto" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Large" />
        <Setter Property="Height" Value="68" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
        <Setter Property="Height" Value="22" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="31" />
      </Trigger>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Padding" Value="6 2 2 2" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.InRibbonGallery.ToggleButton.Simplified}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="Size" Value="Small" />
        </MultiTrigger.Conditions>
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="InRibbonGalleryControlTemplate" TargetType="{x:Type Fluent:InRibbonGallery}">
    <Grid x:Name="PART_LayoutRoot" Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
      <Border x:Name="border" Width="Auto" Height="{TemplateBinding GalleryPanelContainerHeight}" Margin="0 0 0 0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1 1 1 1" ClipToBounds="True">
        <Grid Width="Auto" Height="Auto">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <ScrollViewer HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Visible">
            <ScrollViewer.Resources>
              <Style TargetType="{x:Type ScrollBar}">
                <Setter Property="ContextMenu" Value="{x:Null}" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                      <Grid>
                        <StackPanel x:Name="upDownButtonPanel" Margin="0 -1 -1 0" HorizontalAlignment="Right">
                          <RepeatButton x:Name="upButton" Width="15" Height="21" Margin="0 0 0 0" Command="ScrollBar.PageUpCommand" Style="{DynamicResource InRibbonGalleryRepeatButton}">
                            <Path Width="5" Height="3" Data="M0,0 L1,-1 2,0z" Fill="{DynamicResource BlackBrush}" RenderOptions.EdgeMode="Aliased" Stretch="Fill" />
                          </RepeatButton>
                          <RepeatButton x:Name="downButton" Width="15" Height="21" Margin="0 -1 0 0" Command="ScrollBar.PageDownCommand" Style="{DynamicResource InRibbonGalleryRepeatButton}">
                            <Path Width="5" Height="3" Data="M0,0 L1,1 2,0z" Fill="{DynamicResource BlackBrush}" RenderOptions.EdgeMode="Aliased" Stretch="Fill" />
                          </RepeatButton>
                        </StackPanel>
                        <Grid x:Name="upDownButtonPanelSimplified" Margin="0 -1 -1 -2" HorizontalAlignment="Right" Visibility="Collapsed">
                          <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                          </Grid.RowDefinitions>
                          <RepeatButton x:Name="upButtonSimplified" Grid.Row="0" Width="15" Height="Auto" Margin="0 0 0 -0.5" Command="ScrollBar.PageUpCommand" Style="{DynamicResource InRibbonGalleryRepeatButton}">
                            <Path Width="5" Height="3" Data="M0,0 L1,-1 2,0z" Fill="{DynamicResource BlackBrush}" RenderOptions.EdgeMode="Aliased" Stretch="Fill" />
                          </RepeatButton>
                          <RepeatButton x:Name="downButtonSimplified" Grid.Row="1" Width="15" Height="Auto" Margin="0 -0.5 0 0" Command="ScrollBar.PageDownCommand" Style="{DynamicResource InRibbonGalleryRepeatButton}">
                            <Path Width="5" Height="3" Data="M0,0 L1,1 2,0z" Fill="{DynamicResource BlackBrush}" RenderOptions.EdgeMode="Aliased" Stretch="Fill" />
                          </RepeatButton>
                        </Grid>
                      </Grid>
                      <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                          <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsSimplified, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:InRibbonGallery}}, FallbackValue=False}" Value="True" />
                            <Condition Binding="{Binding IsCollapsed, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:InRibbonGallery}}, FallbackValue=True}" Value="False" />
                          </MultiDataTrigger.Conditions>
                          <Setter TargetName="upDownButtonPanel" Property="Visibility" Value="Collapsed" />
                          <Setter TargetName="upDownButtonPanelSimplified" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </ScrollViewer.Resources>
            <ContentControl x:Name="PART_ContentPresenter" Focusable="False">
              <Fluent:GalleryPanel x:Name="PART_GalleryPanel" Background="{DynamicResource WhiteBrush}" Filter="{TemplateBinding SelectedFilterGroups}" GroupBy="{TemplateBinding GroupBy}" GroupByAdvanced="{TemplateBinding GroupByAdvanced}" IsGrouped="False" IsItemsHost="True" ItemContainerGenerator="{Binding ItemContainerGenerator, RelativeSource={RelativeSource TemplatedParent}}" ItemHeight="{TemplateBinding ItemHeight}" ItemWidth="{TemplateBinding ItemWidth}" Orientation="{TemplateBinding Orientation}" />
            </ContentControl>
          </ScrollViewer>
          <Fluent:ToggleButton x:Name="PART_ExpandButton" Width="15" Height="20" Margin="0 0 -1 -1" HorizontalAlignment="Right" VerticalAlignment="Bottom" CanAddToQuickAccessToolBar="False" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="False" Style="{DynamicResource InRibbonGalleryButton}" />
          <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Custom" PlacementTarget="{Binding ElementName=PART_LayoutRoot}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
            <Popup.Resources>
              <ResourceDictionary>
                <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
              </ResourceDictionary>
            </Popup.Resources>
            <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
              <Border x:Name="PART_DropDownBorder" MinWidth="{Binding ActualWidth, ElementName=PART_LayoutRoot}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
                <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top" KeyboardNavigation.DirectionalNavigation="Cycle">
                  <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
                  <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Rectangle Grid.RowSpan="2" Width="1" Height="Auto" Margin="24 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Stretch" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                    <Grid x:Name="PART_MenuPanel" MinWidth="{Binding MinWidth, ElementName=PART_DropDownBorder}" MaxHeight="{TemplateBinding MaxDropDownHeight}" VerticalAlignment="Top">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <Border BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Width="Auto">
                          <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                          </Grid.RowDefinitions>
                          <Border x:Name="border_" Grid.Row="0" Height="13" Background="{DynamicResource Fluent.Ribbon.Brushes.Gallery.Header.Background}" BorderBrush="{x:Null}" BorderThickness="0">
                            <Fluent:DropDownButton x:Name="PART_FilterDropDownButton" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top" Header="{TemplateBinding SelectedFilterTitle}" Style="{DynamicResource GalleryDropDownButtonStyle}" />
                          </Border>
                          <ScrollViewer x:Name="PART_ScrollViewer" Grid.Row="1" MinHeight="{Binding ActualHeight, ElementName=PART_LayoutRoot}" Margin="1" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="0 0 0 1">
                            <ContentControl x:Name="PART_PopupContentPresenter" Content="{x:Null}" Focusable="False" />
                          </ScrollViewer>
                        </Grid>
                      </Border>
                      <ContentPresenter x:Name="PART_PopupMenuPresenter" Grid.Row="1" VerticalAlignment="Top" ContentSource="Menu" KeyboardNavigation.DirectionalNavigation="None" />
                    </Grid>
                    <Border x:Name="PART_PopupResizeBorder" Grid.Row="2" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0 1 0 0">
                      <Grid>
                        <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                        <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                      </Grid>
                    </Border>
                  </Grid>
                </Grid>
              </Border>
            </Grid>
          </Popup>
        </Grid>
      </Border>
      <Fluent:ToggleButton x:Name="PART_DropDownButton" Margin="0 0 0 0" CanAddToQuickAccessToolBar="False" ClickMode="Press" Header="{Binding Path=Header, RelativeSource={RelativeSource TemplatedParent}}" Icon="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="False" LargeIcon="{Binding Path=LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" Size="{Binding Path=Size, RelativeSource={RelativeSource TemplatedParent}}" SizeDefinition="{Binding Path=SizeDefinition, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource InRibbonGalleryToggleButtonStyle}" Visibility="Collapsed" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="HasFilter" Value="False">
        <Setter TargetName="border_" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_DropDownButton" Property="IsEnabled" Value="False" />
        <Setter TargetName="PART_ExpandButton" Property="IsEnabled" Value="False" />
      </Trigger>
      <Trigger Property="IsCollapsed" Value="True">
        <Setter TargetName="PART_DropDownButton" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_LayoutRoot" Property="HorizontalAlignment" Value="Left" />
        <Setter TargetName="PART_LayoutRoot" Property="VerticalAlignment" Value="Top" />
        <Setter TargetName="PART_Popup" Property="Placement" Value="Bottom" />
        <Setter TargetName="border" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="IsCollapsed" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_LayoutRoot" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="PART_LayoutRoot" Property="VerticalAlignment" Value="Stretch" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="IsCollapsed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ExpandButton" Property="Grid.Column" Value="1" />
      </MultiTrigger>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="PART_PopupResizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_PopupResizeBorder" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_PopupResizeBorder" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="Menu" Value="{x:Null}">
        <Setter TargetName="PART_ScrollViewer" Property="BorderThickness" Value="0" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{x:Type Fluent:InRibbonGallery}" TargetType="{x:Type Fluent:InRibbonGallery}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Margin" Value="2 3 3 0" />
    <Setter Property="Template" Value="{DynamicResource InRibbonGalleryControlTemplate}" />
    <Style.Triggers>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="GalleryPanelContainerHeight" Value="NaN" />
        <Setter Property="Margin" Value="1 0" />
        <!-- double.NaN=Auto -->
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="BackstageControlTemplate" TargetType="{x:Type Fluent:BackstageTabControl}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
        <Style x:Key="{x:Type Fluent:Button}" BasedOn="{StaticResource Fluent.Ribbon.Styles.Backstage.Button}" TargetType="{x:Type Fluent:Button}" />
        <Style x:Key="{x:Type Fluent:ToggleButton}" BasedOn="{StaticResource Fluent.Ribbon.Styles.Backstage.ToggleButton}" TargetType="{x:Type Fluent:ToggleButton}" />
        <Style x:Key="{x:Type Fluent:DropDownButton}" BasedOn="{StaticResource Fluent.Ribbon.Styles.Backstage.DropDownButton}" TargetType="{x:Type Fluent:DropDownButton}" />
        <Style x:Key="{x:Type Fluent:ComboBox}" BasedOn="{StaticResource Fluent.Ribbon.Styles.Backstage.ComboBox}" TargetType="{x:Type Fluent:ComboBox}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding ItemsPanelMinWidth}" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <Grid x:Name="PART_ItemsPanelContainer" VerticalAlignment="Stretch" Background="{DynamicResource WhiteBrush}">
        <Grid Background="{TemplateBinding ItemsPanelBackground}" KeyboardNavigation.DirectionalNavigation="Cycle">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
          </Grid.RowDefinitions>
          <Fluent:WindowSteeringHelperControl Grid.RowSpan="2" Height="{Binding SelectedContentMargin.Top, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Top" IsEnabled="{TemplateBinding IsWindowSteeringHelperEnabled}" />
          <Button x:Name="backbutton" Grid.Row="0" Padding="22 7 0 7" VerticalAlignment="Top" Command="{x:Static Fluent:RibbonCommands.OpenBackstage}" Style="{DynamicResource BackstageBackButtonStyle}" Visibility="{Binding Path=IsBackButtonVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}">
            <Button.Margin>
              <MultiBinding Converter="{x:Static converters:StaticConverters.ThicknessConverter}">
                <Binding Source="0" />
                <Binding FallbackValue="0" Path="TitleBar.ActualHeight" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Fluent:IRibbonWindow}}" />
                <Binding Source="0" />
                <Binding Source="0" />
              </MultiBinding>
            </Button.Margin>
          </Button>
          <ItemsPresenter Grid.Row="1" Height="Auto" />
        </Grid>
      </Grid>
      <Grid x:Name="PART_SelectedContentGrid" Grid.Column="1" Height="Auto" Margin="{TemplateBinding SelectedContentMargin}" Background="{DynamicResource WhiteBrush}">
        <Border Background="{TemplateBinding Background}">
          <ContentPresenter x:Name="PART_SelectedContentHost" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ContentSource="SelectedContent" />
        </Border>
      </Grid>
    </Grid>
  </ControlTemplate>
  <Style x:Key="BackstageStyle" TargetType="{x:Type Fluent:BackstageTabControl}">
    <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="ItemContainerStyleSelector" Value="{x:Static styleSelectors:BackstageTabControlItemContainerStyleSelector.Instance}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <DockPanel LastChildFill="False" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanelBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.BackstageTabControl.ItemsPanelBackground}" />
    <Setter Property="SelectedContentMargin">
      <Setter.Value>
        <MultiBinding Converter="{x:Static converters:StaticConverters.ThicknessConverter}">
          <Binding Source="0" />
          <Binding FallbackValue="0" Path="TitleBar.ActualHeight" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Fluent:IRibbonWindow}}" />
          <Binding Source="0" />
          <Binding Source="0" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="Template" Value="{DynamicResource BackstageControlTemplate}" />
  </Style>
  <ControlTemplate x:Key="StartScreenTabControlTemplate" TargetType="{x:Type Fluent:StartScreenTabControl}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
        <Style x:Key="{x:Type Fluent:Button}" BasedOn="{StaticResource Fluent.Ribbon.Styles.Backstage.Button}" TargetType="{x:Type Fluent:Button}" />
        <Style x:Key="{x:Type Fluent:DropDownButton}" BasedOn="{StaticResource Fluent.Ribbon.Styles.Backstage.DropDownButton}" TargetType="{x:Type Fluent:DropDownButton}" />
        <Style x:Key="{x:Type Fluent:ComboBox}" BasedOn="{StaticResource Fluent.Ribbon.Styles.Backstage.ComboBox}" TargetType="{x:Type Fluent:ComboBox}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid x:Name="grid">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding ItemsPanelMinWidth}" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <Grid x:Name="PART_LeftContentGrid" Margin="{TemplateBinding LeftContentMargin}" VerticalAlignment="Stretch" Background="{TemplateBinding ItemsPanelBackground}">
        <Border Padding="15 25">
          <ContentPresenter Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding LeftContent}" />
        </Border>
        <Fluent:WindowSteeringHelperControl Height="{Binding SelectedContentMargin.Top, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Top" IsEnabled="{TemplateBinding IsWindowSteeringHelperEnabled}" />
      </Grid>
      <Grid x:Name="PART_SelectedContentGrid" Grid.Column="1" Height="Auto" Margin="{TemplateBinding SelectedContentMargin}" Background="{DynamicResource WhiteBrush}">
        <Border Padding="33 16" Background="{DynamicResource WhiteBrush}">
          <ContentPresenter x:Name="PART_SelectedContentHost" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding RightContent}" />
        </Border>
      </Grid>
    </Grid>
  </ControlTemplate>
  <Style x:Key="RibbonToolBarControlGroupStyle" TargetType="{x:Type Fluent:RibbonToolBarControlGroup}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template" Value="{DynamicResource RibbonToolBarControlGroupTemplate}" />
  </Style>
  <ControlTemplate x:Key="RibbonStatusBarContextMenuItemControlTemplate" TargetType="{x:Type Fluent:StatusBarMenuItem}">
    <Grid Width="Auto" Height="Auto" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="25" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="5 3 3 3" VerticalAlignment="Center" Text="{Binding StatusBarItem.Title, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="CharacterEllipsis" />
      <Image x:Name="image" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Stretch="Uniform" Visibility="Collapsed" />
      <Fluent:IconPresenter x:Name="iconImage" Margin="3 2 2 2" HorizontalAlignment="Center" VerticalAlignment="Center" SmallIcon="{TemplateBinding Icon}" />
      <TextBlock Grid.Column="3" Width="Auto" Height="Auto" Margin="9 3 3 3" VerticalAlignment="Center" Text="{Binding StatusBarItem.Value, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="CharacterEllipsis" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="6" Margin="1 0 4 0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
    </Grid>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="path" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonComboButtonStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="Template" Value="{DynamicResource RibbonComboButtonControlTemplate}" />
    <Setter Property="Width" Value="Auto" />
  </Style>
  <ControlTemplate x:Key="RibbonComboboxControlTemplate" TargetType="{x:Type Fluent:ComboBox}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="Auto" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <StackPanel x:Name="headerAndIconPanel" Margin="0 0 4 0" HorizontalAlignment="Left" Orientation="Horizontal">
        <Fluent:IconPresenter x:Name="iconImage" Margin="3 0 0 0" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition SharedSizeGroup="{Binding Path=(Fluent:RibbonGroupBoxWrapPanel.SharedSizeGroupName), RelativeSource={RelativeSource TemplatedParent}}" />
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="headerTextBlock" Margin="5 0 0 0" VerticalAlignment="Center" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
        </Grid>
      </StackPanel>
      <Border x:Name="PART_ContentBorder" Grid.Column="1" Width="{TemplateBinding InputWidth}" Height="Auto" HorizontalAlignment="Right" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.BorderBrush}" BorderThickness="1 1 1 1" d:LayoutOverrides="GridBox">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="13" />
          </Grid.ColumnDefinitions>
          <Fluent:ToggleButton x:Name="PART_ToggleButton" Grid.ColumnSpan="2" Height="Auto" Margin="0" VerticalAlignment="Stretch" BorderThickness="0" CanAddToQuickAccessToolBar="False" ClickMode="Press" Focusable="False" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="False" Style="{DynamicResource RibbonComboButtonStyle}" />
          <ContentPresenter x:Name="PART_ContentSite" Margin="3 0 3 0" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
          <Image x:Name="PART_SelectedImage" Width="Auto" Height="Auto" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" IsHitTestVisible="False" Stretch="None" Visibility="Collapsed" />
          <TextBox x:Name="PART_EditableTextBox" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderThickness="0" CaretBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.CaretBrush}" Focusable="True" Foreground="{TemplateBinding Foreground}" IsReadOnly="{TemplateBinding IsReadOnly}" SelectionBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.SelectionBrush}" Style="{x:Null}" TextWrapping="NoWrap" Visibility="Hidden" />
        </Grid>
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_ContentBorder}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Popup.Resources>
          <ResourceDictionary>
            <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
          </ResourceDictionary>
        </Popup.Resources>
        <Border x:Name="PART_DropDownBorder" MinWidth="{Binding ActualWidth, ElementName=PART_ContentBorder}" MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
          <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top" KeyboardNavigation.DirectionalNavigation="Cycle">
            <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid x:Name="PART_MenuPanel" Grid.Row="1" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ContentPresenter Grid.Row="0" ContentSource="TopPopupContent" />
                <ScrollViewer x:Name="PART_ScrollViewer" Grid.Row="1" Margin="1" VerticalAlignment="Stretch" Background="{DynamicResource WhiteBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="0 0 0 1" Focusable="False" KeyboardNavigation.DirectionalNavigation="None" SnapsToDevicePixels="True">
                  <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </ScrollViewer>
                <ContentPresenter x:Name="menuPresenter" Grid.Row="2" VerticalAlignment="Top" ContentSource="Menu" KeyboardNavigation.DirectionalNavigation="None" />
              </Grid>
              <ContentControl x:Name="downResizeContent" Grid.Row="2">
                <Border x:Name="resizeBorder" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0 1 0 0" RenderTransformOrigin="0.5, 0.5">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </ContentControl>
            </Grid>
          </Grid>
        </Border>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Menu" Value="{x:Null}">
        <Setter TargetName="PART_ScrollViewer" Property="BorderThickness" Value="0" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}">
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="headerAndIconPanel" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="headerTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="InputWidth" Value="NaN">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.BorderBrush}" />
        <Setter TargetName="PART_EditableTextBox" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="PART_EditableTextBox" Property="IsEnabled" Value="False" />
        <Setter TargetName="headerTextBlock" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_EditableTextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_EditableTextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="HasItems" Value="false">
        <Setter TargetName="PART_DropDownBorder" Property="MinHeight" Value="95" />
      </Trigger>
      <Trigger Property="IsGrouping" Value="true">
        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
      </Trigger>
      <Trigger Property="IsEditable" Value="true">
        <Setter Property="IsTabStop" Value="false" />
        <Setter TargetName="PART_ContentSite" Property="Visibility" Value="Hidden" />
        <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.ComboBox.Simplified" TargetType="{x:Type Fluent:ComboBox}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Border x:Name="border" Padding="{TemplateBinding Padding}" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
      <Grid Width="Auto" Height="Auto" Background="Transparent">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <StackPanel x:Name="headerAndIconPanel" HorizontalAlignment="Left" Orientation="Horizontal">
          <Fluent:IconPresenter x:Name="iconImage" Margin="0 0 4 0" VerticalAlignment="Center" IconSize="{Binding (Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition SharedSizeGroup="{Binding Path=(Fluent:RibbonGroupBoxWrapPanel.SharedSizeGroupName), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.ColumnDefinitions>
            <TextBlock x:Name="headerTextBlock" Margin="0 0 4 0" VerticalAlignment="Center" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
          </Grid>
        </StackPanel>
        <Border x:Name="PART_ContentBorder" Grid.Column="1" Width="{TemplateBinding InputWidth}" Height="Auto" HorizontalAlignment="Right" VerticalAlignment="Center" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.BorderBrush}" BorderThickness="1 1 1 1" d:LayoutOverrides="GridBox">
          <Grid VerticalAlignment="Center">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="13" />
            </Grid.ColumnDefinitions>
            <Fluent:ToggleButton x:Name="PART_ToggleButton" Grid.ColumnSpan="2" Height="Auto" MinHeight="0" Margin="0" VerticalAlignment="Stretch" BorderThickness="0" CanAddToQuickAccessToolBar="False" ClickMode="Press" Focusable="False" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="False" Style="{DynamicResource RibbonComboButtonStyle}" />
            <ContentPresenter x:Name="PART_ContentSite" Margin="3 0 3 0" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
            <Image x:Name="PART_SelectedImage" Width="Auto" Height="Auto" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" IsHitTestVisible="False" Stretch="None" Visibility="Collapsed" />
            <TextBox x:Name="PART_EditableTextBox" Padding="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderThickness="0" CaretBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.CaretBrush}" Focusable="True" Foreground="{TemplateBinding Foreground}" IsReadOnly="{TemplateBinding IsReadOnly}" SelectionBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.SelectionBrush}" Style="{x:Null}" TextWrapping="NoWrap" Visibility="Hidden" />
          </Grid>
        </Border>
        <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_ContentBorder}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
          <Popup.Resources>
            <ResourceDictionary>
              <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
            </ResourceDictionary>
          </Popup.Resources>
          <Border x:Name="PART_DropDownBorder" MinWidth="{Binding ActualWidth, ElementName=PART_ContentBorder}" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top" KeyboardNavigation.DirectionalNavigation="Cycle">
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ContentPresenter Grid.Row="0" ContentSource="TopPopupContent" />
                <Grid x:Name="PART_MenuPanel" Grid.Row="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" VerticalAlignment="Top">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" VerticalAlignment="Stretch" Background="{DynamicResource WhiteBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="0 0 0 1" Focusable="False" KeyboardNavigation.DirectionalNavigation="None" SnapsToDevicePixels="True">
                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </ScrollViewer>
                  <ContentPresenter x:Name="menuPresenter" Grid.Row="1" VerticalAlignment="Top" ContentSource="Menu" KeyboardNavigation.DirectionalNavigation="None" />
                </Grid>
                <ContentControl x:Name="downResizeContent" Grid.Row="2">
                  <Border x:Name="resizeBorder" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0 1 0 0" RenderTransformOrigin="0.5, 0.5">
                    <Grid>
                      <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                      <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                    </Grid>
                  </Border>
                </ContentControl>
              </Grid>
            </Grid>
          </Border>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Menu" Value="{x:Null}">
        <Setter TargetName="PART_ScrollViewer" Property="BorderThickness" Value="0" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}">
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="border" Property="Padding" Value="4 0" />
        <Setter TargetName="headerTextBlock" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="iconImage" Property="Margin" Value="0 0 2 0" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="headerTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="InputWidth" Value="NaN">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.BorderBrush}" />
        <Setter TargetName="PART_EditableTextBox" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="PART_EditableTextBox" Property="IsEnabled" Value="False" />
        <Setter TargetName="headerTextBlock" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_EditableTextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_EditableTextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="HasItems" Value="false">
        <Setter TargetName="PART_DropDownBorder" Property="MinHeight" Value="95" />
      </Trigger>
      <Trigger Property="IsGrouping" Value="true">
        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
      </Trigger>
      <Trigger Property="IsEditable" Value="true">
        <Setter Property="IsTabStop" Value="false" />
        <Setter TargetName="PART_ContentSite" Property="Visibility" Value="Hidden" />
        <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type Fluent:ComboBox}">
    <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Height" Value="22" />
    <Setter Property="IsEditable" Value="True" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Template" Value="{DynamicResource RibbonComboboxControlTemplate}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="ItemContainerStyleSelector" Value="{x:Null}">
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ComboBoxItemStyle}" />
      </Trigger>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Padding" Value="6 0" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.ComboBox.Simplified}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="Size" Value="Small" />
        </MultiTrigger.Conditions>
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="RibbonControlTemplate" TargetType="{x:Type Fluent:Ribbon}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
    </ControlTemplate.Resources>
    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <Grid x:Name="PART_LayoutRoot" Width="Auto" Height="Auto">
        <Grid.RowDefinitions>
          <RowDefinition Height="*" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Fluent:RibbonTabControl x:Name="PART_RibbonTabControl" AreTabHeadersVisible="{TemplateBinding AreTabHeadersVisible}" ContentHeight="{TemplateBinding ContentHeight}" ContextMenu="{Binding ContextMenu, ElementName=PART_LayoutRoot}" IsMouseWheelScrollingEnabled="{TemplateBinding IsMouseWheelScrollingEnabled}" IsToolBarVisible="{TemplateBinding IsToolBarVisible}" Menu="{TemplateBinding Menu}" />
        <ContentControl x:Name="quickAccessToolBarHolder" Grid.Row="1" Height="{TemplateBinding QuickAccessToolBarHeight}" HorizontalAlignment="Left">
          <Fluent:QuickAccessToolBar x:Name="PART_QuickAccessToolBar" HorizontalAlignment="Left" Focusable="False" IsMenuDropDownVisible="{TemplateBinding IsQuickAccessToolBarMenuDropDownVisible}" ShowAboveRibbon="{Binding ShowQuickAccessToolBarAboveRibbon, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
        </ContentControl>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsQuickAccessToolBarVisible" Value="False">
        <Setter TargetName="PART_QuickAccessToolBar" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="quickAccessToolBarHolder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsCollapsed" Value="True">
        <Setter TargetName="PART_RibbonTabControl" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="quickAccessToolBarHolder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="QuickAccessToolBar" Value="{x:Null}">
        <Setter TargetName="quickAccessToolBarHolder" Property="Content" Value="{x:Null}" />
        <Setter TargetName="quickAccessToolBarHolder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ShowQuickAccessToolBarAboveRibbon" Value="True">
        <Setter TargetName="quickAccessToolBarHolder" Property="Content" Value="{x:Null}" />
        <Setter TargetName="quickAccessToolBarHolder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsSimplified" Value="True">
        <Setter TargetName="PART_RibbonTabControl" Property="ContentHeight" Value="42" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonStyle" TargetType="{x:Type Fluent:Ribbon}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}" />
    <Setter Property="Fluent:FrameworkHelper.UseLayoutRounding" Value="True" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="QuickAccessToolBarHeight" Value="{Binding TitleBar.ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:IRibbonWindow}}, FallbackValue=23}" />
    <Setter Property="Template" Value="{DynamicResource RibbonControlTemplate}" />
    <Setter Property="TitleBar" Value="{Binding TitleBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:IRibbonWindow}}, FallbackValue={x:Null}}" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Height" Value="14" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="Template" Value="{DynamicResource SliderThumbControlTemplate}" />
    <Setter Property="Width" Value="14" />
  </Style>
  <ControlTemplate x:Key="ZoomSliderControlTemplate" TargetType="{x:Type Slider}">
    <Grid Width="133" Height="16">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="16" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="16" />
      </Grid.ColumnDefinitions>
      <Rectangle Grid.Column="1" Grid.ColumnSpan="1" Height="1" Margin="0 -1 0 0" VerticalAlignment="Center" Stroke="{TemplateBinding Foreground}" />
      <!--<Rectangle Grid.ColumnSpan="1" Margin="-1,0,0,0" Stroke="{DynamicResource SliderShadowBrush}" VerticalAlignment="Center" Height="7" Grid.Column="1" Width="1" HorizontalAlignment="Center"/>-->
      <Rectangle Grid.Column="1" Grid.ColumnSpan="1" Height="1" Margin="0 1 0 0" VerticalAlignment="Center" Stroke="{TemplateBinding Foreground}" />
      <Rectangle Grid.Column="1" Grid.ColumnSpan="1" Width="1" Height="7" Margin="0 1 0 1" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{TemplateBinding Foreground}" />
      <Rectangle x:Name="rectangle" Grid.Column="1" Grid.ColumnSpan="1" Margin="0" Fill="Transparent" Stroke="{x:Null}" StrokeThickness="0" />
      <Track x:Name="PART_Track" Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="1" Height="16">
        <Track.DecreaseRepeatButton>
          <RepeatButton x:Name="leftButton" Command="Slider.DecreaseLarge" Style="{DynamicResource SliderButtonStyle}" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb x:Name="thumb" Style="{DynamicResource SliderThumbStyle}" />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton x:Name="rightButton" Command="Slider.IncreaseLarge" Style="{DynamicResource SliderButtonStyle}" />
        </Track.IncreaseRepeatButton>
      </Track>
      <RepeatButton x:Name="repeatButton" Command="Slider.DecreaseLarge" Style="{DynamicResource SliderRepeatButtonStyle}">
        <Grid Margin="0" Background="Transparent" IsHitTestVisible="True">
          <Path Width="10" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,0" Fill="{x:Null}" Stretch="Fill" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" />
        </Grid>
      </RepeatButton>
      <RepeatButton x:Name="repeatButton_Copy" Grid.Column="2" Command="Slider.IncreaseLarge" Style="{DynamicResource SliderRepeatButtonStyle}">
        <Grid Margin="0" Background="Transparent" IsHitTestVisible="True">
          <Path Width="2" Height="10" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L0,1" Stretch="Fill" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" />
          <Path Width="10" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,0" Stretch="Fill" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" />
        </Grid>
      </RepeatButton>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger SourceName="leftButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="thumb" Property="Background" Value="Red" />
      </Trigger>
      <Trigger SourceName="rightButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="thumb" Property="Background" Value="Red" />
      </Trigger>
      <Trigger SourceName="thumb" Property="IsMouseOver" Value="True">
        <Setter TargetName="thumb" Property="Background" Value="Red" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style BasedOn="{StaticResource BackstageStyle}" TargetType="{x:Type Fluent:BackstageTabControl}" />
  <Style BasedOn="{StaticResource RibbonToggleButtonStyle}" TargetType="{x:Type Fluent:ToggleButton}" />
  <Style BasedOn="{StaticResource GalleryStyle}" TargetType="{x:Type Fluent:Gallery}" />
  <Style BasedOn="{StaticResource RibbonContextualTabGroupStyle}" TargetType="{x:Type Fluent:RibbonContextualTabGroup}" />
  <Style BasedOn="{StaticResource RibbonToolBarControlGroupStyle}" TargetType="{x:Type Fluent:RibbonToolBarControlGroup}" />
  <Style BasedOn="{StaticResource RibbonStyle}" TargetType="{x:Type Fluent:Ribbon}" />
  <Style BasedOn="{StaticResource Fluent.Ribbon.Styles.MenuItem}" TargetType="{x:Type Fluent:MenuItem}" />
  <Style BasedOn="{StaticResource MenuGroupSeparatorStyle}" TargetType="{x:Type Fluent:GroupSeparatorMenuItem}" />
  <ControlTemplate x:Key="ApplicationMenuSecondLevelItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="Auto" MinHeight="53" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="44" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="9 5 3 3" VerticalAlignment="Top" FontWeight="Bold" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="CharacterEllipsis" d:LayoutOverrides="Width" />
      <TextBlock x:Name="textBlockDesc" Grid.Column="1" Width="Auto" Height="Auto" Margin="9 22 3 3" HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{TemplateBinding Description}" TextWrapping="Wrap" d:LayoutOverrides="Width" />
      <Rectangle x:Name="rectangle" Grid.ColumnSpan="1" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Visibility="Collapsed" />
      <Image x:Name="image" Width="32" Height="32" Margin="0 4 0 0" HorizontalAlignment="Center" VerticalAlignment="Top" SnapsToDevicePixels="True" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Stretch="Uniform" Visibility="Collapsed" />
      <Fluent:IconPresenter x:Name="iconImage" Margin="3 4 2 2" HorizontalAlignment="Center" VerticalAlignment="Top" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="HeaderApplicationMenuSecondLevelItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="Auto" MinHeight="53" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="44" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="9 5 3 3" VerticalAlignment="Top" FontWeight="Bold" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="CharacterEllipsis" d:LayoutOverrides="Width" />
      <TextBlock x:Name="textBlockDesc" Grid.Column="1" Width="Auto" Height="Auto" Margin="9 22 3 3" HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{TemplateBinding Description}" TextWrapping="Wrap" d:LayoutOverrides="Width" />
      <Rectangle x:Name="rectangle" Grid.ColumnSpan="1" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Visibility="Collapsed" />
      <Image x:Name="image" Width="32" Height="32" Margin="0 4 0 0" HorizontalAlignment="Center" VerticalAlignment="Top" SnapsToDevicePixels="True" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Stretch="Uniform" Visibility="Collapsed" />
      <Fluent:IconPresenter x:Name="iconImage" Margin="3 4 2 2" HorizontalAlignment="Center" VerticalAlignment="Top" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="7" Margin="1 0 9 0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 0 0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
          <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="4" />
          </Grid.RowDefinitions>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="4" />
          </Grid.ColumnDefinitions>
          <Rectangle Grid.Row="1" Grid.Column="1" Width="4" Height="4" Margin="-1 -1 0 0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.017,0.002" GradientOrigin="0.017,0.002" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="4" Margin="-1 3 0 0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.032,1.01" GradientOrigin="0.032,1.01" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="1" Grid.Column="0" Width="4" Height="4" Margin="3 -1 0 0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.996,0.027" GradientOrigin="0.996,0.027" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="1" Grid.Column="0" Width="Auto" Height="4" Margin="7 -1 1 0" HorizontalAlignment="Stretch" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </LinearGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="Auto" Margin="-1 7 0 1" HorizontalAlignment="Left" VerticalAlignment="Stretch" StrokeThickness="0">
            <Rectangle.Fill>
              <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </LinearGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Border x:Name="DropDownBorder" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="2,2,1,1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Path Grid.RowSpan="2" Width="1" Height="Auto" Margin="24 0 0 0" HorizontalAlignment="Left" Data="M0,0L0,1" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto">
                  <StackPanel x:Name="PART_MenuPanel" MaxWidth="{Binding ActualWidth, ElementName=PART_ScrollViewer}" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" />
                </ScrollViewer>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SplitedApplicationMenuSecondLevelItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="Auto" MinHeight="53" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="44" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Rectangle Grid.Column="2" Width="1" Margin="0 4 23 4" HorizontalAlignment="Right" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" />
      <Grid Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="0.905*" />
          <ColumnDefinition x:Name="columnDefinition" Width="23" />
        </Grid.ColumnDefinitions>
        <Border x:Name="PART_ButtonBorder" Margin="0 0 -1 0" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
        <Border x:Name="Submenu_Border" Grid.Column="1" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      </Grid>
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="9 5 3 3" VerticalAlignment="Top" FontWeight="Bold" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="CharacterEllipsis" d:LayoutOverrides="Width" />
      <TextBlock x:Name="textBlockDesc" Grid.Column="1" Width="Auto" Height="Auto" Margin="9 22 3 3" HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{TemplateBinding Description}" TextWrapping="Wrap" d:LayoutOverrides="Width" />
      <Rectangle x:Name="rectangle" Grid.ColumnSpan="1" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Visibility="Collapsed" />
      <Image x:Name="image" Width="32" Height="32" Margin="0 4 0 0" HorizontalAlignment="Center" VerticalAlignment="Top" SnapsToDevicePixels="True" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Stretch="Uniform" Visibility="Collapsed" />
      <Fluent:IconPresenter x:Name="iconImage" Margin="3 4 2 2" HorizontalAlignment="Center" VerticalAlignment="Top" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="7" Margin="1 0 9 0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid x:Name="DropDown" Margin="0" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
          <Border x:Name="DropDownBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Path Grid.RowSpan="2" Width="1" Height="Auto" Margin="24 0 0 0" HorizontalAlignment="Left" Data="M0,0L0,1" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}">
                  <StackPanel x:Name="PART_MenuPanel" MaxWidth="{Binding ActualWidth, ElementName=PART_ScrollViewer}" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" />
                </ScrollViewer>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Visibility" Value="Visible" />
        <Setter TargetName="Submenu_Border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsSubmenuOpen" Value="True">
        <Setter TargetName="Submenu_Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Fluent.Ribbon.Styles.ApplicationMenu.MenuItemSecondLevel" TargetType="{x:Type Fluent:MenuItem}">
    <Setter Property="Fluent:RibbonProperties.IconSize" Value="Large" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="ResizeMode" Value="None" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template" Value="{DynamicResource ApplicationMenuSecondLevelItemTemplate}" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Fluent:MenuItem.IsSplited" Value="True" />
          <Condition Property="HasItems" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Template" Value="{DynamicResource SplitedApplicationMenuSecondLevelItemTemplate}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Fluent:MenuItem.IsSplited" Value="False" />
          <Condition Property="HasItems" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Template" Value="{DynamicResource HeaderApplicationMenuSecondLevelItemTemplate}" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ApplicationMenuItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="44" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="44" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="9 3 3 3" VerticalAlignment="Center" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="CharacterEllipsis" d:LayoutOverrides="Width" />
      <TextBlock x:Name="textBlockDesc" Grid.Column="2" Width="Auto" Height="Auto" Margin="0 3 3 3" HorizontalAlignment="Right" VerticalAlignment="Center" Text="{TemplateBinding Description}" TextWrapping="NoWrap" d:LayoutOverrides="Width" />
      <Rectangle x:Name="rectangle" Grid.ColumnSpan="1" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Visibility="Collapsed" />
      <Image x:Name="image" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Stretch="Uniform" Visibility="Collapsed" />
      <Fluent:IconPresenter x:Name="iconImage" Margin="3 2 2 2" HorizontalAlignment="Center" VerticalAlignment="Top" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="HeaderApplicationMenuItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="44" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="44" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="9 3 3 3" VerticalAlignment="Center" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="CharacterEllipsis" d:LayoutOverrides="Width" />
      <Rectangle x:Name="rectangle" Grid.ColumnSpan="1" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Visibility="Collapsed" />
      <Image x:Name="image" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Stretch="Uniform" Visibility="Collapsed" />
      <Fluent:IconPresenter x:Name="iconImage" Margin="3 2 2 2" HorizontalAlignment="Center" VerticalAlignment="Top" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="7" Margin="1 0 9 0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Width="{Binding RightPaneWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ApplicationMenu}}}" Height="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}}" Margin="0 0 0 0" VerticalAlignment="Top" AllowsTransparency="True" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Custom" PlacementTarget="{Binding Converter={StaticResource ApplicationMenuRightScrollViewerExtractorConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ApplicationMenu}}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
          <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="4" />
          </Grid.RowDefinitions>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="4" />
          </Grid.ColumnDefinitions>
          <Rectangle Grid.Row="1" Grid.Column="1" Width="4" Height="4" Margin="-1 -1 0 0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.017,0.002" GradientOrigin="0.017,0.002" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="4" Margin="-1 3 0 0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.032,1.01" GradientOrigin="0.032,1.01" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="1" Grid.Column="0" Width="4" Height="4" Margin="3 -1 0 0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.996,0.027" GradientOrigin="0.996,0.027" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="1" Grid.Column="0" Width="Auto" Height="4" Margin="7 -1 1 0" HorizontalAlignment="Stretch" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </LinearGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="Auto" Margin="-1 7 0 1" HorizontalAlignment="Left" VerticalAlignment="Stretch" StrokeThickness="0">
            <Rectangle.Fill>
              <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </LinearGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Border x:Name="DropDownBorder" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="2,2,1,1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" HorizontalScrollBarVisibility="Disabled" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto">
                  <StackPanel x:Name="PART_MenuPanel" MaxWidth="{Binding ActualWidth, ElementName=PART_ScrollViewer}" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" />
                </ScrollViewer>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SplitedApplicationMenuItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="44" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="44" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Rectangle Grid.Column="2" Width="1" Margin="0 4 23 4" HorizontalAlignment="Right" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" />
      <Grid Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="0.905*" />
          <ColumnDefinition x:Name="columnDefinition" Width="23" />
        </Grid.ColumnDefinitions>
        <Border x:Name="PART_ButtonBorder" Margin="0 0 -1 0" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
        <Border x:Name="Submenu_Border" Grid.Column="1" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      </Grid>
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="9 3 3 3" VerticalAlignment="Center" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="CharacterEllipsis" d:LayoutOverrides="Width" />
      <Rectangle x:Name="rectangle" Grid.ColumnSpan="1" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Visibility="Collapsed" />
      <Image x:Name="image" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Stretch="Uniform" Visibility="Collapsed" />
      <Fluent:IconPresenter x:Name="iconImage" Margin="3 2 2 2" HorizontalAlignment="Center" VerticalAlignment="Top" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="7" Margin="1 0 9 0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Width="{Binding RightPaneWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ApplicationMenu}}}" Height="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}}" Margin="0 0 0 0" VerticalAlignment="Top" AllowsTransparency="True" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Custom" PlacementTarget="{Binding Converter={StaticResource ApplicationMenuRightScrollViewerExtractorConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ApplicationMenu}}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid x:Name="DropDown" Margin="0" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
          <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="4" />
          </Grid.RowDefinitions>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="4" />
          </Grid.ColumnDefinitions>
          <Rectangle Grid.Row="1" Grid.Column="1" Width="4" Height="4" Margin="-1 -1 0 0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.017,0.002" GradientOrigin="0.017,0.002" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="4" Margin="-1 3 0 0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.032,1.01" GradientOrigin="0.032,1.01" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="1" Grid.Column="0" Width="4" Height="4" Margin="3 -1 0 0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.996,0.027" GradientOrigin="0.996,0.027" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="1" Grid.Column="0" Width="Auto" Height="4" Margin="7 -1 1 0" HorizontalAlignment="Stretch" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </LinearGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="Auto" Margin="-1 7 0 1" HorizontalAlignment="Left" VerticalAlignment="Stretch" StrokeThickness="0">
            <Rectangle.Fill>
              <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Color="#3F000000" Offset="0" />
                <GradientStop Color="Transparent" Offset="1" />
              </LinearGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Border x:Name="DropDownBorder" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}">
                  <StackPanel x:Name="PART_MenuPanel" MaxWidth="{Binding ActualWidth, ElementName=PART_ScrollViewer}" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" />
                </ScrollViewer>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Visibility" Value="Visible" />
        <Setter TargetName="Submenu_Border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsSubmenuOpen" Value="True">
        <Setter TargetName="Submenu_Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Fluent.Ribbon.Styles.ApplicationMenu.MenuItem" TargetType="{x:Type Fluent:MenuItem}">
    <Setter Property="Fluent:RibbonProperties.IconSize" Value="Large" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="ResizeMode" Value="None" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template" Value="{DynamicResource ApplicationMenuItemTemplate}" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Fluent:MenuItem.IsSplited" Value="True" />
          <Condition Property="HasItems" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="ItemContainerStyleSelector" Value="{x:Static styleSelectors:SplitedApplicationMenuItemItemContainerStyleSelector.Instance}" />
        <Setter Property="Template" Value="{DynamicResource SplitedApplicationMenuItemTemplate}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Fluent:MenuItem.IsSplited" Value="False" />
          <Condition Property="HasItems" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="ItemContainerStyleSelector" Value="{x:Static styleSelectors:HeaderApplicationMenuItemItemContainerStyleSelector.Instance}" />
        <Setter Property="Template" Value="{DynamicResource HeaderApplicationMenuItemTemplate}" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ApplicationMenuButtonControlTemplate" TargetType="{x:Type Fluent:ApplicationMenu}">
    <Grid Margin="0">
      <ContentControl x:Name="buttonContent" Width="{Binding ActualWidth, ElementName=PART_ButtonBorder}" Height="{Binding ActualHeight, ElementName=PART_ButtonBorder}" Margin="0">
        <Border x:Name="PART_ButtonBorder" Height="23" MinWidth="60" Background="{TemplateBinding Background}">
          <ContentControl x:Name="contentPresenter" Margin="10 0 10 0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Header}" />
        </Border>
      </ContentControl>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Custom" PlacementTarget="{Binding ElementName=buttonContent}" VerticalOffset="{Binding ElementName=buttonContent, Path=ActualHeight}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
          <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Grid HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" MinHeight="17" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" MinWidth="100" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ScrollViewer Grid.Row="0" Grid.Column="0" IsTabStop="False" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Auto" Style="{DynamicResource MenuScrollViewer}">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Vertical" ScrollViewer.VerticalScrollBarVisibility="Auto" />
                </ScrollViewer>
                <Border Grid.Row="0" Grid.Column="1" Width="{TemplateBinding RightPaneWidth}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" BorderThickness="1 0 0 0">
                  <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" IsTabStop="False" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Auto" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}">
                    <ContentPresenter x:Name="PART_RightContentPresenter" ContentSource="RightPaneContent" />
                  </ScrollViewer>
                </Border>
                <Border Grid.Row="1" Grid.ColumnSpan="2" Margin="0" Background="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" BorderThickness="0 1 0 0">
                  <ContentPresenter ContentSource="FooterPaneContent" />
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_ButtonBorder" Property="Opacity" Value="0.5" />
        <Setter TargetName="contentPresenter" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type Fluent:ApplicationMenu}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" />
    <Setter Property="Header" Value="{converters:ObjectToImageConverter {DynamicResource Fluent.Ribbon.Images.ApplicationMenu}, '40,16', {Binding RelativeSource={RelativeSource Self}}}" />
    <Setter Property="ItemContainerStyleSelector" Value="{x:Static styleSelectors:ApplicationMenuItemContainerStyleSelector.Instance}" />
    <Setter Property="Template" Value="{DynamicResource ApplicationMenuButtonControlTemplate}" />
  </Style>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.RibbonTabControl.DisplayOptionsButton" TargetType="{x:Type Fluent:DropDownButton}">
    <Border x:Name="PART_ButtonBorder" Width="22" Height="22" HorizontalAlignment="Left" VerticalAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
      <Grid>
        <Fluent:IconPresenter x:Name="iconImage" Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <Popup x:Name="PART_Popup" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
          <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
            <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
              <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
                <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                  </Grid.RowDefinitions>
                  <ScrollViewer x:Name="PART_ScrollViewer" MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="1" HorizontalScrollBarVisibility="Hidden" IsTabStop="False" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}" VerticalScrollBarVisibility="Auto">
                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Local" />
                  </ScrollViewer>
                </Grid>
              </Grid>
            </Border>
          </Grid>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Fluent.Ribbon.Styles.RibbonTabControl.DisplayOptionsButton" TargetType="{x:Type Fluent:DropDownButton}">
    <Setter Property="CanAddToQuickAccessToolBar" Value="False" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Height" Value="22" />
    <Setter Property="ResizeMode" Value="None" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.RibbonTabControl.DisplayOptionsButton}" />
    <Setter Property="Width" Value="22" />
  </Style>
  <ControlTemplate x:Key="RibbonTabControlControlTemplate" TargetType="{x:Type Fluent:RibbonTabControl}">
    <ControlTemplate.Resources>
      <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="CanContentScroll" Value="True" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="PanningMode" Value="HorizontalOnly" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollViewer}">
              <Grid x:Name="Grid" Background="{TemplateBinding Background}" IsHitTestVisible="True">
                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" IsHitTestVisible="True" />
                <RepeatButton Width="13" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Stretch" Command="{x:Static ScrollBar.LineLeftCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
                  <RepeatButton.Visibility>
                    <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0" FallbackValue="Visibility.Collapsed">
                      <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                  </RepeatButton.Visibility>
                  <Path Width="3" Height="5" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 1,-1z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
                </RepeatButton>
                <RepeatButton Width="13" Height="Auto" HorizontalAlignment="Right" VerticalAlignment="Stretch" Command="{x:Static ScrollBar.LineRightCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
                  <RepeatButton.Visibility>
                    <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100" FallbackValue="Visibility.Collapsed">
                      <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                  </RepeatButton.Visibility>
                  <Path Width="3" Height="5" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M1,0L0,1 0,-1z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
                </RepeatButton>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
      </Style>
    </ControlTemplate.Resources>
    <Grid x:Name="ContentGrid" Height="Auto" VerticalAlignment="Top" Background="{TemplateBinding Background}" KeyboardNavigation.TabNavigation="Local">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition x:Name="rowDefinition" MinHeight="{TemplateBinding ContentHeight}" MaxHeight="{TemplateBinding ContentHeight}" />
        <RowDefinition x:Name="rowDefinition1" MinHeight="{TemplateBinding ContentGapHeight}" MaxHeight="{TemplateBinding ContentGapHeight}" />
      </Grid.RowDefinitions>
      <Border x:Name="border" Grid.Row="1" Width="Auto" Margin="0 -1 0 0" HorizontalAlignment="Stretch" BorderBrush="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="0 1" />
      <Border Grid.Row="1" Grid.RowSpan="1" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.BorderBrush}" BorderThickness="{DynamicResource Fluent.Ribbon.Values.RibbonTabControl.Content.BorderThickness}" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" TextElement.Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Foreground}">
        <ContentControl x:Name="mainContentControl" Margin="0" Focusable="False">
          <ContentPresenter x:Name="PART_SelectedContentPresenter" Margin="0" HorizontalAlignment="Stretch" ContentSource="SelectedContent" />
        </ContentControl>
      </Border>
      <Border Grid.Row="2" Margin="0" VerticalAlignment="Stretch" Background="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
      <Grid x:Name="TabsGrid" Grid.Row="0" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.TabsGrid.Background}" KeyboardNavigation.TabIndex="1" TextElement.Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.TabsGrid.Foreground}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Fluent:WindowSteeringHelperControl Grid.ColumnSpan="4" />
        <!-- Margin on bottom is need to keep the border surrounding the content area visible below the menu presenter -->
        <ContentPresenter Grid.Column="0" Margin="0 0 0 1" VerticalAlignment="Stretch" ContentSource="Menu" />
        <Fluent:RibbonScrollViewer Grid.Column="1" Width="Auto" Margin="0" HorizontalAlignment="Left" HorizontalScrollBarVisibility="Auto" IsHitTestVisible="True" IsTabStop="False" Style="{DynamicResource RibbonTabScrollViewer}" VerticalScrollBarVisibility="Disabled" Visibility="{Binding AreTabHeadersVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}">
          <Fluent:RibbonTabsContainer x:Name="PART_TabsContainer" Height="Auto" Margin="0" HorizontalAlignment="Stretch" IsItemsHost="True" KeyboardNavigation.TabIndex="1" />
        </Fluent:RibbonScrollViewer>
        <StackPanel Grid.Column="3" Margin="0 0 0 1" HorizontalAlignment="Right" Orientation="Horizontal">
          <StackPanel x:Name="PART_ToolbarPanel" Orientation="Horizontal" Visibility="{Binding IsToolBarVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
          <Fluent:DropDownButton x:Name="PART_DisplayOptionsButton" Width="22" Height="22" Margin="0" Icon="{DynamicResource Fluent.Ribbon.Images.RibbonDisplayOptions}" Size="Small" Style="{DynamicResource Fluent.Ribbon.Styles.RibbonTabControl.DisplayOptionsButton}" ToolTip="{DynamicResource Fluent.Ribbon.Resources.RibbonTabControl.DisplayOptionsScreenTip}">
            <Fluent:MenuItem FontWeight="Bold" Foreground="{DynamicResource BlackBrush}" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ShowRibbon, Mode=OneWay}" IsEnabled="False" Template="{DynamicResource Fluent.Ribbon.Templates.MenuItem.HeaderOnly}" Visibility="{Binding CanMinimize, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" Opacity="1" />
            <Fluent:MenuItem Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ExpandRibbon, Mode=OneWay}" IsCheckable="True" IsChecked="{Binding IsMinimized, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:StaticConverters.InverseBoolConverter}}" Visibility="{Binding CanMinimize, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
            <Fluent:MenuItem Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.MinimizeRibbon, Mode=OneWay}" IsCheckable="True" IsChecked="{Binding IsMinimized, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding CanMinimize, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
            <Separator x:Name="DisplayOptionsButtonMenuSeparator" Style="{x:Null}" Visibility="Collapsed" />
            <Fluent:MenuItem FontWeight="Bold" Foreground="{DynamicResource BlackBrush}" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.RibbonLayout, Mode=OneWay}" IsEnabled="False" Template="{DynamicResource Fluent.Ribbon.Templates.MenuItem.HeaderOnly}" Visibility="{Binding CanUseSimplified, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" Opacity="1" />
            <Fluent:MenuItem Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.UseClassicRibbon, Mode=OneWay}" IsCheckable="True" IsChecked="{Binding IsSimplified, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:StaticConverters.InverseBoolConverter}}" Visibility="{Binding CanUseSimplified, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
            <Fluent:MenuItem Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.UseSimplifiedRibbon, Mode=OneWay}" IsCheckable="True" IsChecked="{Binding IsSimplified, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding CanUseSimplified, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
          </Fluent:DropDownButton>
        </StackPanel>
      </Grid>
      <!-- Placement target must be the selected item. Otherwise things like DPI and monitor are selected wrong if the tabcontrol 0,0 is on a different screen than the selected tabs 0,0 -->
      <Popup x:Name="PART_Popup" AllowsTransparency="True" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Custom" PlacementTarget="{Binding Path=SelectedTabItem, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition Height="{x:Static Fluent:RibbonTabControl.AdditionalPopupSpaceForKeyTipsGridLength}" />
            <!-- Needed for overlapping Keytips -->
            <RowDefinition MinHeight="{TemplateBinding ContentHeight}" MaxHeight="{TemplateBinding ContentHeight}" />
            <RowDefinition Height="{x:Static Fluent:RibbonTabControl.AdditionalPopupSpaceForKeyTipsGridLength}" />
            <!-- Needed for overlapping Keytips -->
          </Grid.RowDefinitions>
          <Border Grid.Row="1" Margin="1 0" Background="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Background}" BorderBrush="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="0 0 0 1" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local" TextElement.Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Foreground}">
            <ContentControl x:Name="popupContentControl" Margin="0" Focusable="False" />
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMinimized" Value="True">
        <!-- Switch content to popup -->
        <Setter TargetName="mainContentControl" Property="Content" Value="{x:Null}" />
        <Setter TargetName="popupContentControl" Property="Content" Value="{Binding ElementName=PART_SelectedContentPresenter, Mode=OneWay}" />
        <Setter TargetName="rowDefinition" Property="MinHeight" Value="0" />
        <Setter TargetName="rowDefinition1" Property="MinHeight" Value="0" />
        <!-- Switch content to popup END -->
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="CanMinimize" Value="False" />
          <Condition Property="CanUseSimplified" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_DisplayOptionsButton" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="CanMinimize" Value="True" />
          <Condition Property="CanUseSimplified" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="DisplayOptionsButtonMenuSeparator" Property="Visibility" Value="Visible" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="RibbonGroupBoxControlTemplate" TargetType="{x:Type Fluent:RibbonGroupBox}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style BasedOn="{StaticResource GroupBoxSeparator}" TargetType="Separator" />
        <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid x:Name="grid2" HorizontalAlignment="Stretch">
      <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" />
      <Grid>
        <ContentControl x:Name="nonCollapsedStateBorder" Focusable="False">
          <Grid x:Name="PART_ParentPanel" Height="Auto" Margin="0 1 0 2">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Fluent:RibbonGroupBoxWrapPanel x:Name="PART_UpPanel" Width="Auto" Height="Auto" Margin="4 0 4 0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Stretch" IsItemsHost="True" />
            <Grid x:Name="PART_DownGrid" Grid.Row="1" Height="Auto" MaxWidth="{Binding ActualWidth, ElementName=PART_ParentPanel}" Margin="0 -2 2 2" VerticalAlignment="Bottom">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentControl x:Name="PART_HeaderContentControl" Margin="2 0" HorizontalAlignment="Stretch" VerticalAlignment="Center" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Header.Foreground}" KeyboardNavigation.IsTabStop="False" />
              <Fluent:Button x:Name="PART_DialogLauncherButton" Grid.Column="1" Width="15" Height="14" Margin="0 0 1 1" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Fluent:RibbonProperties.IconSize="Small" Background="Transparent" BorderBrush="Transparent" Command="{Binding LauncherCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding LauncherCommandParameter, RelativeSource={RelativeSource TemplatedParent}}" CommandTarget="{Binding LauncherCommandTarget, RelativeSource={RelativeSource TemplatedParent}}" Header="{TemplateBinding LauncherText}" Icon="{TemplateBinding LauncherIcon}" IsEnabled="{Binding IsLauncherEnabled, RelativeSource={RelativeSource TemplatedParent}}" Template="{DynamicResource DialogLauncherButtonControlTemplate}" ToolTip="{Binding LauncherToolTip, RelativeSource={RelativeSource TemplatedParent}}" Visibility="Visible" />
            </Grid>
          </Grid>
        </ContentControl>
        <Grid x:Name="collapsedStateGrid" Grid.RowSpan="2" Width="Auto" Height="Auto" Margin="0" Visibility="Collapsed">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
          </Grid.RowDefinitions>
          <Border Grid.Row="0" Margin="5 3 5 0" Padding="4" HorizontalAlignment="Center" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.BorderBrush}" BorderThickness="1">
            <Fluent:IconPresenter x:Name="iconImage" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
          <ContentControl x:Name="PART_CollapsedHeaderContentControl" Grid.Row="1" Margin="5 0 5 0" HorizontalAlignment="Center" VerticalAlignment="Top" Fluent:RibbonGroupBox.IsCollapsedHeaderContentPresenter="True" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Header.Foreground}" KeyboardNavigation.IsTabStop="False" Style="{DynamicResource Fluent.Ribbon.Styles.RibbonGroupBox.TwoLineHeaderContentControl}" />
          <Popup x:Name="PART_Popup" Width="Auto" Height="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}" AllowsTransparency="True" IsOpen="{TemplateBinding IsDropDownOpen}" PlacementTarget="{Binding ElementName=collapsedStateGrid, Mode=OneWay}">
            <Border x:Name="border" Height="Auto" Background="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}" BorderThickness="1" d:LayoutOverrides="Width">
              <ContentControl x:Name="popupContent" />
            </Border>
          </Popup>
        </Grid>
        <Rectangle x:Name="separator" Grid.RowSpan="2" Width="1" Height="Auto" Margin="0 4" HorizontalAlignment="Right" VerticalAlignment="Stretch" Fill="{DynamicResource Fluent.Ribbon.Brushes.GroupSeparator.Background}" Visibility="{Binding IsSeparatorVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
      </Grid>
      <Image x:Name="PART_SnappedImage" Stretch="Uniform" Visibility="Collapsed" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="State" Value="Collapsed">
        <Setter TargetName="collapsedStateGrid" Property="Visibility" Value="Visible" />
        <Setter TargetName="grid2" Property="HorizontalAlignment" Value="Left" />
        <Setter TargetName="nonCollapsedStateBorder" Property="Content" Value="{x:Null}" />
        <Setter TargetName="nonCollapsedStateBorder" Property="UIElement.Visibility" Value="Collapsed" />
        <Setter TargetName="popupContent" Property="Content" Value="{Binding ElementName=PART_ParentPanel}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="State" Value="Collapsed" />
          <Condition Property="IsMouseOver" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.MouseOver.Background}" />
      </MultiTrigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.DropDownOpen.Background}" />
      </Trigger>
      <Trigger Property="IsLauncherVisible" Value="False">
        <Setter TargetName="PART_DialogLauncherButton" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="LauncherToolTip" Value="{x:Null}">
        <Setter TargetName="PART_DialogLauncherButton" Property="ToolTip" Value="{Binding LauncherText, RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.RibbonGroupBox.Simplified" TargetType="{x:Type Fluent:RibbonGroupBox}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style BasedOn="{StaticResource GroupBoxSeparator}" TargetType="Separator" />
        <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid x:Name="grid2" HorizontalAlignment="Stretch">
      <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" />
      <Grid>
        <ContentControl x:Name="nonCollapsedStateBorder" Focusable="False">
          <Grid x:Name="PART_ParentPanel" Height="Auto" Margin="0 1 0 2">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <StackPanel x:Name="PART_UpPanel" Width="Auto" Height="Auto" Margin="4 0 4 0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Stretch" IsItemsHost="True" Orientation="Horizontal" />
            <Fluent:Button x:Name="PART_DialogLauncherButton" Grid.Column="1" Width="15" Height="14" Margin="-4 0 2 0" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Fluent:RibbonProperties.IconSize="Small" Background="Transparent" BorderBrush="Transparent" Command="{Binding LauncherCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding LauncherCommandParameter, RelativeSource={RelativeSource TemplatedParent}}" CommandTarget="{Binding LauncherCommandTarget, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" Header="{TemplateBinding LauncherText}" Icon="{TemplateBinding LauncherIcon}" IsEnabled="{Binding IsLauncherEnabled, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" Template="{DynamicResource DialogLauncherButtonControlTemplate}" ToolTip="{Binding LauncherToolTip, RelativeSource={RelativeSource TemplatedParent}}" Visibility="Visible" />
          </Grid>
        </ContentControl>
        <Grid x:Name="collapsedStateGrid" Grid.RowSpan="2" Width="Auto" Height="Auto" Margin="{TemplateBinding Padding}" Visibility="Collapsed">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <Grid x:Name="iconImageGrid" Grid.Column="0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False">
            <Fluent:IconPresenter x:Name="iconImage" IconSize="{Binding (Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Width="24" Height="24" Margin="0" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.BorderBrush}" BorderThickness="1" />
          </Grid>
          <ContentControl x:Name="PART_CollapsedHeaderContentControl" Grid.Column="1" Margin="2 0 0 0" HorizontalAlignment="Stretch" VerticalAlignment="Center" Fluent:RibbonGroupBox.IsCollapsedHeaderContentPresenter="True" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Header.Foreground}" KeyboardNavigation.IsTabStop="False" Style="{DynamicResource Fluent.Ribbon.Styles.RibbonGroupBox.TwoLineHeaderContentControl}" />
          <Popup x:Name="PART_Popup" Width="Auto" Height="Auto" AllowsTransparency="True" IsOpen="{TemplateBinding IsDropDownOpen}" PlacementTarget="{Binding ElementName=collapsedStateGrid, Mode=OneWay}">
            <Border x:Name="border" Height="Auto" Background="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}" BorderThickness="1" d:LayoutOverrides="Width">
              <ContentControl x:Name="popupContent" />
            </Border>
          </Popup>
        </Grid>
        <Rectangle x:Name="separator" Grid.RowSpan="2" Width="1" Height="Auto" Margin="0 4" HorizontalAlignment="Right" VerticalAlignment="Stretch" Fill="{DynamicResource Fluent.Ribbon.Brushes.GroupSeparator.Background}" Visibility="{Binding IsSeparatorVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
      </Grid>
      <Image x:Name="PART_SnappedImage" Stretch="Uniform" Visibility="Collapsed" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="State" Value="Collapsed">
        <Setter TargetName="PART_UpPanel" Property="Orientation" Value="Vertical" />
        <Setter TargetName="collapsedStateGrid" Property="Visibility" Value="Visible" />
        <Setter TargetName="grid2" Property="HorizontalAlignment" Value="Left" />
        <Setter TargetName="nonCollapsedStateBorder" Property="Content" Value="{x:Null}" />
        <Setter TargetName="nonCollapsedStateBorder" Property="UIElement.Visibility" Value="Collapsed" />
        <Setter TargetName="popupContent" Property="Content" Value="{Binding ElementName=PART_ParentPanel}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="State" Value="Collapsed" />
          <Condition Property="IsMouseOver" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.MouseOver.Background}" />
      </MultiTrigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.DropDownOpen.Background}" />
      </Trigger>
      <Trigger Property="IsLauncherVisible" Value="False">
        <Setter TargetName="PART_DialogLauncherButton" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="LauncherToolTip" Value="{x:Null}">
        <Setter TargetName="PART_DialogLauncherButton" Property="ToolTip" Value="{Binding LauncherText, RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="RibbonDropDownButtonControlTemplate" TargetType="{x:Type Fluent:DropDownButton}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
    </ControlTemplate.Resources>
    <Grid>
      <Border x:Name="PART_ButtonBorder" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
        <StackPanel x:Name="stackPanel" Width="Auto" Margin="{TemplateBinding Padding}" Orientation="Vertical">
          <Fluent:IconPresenter x:Name="iconImage" Margin="0 2 0 0" HorizontalAlignment="Center" VerticalAlignment="Center" IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
          <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2 0 2 2" HorizontalAlignment="Stretch" VerticalAlignment="Center" HasGlyph="{TemplateBinding HasTriangle}" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
        </StackPanel>
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
          <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" HorizontalScrollBarVisibility="Hidden" IsTabStop="False" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}" VerticalScrollBarVisibility="Auto">
                  <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Local" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0 1 0 0">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="-2 0 2 1" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="controlLabel" Property="Width" Value="10" />
        <Setter TargetName="iconImage" Property="Margin" Value="2 0 0 0" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="PART_ButtonBorder" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2 0 2 1" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="iconImage" Property="Margin" Value="2 0 2 0" />
        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.DropDownButton.Simplified" TargetType="{x:Type Fluent:DropDownButton}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
    </ControlTemplate.Resources>
    <Grid>
      <Border x:Name="PART_ButtonBorder" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
        <Grid x:Name="stackPanel" Width="Auto" Height="Auto" Margin="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <Grid x:Name="iconImageGrid" Grid.Column="0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Fluent:IconPresenter x:Name="iconImage" IconSize="{Binding (Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border x:Name="iconImageBorder" Width="{Binding ActualWidth, ElementName=iconImage}" Height="{Binding ActualHeight, ElementName=iconImage}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
          </Grid>
          <Fluent:TwoLineLabel x:Name="controlLabel" Grid.Column="1" Margin="2 0 0 0" HorizontalAlignment="Stretch" VerticalAlignment="Center" HasGlyph="False" HasTwoLines="False" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
          <Fluent:TwoLineLabel x:Name="controlLabel2" Grid.Column="2" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Center" HasGlyph="{TemplateBinding HasTriangle}" HasTwoLines="False" Text="" />
        </Grid>
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
          <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_ScrollViewer" MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="1" HorizontalScrollBarVisibility="Hidden" IsTabStop="False" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}" VerticalScrollBarVisibility="Auto">
                  <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Local" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0 1 0 0">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Small" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Middle" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Size" Value="Large" />
          <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="controlLabel" Property="Margin" Value="0" />
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="controlLabel" Property="Margin" Value="0" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
        <Setter TargetName="stackPanel" Property="Margin" Value="4 0 1 0" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="controlLabel" Property="Margin" Value="0" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="controlLabel2" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="RibbonSplitButtonControlTemplate" TargetType="{x:Type Fluent:SplitButton}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
    </ControlTemplate.Resources>
    <Grid>
      <Border Name="PART_ButtonBorder" VerticalAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
        <StackPanel Name="stackPanel" KeyboardNavigation.TabNavigation="Local" Orientation="Vertical">
          <Fluent:ToggleButton x:Name="PART_Button" Width="Auto" Height="Auto" Margin="0 0 0 0" CanAddToQuickAccessToolBar="{TemplateBinding CanAddButtonToQuickAccessToolBar}" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" CommandTarget="{TemplateBinding CommandTarget}" GroupName="{Binding GroupName, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Header="{TemplateBinding Header}" Icon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="{TemplateBinding IsDefinitive}" IsEnabled="{Binding IsButtonEnabled, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" Size="{TemplateBinding Size}" Style="{DynamicResource InnerButtonStyle}" ToolTip="{TemplateBinding ToolTip}" />
          <Border Name="downBorder" Margin="0" Background="Transparent" BorderBrush="Transparent" BorderThickness="0">
            <Grid>
              <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2 1 2 2" HorizontalAlignment="Center" VerticalAlignment="Center" HasGlyph="{TemplateBinding HasTriangle}" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
          </Border>
        </StackPanel>
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" IsEnabled="{TemplateBinding IsEnabled}" SnapsToDevicePixels="True">
          <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" HorizontalScrollBarVisibility="Hidden" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}" VerticalScrollBarVisibility="Auto">
                  <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Vertical" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0 1 0 0">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="controlLabel" Property="Margin" Value="0 -19 0 0" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
        <Setter TargetName="controlLabel" Property="Width" Value="10" />
        <Setter TargetName="downBorder" Property="Padding" Value="1 0 0 0" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="controlLabel" Property="Margin" Value="0 -19 0 0" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
        <Setter TargetName="controlLabel" Property="Width" Value="10" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
      </Trigger>
      <Trigger Property="IsButtonEnabled" Value="False">
        <Setter TargetName="PART_Button" Property="IsEnabled" Value="False" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_Button" Property="IsEnabled" Value="False" />
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Button" Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="downBorder" Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="downBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="downBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.Templates.SplitButton.Simplified" TargetType="{x:Type Fluent:SplitButton}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
    </ControlTemplate.Resources>
    <Grid>
      <Border Name="PART_ButtonBorder" VerticalAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
        <Grid Name="stackPanel" KeyboardNavigation.TabNavigation="Local">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <Fluent:ToggleButton x:Name="PART_Button" Grid.Column="0" Width="Auto" Height="Auto" Margin="0 0 0 0" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" CanAddToQuickAccessToolBar="{TemplateBinding CanAddButtonToQuickAccessToolBar}" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" CommandTarget="{TemplateBinding CommandTarget}" GroupName="{Binding GroupName, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Header="{TemplateBinding Header}" Icon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="{TemplateBinding IsDefinitive}" IsEnabled="{Binding IsButtonEnabled, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}" Size="{TemplateBinding Size}" Style="{DynamicResource InnerButtonStyle}" ToolTip="{TemplateBinding ToolTip}" />
          <Border x:Name="downBorder" Grid.Column="1" Margin="0" Padding="2 0" Background="Transparent" BorderBrush="Transparent" BorderThickness="0">
            <Grid>
              <Fluent:TwoLineLabel x:Name="controlLabel" Margin="1 0 2 0" HorizontalAlignment="Center" VerticalAlignment="Center" HasGlyph="{TemplateBinding HasTriangle}" HasTwoLines="False" Text="" />
            </Grid>
          </Border>
        </Grid>
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" IsEnabled="{TemplateBinding IsEnabled}" SnapsToDevicePixels="True">
          <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_ScrollViewer" MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="1" HorizontalScrollBarVisibility="Hidden" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}" VerticalScrollBarVisibility="Auto">
                  <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Vertical" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0 1 0 0">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="controlLabel" Property="Margin" Value="0 0 1 0" />
      </Trigger>
      <Trigger Property="IsButtonEnabled" Value="False">
        <Setter TargetName="PART_Button" Property="IsEnabled" Value="False" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_Button" Property="IsEnabled" Value="False" />
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Button" Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="downBorder" Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="downBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="downBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ToolbarDropDownButtonStyle" TargetType="{x:Type Fluent:DropDownButton}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Height" Value="22" />
    <Setter Property="Template" Value="{DynamicResource ToolbarDropDownButtonControlTemplate}" />
    <Setter Property="Width" Value="14" />
  </Style>
  <ControlTemplate x:Key="QuickAccessToolbarControlTemplate" TargetType="{x:Type Fluent:QuickAccessToolBar}">
    <DockPanel x:Name="PART_RootPanel" KeyboardNavigation.TabNavigation="Local">
      <ContentControl x:Name="menuContentControl" HorizontalAlignment="Right" DockPanel.Dock="Right" Focusable="False">
        <Fluent:DropDownButton x:Name="PART_MenuDownButton" HorizontalAlignment="Right" VerticalAlignment="Stretch" CanAddToQuickAccessToolBar="False" DockPanel.Dock="Right" Icon="{DynamicResource Fluent.Ribbon.Images.QuickAccessToolbarDropDown}" IsEnabled="{TemplateBinding IsEnabled}" KeyboardNavigation.TabIndex="3" Size="Small" Style="{DynamicResource ToolbarDropDownButtonStyle}" ToolTip="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarDropDownButtonTooltip, Mode=OneWay}" Visibility="{Binding IsMenuDropDownVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}">
          <Fluent:GroupSeparatorMenuItem Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMenuHeader, Mode=OneWay}" Style="{DynamicResource MenuGroupSeparatorStyle}" />
          <StackPanel x:Name="PART_MenuPanel" />
          <Separator x:Name="menuSeparator" Style="{DynamicResource MenuSeparatorStyle}" />
          <Fluent:MenuItem x:Name="PART_ShowBelow" CanAddToQuickAccessToolBar="False" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMenuShowBelow, Mode=OneWay}" />
          <Fluent:MenuItem x:Name="PART_ShowAbove" CanAddToQuickAccessToolBar="False" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMenuShowAbove, Mode=OneWay}" Visibility="Collapsed" />
        </Fluent:DropDownButton>
      </ContentControl>
      <Fluent:DropDownButton x:Name="PART_ToolbarDownButton" HorizontalAlignment="Right" VerticalAlignment="Stretch" Fluent:KeyTip.Keys="00" DockPanel.Dock="Right" Icon="{DynamicResource Fluent.Ribbon.Images.QuickAccessToolbarExtender}" IsEnabled="{TemplateBinding IsEnabled}" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" Size="Small" Style="{DynamicResource ToolbarDropDownButtonStyle}" ToolTip="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMoreControlsButtonTooltip, Mode=OneWay}" Visibility="Collapsed">
        <Fluent:DropDownButton.ContextMenu>
          <ContextMenu />
        </Fluent:DropDownButton.ContextMenu>
        <StackPanel Width="Auto" Height="26" Margin="-1" Background="{TemplateBinding Background}" Orientation="Horizontal">
          <StackPanel x:Name="PART_ToolBarOverflowPanel" Width="Auto" Height="Auto" Margin="1 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Center" Orientation="Horizontal" />
          <ContentControl x:Name="popupContentControl" Margin="1 0" Padding="0" HorizontalAlignment="Left" VerticalAlignment="Center" Background="{x:Null}" Focusable="False" />
        </StackPanel>
      </Fluent:DropDownButton>
      <StackPanel x:Name="PART_ToolBarPanel" Width="Auto" Height="Auto" VerticalAlignment="Stretch" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local" Orientation="Horizontal" />
    </DockPanel>
    <ControlTemplate.Triggers>
      <Trigger Property="CanQuickAccessLocationChanging" Value="False">
        <Setter TargetName="PART_ShowAbove" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ShowBelow" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="menuSeparator" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ShowAboveRibbon" Value="False">
        <Setter TargetName="PART_MenuDownButton" Property="Icon" Value="{DynamicResource Fluent.Ribbon.Images.QuickAccessToolbarDropDown.BelowRibbon}" />
        <Setter TargetName="PART_ShowAbove" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ShowBelow" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ToolbarDownButton" Property="Icon" Value="{DynamicResource Fluent.Ribbon.Images.QuickAccessToolbarExtender.BelowRibbon}" />
      </Trigger>
      <Trigger Property="HasOverflowItems" Value="True">
        <Setter TargetName="PART_ToolbarDownButton" Property="Visibility" Value="Visible" />
        <Setter TargetName="menuContentControl" Property="Content" Value="{x:Null}" />
        <Setter TargetName="popupContentControl" Property="Content" Value="{Binding ElementName=PART_MenuDownButton, Mode=OneWay}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="FluentPopupMenuControlTemplate" TargetType="{x:Type Fluent:ContextMenu}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
      <Style BasedOn="{StaticResource MenuGroupSeparatorStyle}" TargetType="{x:Type Fluent:GroupSeparatorMenuItem}" />
    </ControlTemplate.Resources>
    <Grid Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top">
      <Border HorizontalAlignment="Left" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
        <Grid Width="Auto" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top">
          <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}" VerticalScrollBarVisibility="Auto">
              <StackPanel x:Name="PART_ItemsHost" Width="Auto" Height="Auto" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" IsItemsHost="True" Orientation="Vertical" />
            </ScrollViewer>
            <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0 1 0 0">
              <Grid>
                <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
              </Grid>
            </Border>
          </Grid>
        </Grid>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="FlowDirection" Value="RightToLeft">
        <Setter TargetName="PART_ResizeBothThumb" Property="Cursor" Value="SizeNESW" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="PopupMenuControlTemplate" TargetType="{x:Type ContextMenu}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
      <Style BasedOn="{StaticResource MenuGroupSeparatorStyle}" TargetType="{x:Type Fluent:GroupSeparatorMenuItem}" />
    </ControlTemplate.Resources>
    <Grid Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top">
      <Border HorizontalAlignment="Left" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
        <Grid Width="Auto" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top">
          <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
          <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" ScrollViewer.VerticalScrollBarVisibility="Auto" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}">
              <StackPanel x:Name="PART_ItemsHost" Grid.RowSpan="1" Width="Auto" Height="Auto" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" IsItemsHost="True" />
            </ScrollViewer>
          </Grid>
        </Grid>
      </Border>
    </Grid>
  </ControlTemplate>
  <Style x:Key="StartScreenTabControlStyle" BasedOn="{StaticResource {x:Type Fluent:BackstageTabControl}}" TargetType="{x:Type Fluent:StartScreenTabControl}">
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:StartScreen}}, FallbackValue=Red}" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Template" Value="{DynamicResource StartScreenTabControlTemplate}" />
  </Style>
  <Style TargetType="{x:Type Fluent:StatusBarMenuItem}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="IsCheckable" Value="True" />
    <Setter Property="IsChecked" Value="{Binding StatusBarItem.IsChecked, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />
    <Setter Property="Template" Value="{DynamicResource RibbonStatusBarContextMenuItemControlTemplate}" />
  </Style>
  <Style x:Key="ZoomSliderStyle" TargetType="{x:Type Slider}">
    <Setter Property="Height" Value="16" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="LargeChange" Value="10" />
    <Setter Property="Maximum" Value="500" />
    <Setter Property="Minimum" Value="10" />
    <Setter Property="SmallChange" Value="1" />
    <Setter Property="Template" Value="{DynamicResource ZoomSliderControlTemplate}" />
    <Setter Property="Value" Value="100" />
    <Setter Property="Width" Value="133" />
  </Style>
  <Style BasedOn="{StaticResource StartScreenTabControlStyle}" TargetType="{x:Type Fluent:StartScreenTabControl}" />
  <Style x:Key="RibbonTabControlStyle" TargetType="{x:Type Fluent:RibbonTabControl}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Background}" />
    <Setter Property="CanMinimize" Value="{Binding CanMinimize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:Ribbon}}, Mode=TwoWay}" />
    <Setter Property="CanUseSimplified" Value="{Binding CanUseSimplified, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:Ribbon}}, Mode=TwoWay}" />
    <Setter Property="ContentGapHeight" Value="{Binding ContentGapHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Foreground}" />
    <Setter Property="IsMinimized" Value="{Binding IsMinimized, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:Ribbon}}, Mode=TwoWay}" />
    <Setter Property="IsSimplified" Value="{Binding IsSimplified, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:Ribbon}}, Mode=TwoWay}" />
    <Setter Property="Template" Value="{DynamicResource RibbonTabControlControlTemplate}" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="RibbonGroupBoxStyle" TargetType="{x:Type Fluent:RibbonGroupBox}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Fluent:KeyTip.Margin" Value="0,15,0,0" />
    <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="HeaderTemplateSelector" Value="{Binding Source={x:Static templateSelectors:RibbonGroupBoxHeaderTemplateSelector.Instance}}" />
    <Setter Property="Height" Value="Auto" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Template" Value="{DynamicResource RibbonGroupBoxControlTemplate}" />
    <Setter Property="Width" Value="Auto" />
    <Style.Triggers>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
        <Setter Property="Padding" Value="6 0" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.RibbonGroupBox.Simplified}" />
      </Trigger>
      <Trigger Property="State" Value="QuickAccess">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Height" Value="22" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="Template" Value="{DynamicResource RibbonGroupBoxDropDownButtonControlTemplate}" />
        <Setter Property="Width" Value="22" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RibbonDropDownButtonStyle" TargetType="{x:Type Fluent:DropDownButton}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel Orientation="Vertical" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="SnapsToDevicePixels" Value="False" />
    <Setter Property="Template" Value="{DynamicResource RibbonDropDownButtonControlTemplate}" />
    <Setter Property="Width" Value="Auto" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Large" />
        <Setter Property="Height" Value="68" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Width" Value="32" />
      </Trigger>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Padding" Value="6 2 2 2" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.DropDownButton.Simplified}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="Size" Value="Small" />
        </MultiTrigger.Conditions>
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RibbonSplitButtonStyle" TargetType="{x:Type Fluent:SplitButton}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Fluent:KeyTip.AutoPlacement" Value="False" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="SnapsToDevicePixels" Value="False" />
    <Setter Property="Template" Value="{DynamicResource RibbonSplitButtonControlTemplate}" />
    <Setter Property="Width" Value="Auto" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Bottom" />
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Large" />
        <Setter Property="Height" Value="68" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Right" />
        <Setter Property="Fluent:KeyTip.Margin" Value="0,0,-5,0" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
        <Setter Property="Height" Value="22" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Right" />
        <Setter Property="Fluent:KeyTip.Margin" Value="0,0,-5,0" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="32" />
      </Trigger>
      <Trigger Property="IsSimplified" Value="True">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Right" />
        <Setter Property="Fluent:KeyTip.Margin" Value="0,0,-5,0" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Padding" Value="6 2 2 2" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.SplitButton.Simplified}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSimplified" Value="True" />
          <Condition Property="Size" Value="Small" />
        </MultiTrigger.Conditions>
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="QuickAccessToolbarStyle" TargetType="{x:Type Fluent:QuickAccessToolBar}">
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType=Window}}" />
    <Setter Property="Template" Value="{DynamicResource QuickAccessToolbarControlTemplate}" />
  </Style>
  <Style x:Key="Fluent.Ribbon.Styles.ContextMenu" TargetType="{x:Type Fluent:ContextMenu}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="Template" Value="{DynamicResource FluentPopupMenuControlTemplate}" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="FluentRibbonDefaultContextMenuStyle" TargetType="{x:Type ContextMenu}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="Template" Value="{DynamicResource PopupMenuControlTemplate}" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style BasedOn="{StaticResource RibbonDropDownButtonStyle}" TargetType="{x:Type Fluent:DropDownButton}" />
  <Style BasedOn="{StaticResource RibbonSplitButtonStyle}" TargetType="{x:Type Fluent:SplitButton}" />
  <Style BasedOn="{StaticResource RibbonGroupBoxStyle}" TargetType="{x:Type Fluent:RibbonGroupBox}" />
  <Style BasedOn="{StaticResource Fluent.Ribbon.Styles.ContextMenu}" TargetType="{x:Type Fluent:ContextMenu}" />
  <Style BasedOn="{StaticResource RibbonTabControlStyle}" TargetType="{x:Type Fluent:RibbonTabControl}" />
  <Style BasedOn="{StaticResource QuickAccessToolbarStyle}" TargetType="{x:Type Fluent:QuickAccessToolBar}" />
</ResourceDictionary>