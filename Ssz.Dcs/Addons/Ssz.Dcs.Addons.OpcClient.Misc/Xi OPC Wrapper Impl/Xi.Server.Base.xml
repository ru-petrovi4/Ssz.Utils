<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xi.Server.Base</name>
    </assembly>
    <members>
        <member name="T:Xi.Server.Base.ValueRoot">
            <summary>
            This is the Root Class for all types of List Entries
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ValueRoot.#ctor(Xi.Server.Base.ListRoot,System.UInt32,System.UInt32)">
            <summary>
            Constructor that requires the owner list to be specified.
            </summary>
            <param name="ownerList">The List to which this entry belongs.</param>
            <param name="clientAlias"></param>
            <param name="serverAlias"></param>
        </member>
        <member name="F:Xi.Server.Base.ValueRoot._clientAlias">
            <summary>
            ClientAlias is in reference to the Xi client.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ValueRoot._serverAlias">
            <summary>
            ServerAlias is in referece to the Xi server.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ValueRoot._instanceId">
            <summary>
            Keep a copy of the ObjectId for local use
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ValueRoot._entryChanged">
            <summary>
            This flag being true indicates that this value has changed since the 
            last poll request or data change callback was issued.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ValueRoot._ownerListRoot">
            <summary>
            The Xi List to which this data entry belongs.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ValueRoot.ClientAlias">
            <summary>
            Property used to get or set the client alias for this data list entry.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ValueRoot.ServerAlias">
            <summary>
            Property used to get or set the server alias for this data list entry.
            DO NOT change the server alias unless the dictionary held by the owning 
            list is also updated with the new value!
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ValueRoot.InstanceId">
            <summary>
            The full object identification for this data entry.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ValueRoot.EntryQueued">
            <summary>
            Property used to set or clear the entry queued flag.
            <para>CAUTION! Setting this property to true has the side 
            effect of adding this data list entry to the queue 
            of changed Entry Root maintained by List Root.</para>
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ValueRoot.StatusCode">
            <summary>
            The Xi Status for this data value
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ValueRoot.ValueTransportTypeKey">
            <summary>
            This property is provides the data type used to transported the value.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ValueRoot.OwnerList">
            <summary>
            Property used to obtain the Xi List that owns this data entry.
            </summary>
        </member>
        <member name="T:Xi.Server.Base.EventsListBase">
            <summary>
            This is the base class from which an implementation of a Xi server 
            would subclass to provide access event and alarm data to a client.
            The functionality of the server may be such that a collection of 
            interesting alarms are kept by the server and may be obtained by the
            client application as desired.
            </summary>
        </member>
        <member name="T:Xi.Server.Base.EventListRoot">
            <summary>
            This class is the root or base class for lists that report events either current or historical.
            </summary>
        </member>
        <member name="T:Xi.Server.Base.ListRoot">
            <summary>
            This class is intended to be used as the root or base class for 
            all list types.  The attribute, properties and methods defined 
            in this class are common to all list types.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.#ctor(Xi.Server.Base.ContextBase{Xi.Server.Base.ListRoot},System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Xi.Contracts.Data.StandardMib)">
            <summary>
            This constructor is provides the construction of the List Root object.  
            Most of the values supplied to this constructor are declared as readonly 
            and cannot be changed once the list is constructed.
            </summary>
            <param name="context"></param>
            <param name="clientId"></param>
            <param name="updateRate"></param>
            <param name="listType"></param>
            <param name="listKey"></param>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.Finalize">
            <summary>
            The destructor clears out the references to Entry Root 
            objects that may still be attached to this list.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.Dispose">
            <summary>
            This is the IDisposable.Dispose implementation.  
            This method is used to invoke the Dispose method on 
            each of the Entry Root objects held by this list.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.Dispose(System.Boolean)">
            <summary>
            Subclasses should override this method to take care of 
            any needed cleanup as dispose takes place.
            </summary>
            <param name="isDisposing"></param>
            <returns></returns>
        </member>
        <member name="F:Xi.Server.Base.ListRoot._ListLock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ListRoot._queueOfChangedValues">
            <summary>
            This queue contains the values {always a subclass of Value Root}
            that have changed since the last poll request.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.NewUniqueServerAlias">
            <summary>
            This method is used to obtain a unique server alias for each List Entry.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Xi.Server.Base.ListRoot._rand">
            <summary>
            Instance of Random used to obtain the unique server alias for each List Entry,
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.FindEntryRoot(System.UInt32)">
            <summary>
            This method is used to obtain a reference to a List Entry given the server alias.
            </summary>
            <param name="serverAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.AddAValue(Xi.Server.Base.ValueRoot)">
            <summary>
            Use this method to add an Entry Root or subclass to this list.
            </summary>
            <param name="valueRoot"></param>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.RemoveAValue(Xi.Server.Base.ValueRoot)">
            <summary>
            Use this method to remove an Entry Root or subclass from this list.
            </summary>
            <param name="valueRoot"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.QueueChangedValue(Xi.Server.Base.ValueRoot)">
            <summary>
            This method is invoked from the Entry Root Entry Changed 
            property to add the changed entry to the queue of 
            changed entries for this list.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.NegotiateBufferingRate(Xi.Contracts.Data.StandardMib,System.UInt32)">
            <summary>
            This method calls the implementation override to set the buffering rate
            for the list.
            </summary>
            <returns>The negotiated buffering rate.</returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnNegotiateBufferingRate(System.UInt32)">
            <summary>
            This abstract method is overridden by implementations to set the buffering rate
            for the list
            </summary>
            <returns>The negotiated buffering rate.</returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnEnableListUpdating(System.Boolean)">
            <summary>
            Normally this method will be overridden in the implementation 
            subclass to perform any actions in changed the state of this 
            list and the specified data values to the requested updating state.
            </summary>
            <param name="enableUpdating"></param>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnEnableListElementUpdating(System.Boolean,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Normally this method will be overridden in the implementation 
            subclass to perform any actions in changed the state of this 
            list and the specified data values to the requested updating state.
            </summary>
            <param name="enableUpdating">
            Indicates, when TRUE, that updating of the list is to be enabled,
            and when FALSE, that updating of the list is to be disabled.
            </param>
            <param name="serverAliases">
            The list of aliases for data objects of a list for 
            which updating is to be enabled or disabled.
            When this value is null updating all elements of the list are to be 
            enabled/disabled. In this case, however, the enable/disable state 
            of the list itself is not changed.
            </param>
            <returns>
            <para>If the serverAliases parameter was null, returns 
            null if the server was able to successfully enable/disable 
            the list and all its elements.  If not, throws an exception 
            for event lists and for data lists, returns the client and server 
            aliases and result codes for the data objects that could not be 
            enabled/disabled.  </para> 
            <para>If the serverAliases parameter was not null, returns null 
            if the server was able to successfully enable/disable the data 
            objects identified by the serverAliases.  If not, returns the 
            client and server aliases and result codes for the data objects 
            that could not be enabled/disabled.</para> 
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnReadData(System.Collections.Generic.List{System.UInt32})">
            <summary>
            
            </summary>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnReadJournalDataForTimeInterval(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            
            </summary>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="numValuesPerAlias"></param>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnReadJournalDataNext(System.UInt32)">
            <summary>
            
            </summary>
            <param name="numEventMessages"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnReadJournalDataAtSpecificTimes(System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{System.UInt32})">
            <summary>
            
            </summary>
            <param name="timestamps"></param>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnReadJournalDataChanges(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            
            </summary>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="numValuesPerAlias"></param>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnReadJournalDataChangesNext(System.UInt32)">
            <summary>
            
            </summary>
            <param name="numEventMessages"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnReadCalculatedJournalData(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Xi.Contracts.Data.AliasAndCalculation})">
            <summary>
            
            </summary>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="calculationPeriod"></param>
            <param name="serverAliasesAndCalculations"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnReadJournalDataProperties(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
            
            </summary>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="serverAlias"></param>
            <param name="propertiesToRead"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnReadEvents(Xi.Contracts.Data.FilterSet)">
            <summary>
            
            </summary>
            <param name="filterSet"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnReadJournalEvents(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            
            </summary>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="numEventMessages"></param>
            <param name="filterSet"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnReadJournalEventsNext(System.UInt32)">
            <summary>
            
            </summary>
            <param name="numEventMessages"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnInformationReport(Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            This method is invoked to issue an Information Report 
            back to the Xi client for data changes.
            </summary>
            <param name="updatedValues"></param>
        </member>
        <member name="M:Xi.Server.Base.ListRoot.OnEventNotification(Xi.Contracts.Data.EventMessage[])">
            <summary>
            This method invokes an Enent Notification back to the Xi
            client when an event needs to be reported.
            </summary>
            <param name="eventList"></param>
        </member>
        <member name="P:Xi.Server.Base.ListRoot.OwnerContext">
            <summary>
            Each Xi List belongs to one context.  This property returns the 
            context to which this list belongs.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ListRoot.ServerId">
            <summary>
            Unique per Server List ID (context based).  Cannot change after assignment.
            ServerId is in referece to the Xi server.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ListRoot.ClientId">
            <summary>
            Unique per Client List ID (context based).  Cannot change after assignment.
            ClientId is in reference to the Xi client.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ListRoot.ListType">
            <summary>
            This is the List Type as defined in List Attributes.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ListRoot.Enabled">
            <summary>
            Only enabled lists may be actively used for read, write, poll and callbacks.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ListRoot.LastFetch">
            <summary>
            
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ListRoot.UpdateRate">
            <summary>
            Negotiated update rate for the list.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ListRoot.BufferingRate">
            <summary>
            Negotiated buffering rate for the list.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ListRoot.ListAttributes">
            <summary>
            Returns a copy of current List Attributes for this List
            Note: This property returns a copy of the List Attributes,
            as the List Attributes can not be changed by simply writing
            to the List Attributes class.  The List Attributes that can
            be changed have methods associated to make those changes.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ListRoot.PollingActivated">
            <summary>
            Use this property to determine if this list may be polled for data values.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ListRoot.CallbackActivated">
            <summary>
            Use this property to determine if this list is activily reporting data value changes
            </summary>
        </member>
        <member name="M:Xi.Server.Base.EventsListBase.OnAddEventMessageFields(System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
            This method is used to request that category-specific fields be 
            included in event messages generated for alarms and events of 
            the category for this Event/Alarm List.
            </summary>
            <param name="categoryId">
            The category for which event message fields are being added.
            </param>
            <param name="fieldObjectTypeIds">
            The list of category-specific fields to be included in the event 
            messages generated for alarms and events of the category.  Each field 
            is identified by its ObjectType LocalId obtained from the EventMessageFields 
            contained in the EventCategoryConfigurations Standard MIB element.
            </param>
            <returns>
            The client alias and result codes for the fields that could not be  
            added to the event message. Returns null if all succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.EventsListBase.OnPollEventChanges(Xi.Contracts.Data.FilterSet)">
            <summary>
            
            </summary>
            <param name="filterSet"></param>
            <returns></returns>
        </member>
        <member name="T:Xi.Server.Base.ContextBase`1">
            <summary>
            This partial class defines the methods to be overridden by the server implementation 
            to support the Endpoint Management methods of the IResourceManagement interface.
            </summary>
            <summary>
            This partial class defines the methods to be overridden by the server implementation 
            to support the Context Management methods of the IResourceManagement interface.
            </summary>
            <summary>
            This partial class defines the methods to be overridden by the server implementation 
            to support the Alarms and Events methods of the IResourceManagement interface.
            </summary>
            <summary>
            This partial class defines the methods to be overridden by the server implementation 
            to support the methods of the IWrite interface.
            </summary>
            <summary>
            This partial class defines the methods that support the methods 
            of the IPoll interface.
            </summary>
            <summary>
            This class is intended to be used as the base class for the server-side context of a client
            connection.  An instance of this class is instantiated for each client context established 
            by IResourceManagement.Initiate(...). <see cref="!:ResourceManagement.Initiate"/>
            </summary>
            <typeparam name="TList">
            The concrete type used for the Xi Lists managed by this Context.  
            This is commonly specified as "ListRoot" as a context will generally 
            manage lists of multiple types.
            </typeparam>
            <summary>
            This partial class defines the methods to be overridden by the server implementation 
            to support the List Management methods of the IResourceManagement interface.
            </summary>
            <summary>
            This partial class defines the methods to be overridden by the server implementation 
            to support the Discovery Methods of the IResourceManagement interface.
            </summary>
            <summary>
            This partial class defines the methods to be overridden by the server implementation 
            to support the methods of the IRead interface.
            </summary>
            <summary>
            This partial class defines the methods that support the methods 
            of the ICallback interface.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnOpenEndpoint(System.String,System.String)">
            <summary>
            This method may be overridden by the context implementation in the 
            Server Implementation project.
            <para>default implementation may be sufficient for some server implemenations.</para>
            </summary>
            <param name="endpointInterfaceType">
            The type of the endpoint as specified by the interface that 
            it supports.  Standard values are defined by the EndpointInterfaceType 
            class, with the exception that IResourceManagement and 
            IServerDiscovery cannot be created.
            </param>
            <param name="bindingName">
            <para>The type of the binding (WSHttpBinding, NetTcpBinding, etc.) 
            as defined in the config.app file.  For standard bindings,
            this is the endpoint binding attribute:</para>
            <para>  endpoint binding="wsHttpBinding"  </para>
            <para>For custom bindings, this is the name attribute of the binding 
            element of the custom binding:</para>
            <para>  binding name="binaryHttpBinding"</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnValidateOpenEndpointSecurity(Xi.Server.Base.EndpointEntry{`0})">
            <summary>
            This method is called prior to calling OnOpenEndpoint to validate security for the 
            endpoint to be opened.  If any problems are found, an XiFault should be thrown to 
            communicate them to the client.
            <param name="endpointEntry">
            The endpoint to be validated.
            </param>
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnAddListToEndpoint(System.String,System.UInt32)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            <para>default implementation may be sufficient for some server implemenations.</para>
            </summary>
            <param name="endpointId">
            The Xi Server generated Endpoint LocalId
            </param>
            <param name="serverListId">
            The identifiers of the lists to add to the endpoint.
            </param>
            <returns>
            The list identifiers and result codes for the lists whose 
            add failed. Returns null if all adds succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnRemoveListsFromEndpoint(System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            <para>default implementation may be sufficient for some server implemenations.</para>
            </summary>
            <param name="endpointId">
            The Xi Server generated Endpoint LocalId of the endpoint from which the list is to be removed.
            </param>
            <param name="listIds">
            The identifiers of the lists to remove from the endpoint.
            </param>
            <returns>
            The list identifiers and result codes for the lists whose 
            removal failed. Returns null if all removals succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnCloseEndpoint(System.String)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            <para>default implementation may be sufficient for some server implemenations.</para>
            </summary>
            <param name="endpointId">
            A string value the uniquely identified the endpoint (may be a GUID) to be deleted.
            </param>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnReInitiate(System.UInt32@,System.String@)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="contextOptions"></param>
            <param name="reInitiateKey"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnConclude">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnClientKeepAlive">
            <summary>
            This method should be invoked when no other request using a Context LocalId 
            has been invoked to keep this context from timing out.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnGetAlarmSummary(Xi.Contracts.Data.InstanceId)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="eventSourceId">
            The InstanceId for the event source for which alarm summaries are 
            being requested.
            </param>
            <returns>
            The summaries of the alarms that can be generated by the specified 
            event source.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnWriteValues(System.UInt32,Xi.Contracts.Data.WriteValueArrays)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier of the list that contains data objects to be read.
            </param>
            <param name="writeValueList">
            The server aliases and values of the data objects to write.
            </param>
            <returns>
            The list server aliases and result codes for the data objects whose 
            write failed. Returns null if all writes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnWriteVST(System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            This method is used to allow an Xi client to write the value along with a 
            corresponding time stamp and status.
            </summary>
            <param name="listId"></param>
            <param name="readValueArrays"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnWriteJournalData(System.UInt32,Xi.Contracts.Data.ModificationType,Xi.Contracts.Data.WriteJournalValues[])">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier of the list that contains the data objects 
            to be written.
            </param>
            <param name="modificationType">
            Indicates the type of modification to perform.  
            </param>
            <param name="valuesToWrite">
            The list of historical values to write.  Each is identified 
            by its list id, its server alias, and its timestamp.
            </param>
            <returns>
            The list of identifiers and error codes for each data object 
            whose write failed. Returns null if all writes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnWriteJournalEvents(System.UInt32,Xi.Contracts.Data.ModificationType,Xi.Contracts.Data.EventMessage[])">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier of the list that contains the alarms and/or 
            events to be written.
            </param>
            <param name="modificationType">
            Indicates the type of modification to perform.  
            </param>
            <param name="eventsToWrite">
            The list of historical alarms and/or events to write.  Each 
            is identified by its EventId contained in the EventMessage.
            </param>
            <returns>
            The list server aliases and result codes for the alarms and/or 
            events whose write failed. Returns null if all writes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnAcknowledgeAlarms(System.UInt32,System.String,System.String,System.Collections.Generic.List{Xi.Contracts.Data.EventId})">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier for the list that contains the alarms to be 
            acknowledged.
            </param>
            <param name="operatorName">
            The name or other identifier of the operator who is acknowledging 
            the alarm.
            </param>
            <param name="comment">
            An optional comment submitted by the operator to accompany the 
            acknowledgement.
            </param>
            <param name="alarmsToAck">
            The list of alarms to acknowledge.
            </param>
            <returns>
            The list EventIds and result codes for the alarms whose 
            acknowledgement failed. Returns null if all acknowledgements 
            succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnPassthrough(System.String,System.Int32,System.String,System.Byte[])">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="recipientId">
            The recipient identifier. The list of recipients is contained in 
            the RecipientPassthroughs MIB element.   
            </param>
            <param name="invokeId">
            A client-defined integer identifier for this invocation of the passthrough.  When
            used with asynchronous passthroughs, the server returns the invokeId with the response.  
            </param>
            <param name="passthroughName">
            The name of the passthrough message. The list of passthroughs for a recipient 
            is contained in the RecipientPassthroughs MIB element.   
            </param>
            <param name="DataToSend">
            The Data To Send is just an array of bytes.  No interpretation of the data 
            is made by the Xi server.  This byte array is forwarded unaltered to the 
            underlying system.  It is up to the client application to format this byte 
            array in a valid format for the underlying system.
            </param>
            <returns>
            The Passthrough Result simply returns a Result value and a byte array as 
            returned from the underlying system.  Again it is up to the client 
            application to interpret this byte array.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnPollDataChanges(System.UInt32)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier for the list whose changes are to be returned 
            (reported).
            </param>
            <returns>
            The list of changed values.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnPollEventChanges(System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier for the list whose changes are to be returned 
            (reported).
            </param>
            <param name="filterSet">
            Optional set of filters to further refine the selection from 
            the alarms and events in the list. The event list itself is 
            created using a filter.
            </param>
            <returns>
            The list of new alarm/event messages, changes to alarm messages 
            that are already in the list, and deletions of alarm messages 
            from the list.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnPollPassthroughResponses">
            <summary>
            This method is to be overridden by the implementation class.
            </summary>
            <returns>
            The results of executing the passthroughs. Each result in the list consists of the 
            result code, the invokeId supplied in the request, and a byte array.  It is up to the 
            client application to interpret this byte array.  
            </returns>
        </member>
        <member name="F:Xi.Server.Base.ContextBase`1.ContextLock">
            <summary>
            This object provides the general lock used to control access to an instance of a context.
            Each method that may change the state of this context instance should obtain this lock on entry.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.Finalize">
            <summary>
            "finalizer" This method is invoked by the garbage collector when all 
            reference to this instance have been removed.  This method then takes 
            care of any cleanup needed by this instance.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.Dispose">
            <summary>
            Invoke the dispose method to clean up this context instance.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.Dispose(System.Boolean)">
            <summary>
            Subclasses are allowed to overload this method to take care of any cleanup 
            needed by the subclass.  The subclass should also invoke this method to 
            take care of cleaning up this base class.
            </summary>
            <param name="isDisposing"></param>
            <returns></returns>
        </member>
        <member name="F:Xi.Server.Base.ContextBase`1._hasBeenDisposed">
            <summary>
            This flag may (should) be checked to insure that this 
            context instance is still valid.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ContextBase`1._XiLists">
            <summary>
            The collection of lists for this context.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ContextBase`1._XiEndpoints">
            <summary>
            The collection of Endpoints for this context.
            The key for this dictionary is the Endpoint LocalId a GUID created by the Xi Server.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.NewUniqueListId">
            <summary>
            This method is used to obtain a unique list identification (server alias) for a Xi List instance.
            Note: "ContextLock" should be locked prior to invoking this method and remain locked until the 
            Xi List has been added to this Xi Context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.ValidateLocalId(System.UInt32)">
            <summary>
            This method is used to validate the selected LocalId.  
            It will default to 0x409 (US English) if not in the 
            supported list.  This method may be overridden if 
            an alternative validation is desired.
            </summary>
            <param name="localId"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.SetSupportedLocals(System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method is used to set the list of valid or supported 
            LocalId’s for the server.  This list is then used in the 
            validation of the LocalId.
            </summary>
            <param name="localIds"></param>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.ValidateTimeout(System.TimeSpan)">
            <summary>
            The implementation class may override this method to 
            validate an acceptable timeout for the server instance.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.CheckTimeout(System.DateTime)">
            <summary>
            This method is invoked to determine if this context 
            instance has timed out.  And thus should be disposed.
            </summary>
            <param name="timeNow"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnInitiate(System.Collections.Generic.List{Xi.Contracts.Data.EndpointDefinition})">
            <summary>
            Invoke this method to set the valid endpoint for this context.
            </summary>
            <param name="listEndpointDefinitions"></param>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.ValidateSecurity(System.ServiceModel.OperationContext)">
            <summary>
            This validates the security credentials of the user each time the
            context is retrieved.  It should ensure the Paged credentials match
            the current transport security credentials.
            </summary>
            <param name="ctx">WCF operation context currently active</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnDefineList(System.UInt32,System.UInt32,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="clientId">
            The Client LocalId for this list.  Used in callbacks to allow the 
            client to identify this list.
            </param>
            <param name="listType">
            Indicates the type of list to be created.
            Standard list types as defined by the ListAttributes class 
            are: 
            1) Data List, 
            2) History Data List, 
            3) Event List 
            4) History Event List
            </param>
            <param name="updateRate">
            The requested update rate in milliseconds for the list. The  
            update rate indicates how often the server updates the 
            values of elements in the list.  A value of 0 indicates 
            that updating is exception-based. The server may negotiate 
            this value, up or down as necessary to support its efficient 
            operation.
            </param>
            <param name="bufferingRate">
            <para>An optional-use parameter that indicates that the server is 
            to buffer data updates, rather than overwriting them, until either 
            the time span defined by the buffering rate expires or the values 
            are transmitted to the client in a callback or poll response. If 
            the time span expires, then the oldest value for a data object is 
            discarded when a new value is received from the underlying system.</para>
            <para>The value of the bufferingRate is set to TimeSpan.Zero to indicate 
            that it is not to be used and that new values overwrite (replace) existing 
            cached values.  </para>
            <para>When used, this parameter contains the client-requested buffering 
            rate, which the server may negotiate up or down, or to TimeSpan.Zero if the 
            server does not support the buffering rate. </para>
            <para>The FeaturesSupported member of the StandardMib is used to indicate 
            server support for the buffering rate.</para>
            </param>
            <param name="filterSet">
            The set of filters to use to select elements of the list.  
            </param>
            <returns>
            The attributes created for the list.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.AddXiList(`0)">
            <summary>
            This method is invoked to add a list to the specified context in the 
            server implementation
            </summary>
            <param name="xiList">The Xi List to add to the context.</param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnGetListAttributes(System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listIds">
            The identifiers for the lists whose attributes are to be 
            retrieved.
            </param>
            <returns>
            The list of requested List Attributes. The size and order 
            of this list matches the size and order of the listAliases 
            parameter.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnRenewAliases(System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.AliasUpdate})">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier for the list whose aliases are to be updated.
            </param>
            <param name="newAliases">
            The list of current and new alias values.
            </param>
            <returns>
            The list of updated aliases. The size and order of this list matches 
            the size and order of the listAliases parameter.  Each AliasResult in 
            the list contains the new client alias from the request and its 
            corresponding new server alias assigned by the server.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnDeleteLists(System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listIds">
            The identifiers for the lists to be deleted.
            </param>
            <returns>
            The list identifiers and result codes for the lists whose 
            deletion failed. Returns null if all deletes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.RemoveAList(`0)">
            <summary>
            
            </summary>
            <param name="xiList"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnAddDataObjectsToList(System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.ListInstanceId})">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier for the list to which data objects are to be 
            added.
            </param>
            <param name="dataObjectsToAdd">
            The data objects to add.
            </param>
            <returns>
            The list of results. The size and order of this list matches 
            the size and order of the objectsToAdd parameter.   
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnRemoveDataObjectsFromList(System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier for the list from which data objects are 
            to be removed.
            </param>
            <param name="serverAliasesToDelete">
            The server aliases of the data objects to remove.
            </param>
            <returns>
            The list identifiers and result codes for data objects whose 
            removal failed. Returns null if all removals succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnModifyListAttributes(System.UInt32,System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier for the list for which the filters are to be changed.
            </param>
            <param name="updateRate">
            If not null a new list update rate.
            </param>
            <param name="filterSet">
            The new set of filters.
            </param>
            <returns>
            The filters and result codes for the filters that could  
            not be set for the list. Returns null if all filters 
            were set successfully.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnEnableListUpdating(System.UInt32,System.Boolean)">
             <summary>
             This method is to be overridden by the context implementation in the 
             Server Implementation project.
             </summary>
             <param name="listId">
             The identifier for the list for which updating is to be 
             enabled or disabled.
            </param>
             <param name="enableUpdating">
             Indicates, when TRUE, that updating of the list is to be enabled,
             and when FALSE, that updating of the list is to be disabled.
             </param>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnEnableListElementUpdating(System.UInt32,System.Boolean,System.Collections.Generic.List{System.UInt32})">
             <summary>
             This method is to be overridden by the context implementation in the 
             Server Implementation project.
             </summary>
             <param name="listId">
             The identifier for the list for which updating is to be 
             enabled or disabled.
            </param>
             <param name="enableUpdating">
             Indicates, when TRUE, that updating of the list is to be enabled,
             and when FALSE, that updating of the list is to be disabled.
             </param>
             <param name="serverAliases">
             The list of aliases for data objects of a list for 
             which updating is to be enabled or disabled.
             When this value is null updating all elements of the list are to be 
             enabled/disabled. In this case, however, the enable/disable state 
             of the list itself is not changed.
             </param>
             <returns>
             <para>If the serverAliases parameter was null, returns 
             null if the server was able to successfully enable/disable 
             the list and all its elements.  If not, throws an exception 
             for event lists and for data lists, returns the client and server 
             aliases and result codes for the data objects that could not be 
             enabled/disabled.  </para> 
             <para>If the serverAliases parameter was not null, returns null 
             if the server was able to successfully enable/disable the data 
             objects identified by the serverAliases.  If not, returns the 
             client and server aliases and result codes for the data objects 
             that could not be enabled/disabled.</para> 
             </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnAddEventMessageFields(System.UInt32,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
             <summary>
             This method is to be overridden by the context implementation in the 
             Server Implementation project.
             </summary>
             <param name="listId">
             The identifier for the list for which event message fields are being added. 
            </param>
             <param name="categoryId">
             The category for which event message fields are being added.
             </param>
             <param name="fieldObjectTypeIds">
             The list of category-specific fields to be included in the event 
             messages generated for alarms and events of the category.  Each field 
             is identified by its ObjectType LocalId obtained from the EventMessageFields 
             contained in the EventCategoryConfigurations Standard MIB element.
             </param>
             <returns>
             The ObjectTypeIds and result codes for the fields that could not be  
             added to the event message. Returns null if all succeeded.  
             </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnTouchDataObjects(System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier for the lists whose data objects are to be touched.
            </param>
            <param name="serverAliases">
            The aliases for the data objects to touch.
            </param>
            <returns>
            The list of aliases whose touch failed and the result code that 
            indicates why it failed.  Null if all succeeded.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnTouchList(System.UInt32)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier for the list whose data objects are to be touched.
            </param>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnStatus">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <returns>
            The status of the Xi server and the status of wrapped servers. 
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnLookupResultCodes(System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="resultCodes">
            The result codes for which text descriptions are being requested.
            </param>
            <returns>
            The list of result codes and if a result code indicates success, 
            the requested text descriptions. The size and order of this 
            list matches the size and order of the resultCodes parameter.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnFindObjects(Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="findCriteria">
            The criteria used by the server to find objects.  If this 
            parameter is null, then this call is a continuation of the 
            previous find.
            </param>
            <param name="numberToReturn">
            The maximum number of objects  to return in a single response.
            </param>
            <returns>
            <para>The list of object attributes for the objects that met 
            the filter criteria. </para>  
            <para>Returns an empty list if the starting object is a leaf, or 
            no objects were found that meet the filter criteria, or if the call 
            was made with a null findCriteria and there are no more objects to 
            return.</para>
            <para>May also return null if there is nothing (left) to return.</para>
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnFindTypes(Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="findCriteria">
            The criteria used by the server to find types.  If this 
            parameter is null, then this call is a continuation of the 
            previous find.
            </param>
            <param name="numberToReturn">
            The maximum number of objects to return in a single response.
            </param>
            <returns>
            <para>The list of type attributes for the type that met 
            the filter criteria. </para>  
            <para>Returns null if the starting type is a leaf, or no types 
            were found that meet the filter criteria, or if the call was made 
            with a null findCriteria and there are no more types to return.</para>
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnFindRootPaths(Xi.Contracts.Data.ObjectPath)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="objectPath">
            The root path that identifies the object for which alternate 
            root paths are being requested. 
            </param>
            <returns>
            The list of additional root paths to the specified object.  
            Null if specified objectPath is the only root path to the 
            object. An exception is thrown if the specified objectPath is 
            invalid.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnGetStandardMib">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <returns>
            The standard MIB is returned.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnGetVendorMib(System.Collections.Generic.List{Xi.Contracts.Data.InstanceId})">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="vendorMibInstanceIds">
            The list of identifiers for the vendor MIB objects to be returned.
            </param>
            <returns>
            The requested vendor-specific MIB objects.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnReadData(System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier of the list that contains data objects to be read.
            </param>
            <param name="serverAliases">
            The server aliases of the data objects to read.
            </param>
            <returns>
            The list of requested values. The size and order of this list 
            matches the size and order of serverAliases parameter.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnReadJournalDataForTimeInterval(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the historical values that fall between 
            a start and end time for one or more data objects within a specific data 
            journal list.</para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="listId">
            The identifier of the list that contains data objects whose 
            historical values are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive beginning (of returned list) 
            timestamp for values to be returned.  Valid operands include the 
            Timestamp and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive ending (of returned list)
            timestamp for values to be returned.  Valid operands include the 
            Timestamp and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.
            </param>
            <param name="numValuesPerAlias">
            The maximum number of data sample value to be returned.
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read.  
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnReadJournalDataChanges(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            
            </summary>
            <param name="listId"></param>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnReadCalculatedJournalData(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Xi.Contracts.Data.AliasAndCalculation})">
            <summary>
            
            </summary>
            <param name="listId"></param>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="calculationPeriod"></param>
            <param name="serverAliasesAndCalculations"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnReadJournalDataProperties(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
            
            </summary>
            <param name="listId"></param>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="serverAlias"></param>
            <param name="propertiesToRead"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnReadEvents(System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is to be overridden by the context implementation 
            in the Server Implementation project.
            </summary>
            <param name="listId">
            The identifier of the list that contains alarms and events 
            to be read.
            </param>
            <param name="filterSet">
            The set of filters used to select alarms and events to be read.
            </param>
            <returns>
            The list of selected alarms and events.
            Null if no alarms or events were selected.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnReadJournalEvents(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier of the list that contains historical alarms and 
            events that are to be read.
            </param>
            <param name="firstTimeStamp">
            TODO! Need to reword this!
            The timestamps to be used to access historical alarms and events.  
            By default, this list contains the starting and ending timestamps 
            as defined by the MMS ReadJournal method.  However, the filter 
            criterion can be used to override this default behavior, such that 
            the list of timestamps could be used to specify specific timestamps 
            for which historical alarms and events are being requested.
            </param>
            <param name="secondTimeStamp">
            TODO!
            </param>
            <param name="numEventMessages">
            TODO!
            </param>
            <param name="filterSet">
            The set of filters used to select historical alarms and events 
            to be read.
            </param>
            <returns>
            The list of selected historical alarms and events.
            Or null if no alarms or events were selected.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnReadJournalEventsNext(System.UInt32,System.UInt32)">
            <summary>
            This method is to be overridden by the context implementation in the 
            Server Implementation project.
            </summary>
            <param name="listId">
            The identifier of the list that contains historical alarms and 
            events that are to be read.
            </param>
            <param name="numEventMessages">
            The maximum number of EventMessages to return.
            </param>
            <returns>
            The list of selected historical alarms and events.
            Null if no alarms or events were selected.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnInformationReport(System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            This method invokes an Information Report back to the Xi client for data changes.
            </summary>
            <param name="listId"></param>
            <param name="updatedValues"></param>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnEventNotification(System.UInt32,Xi.Contracts.Data.EventMessage[])">
            <summary>
            This method invokes an Event Notification back to the Xi client when an event needs to be reported.
            </summary>
            <param name="listId"></param>
            <param name="eventList"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Xi.Server.Base.ContextBase`1.OnSetCallback(Xi.Contracts.ICallback,System.UInt32,System.TimeSpan)" -->
        <member name="M:Xi.Server.Base.ContextBase`1.OnNegotiateCallbackParams(System.UInt32,System.TimeSpan)">
            <summary>
            This method is implemented by the implementation class to negotitate the 
            keep-alive skip count and the callback rate.
            </summary>
            <param name="keepAliveSkipCount">
            The number of consecutive UpdateRate cycles that occur with nothing to send before 
            an empty callback is sent to indicate a keep-alive message. For example, if the value 
            of this parameter is 1, then a keep-alive callback will be sent each UpdateRate cycle 
            for which there is nothing to send. A value of 0 indicates that keep-alives are not 
            to be sent.
            </param>
            <returns>
            The results of the operation, including the negotiated keep-alive skip count and callback rate.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ContextBase`1.OnClearCallback">
            <summary>
            Invoke this method to stop callbacks by letting the callback interface go.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xi.Server.Base.ContextBase`1.Id">
            <summary>
            Context identifier (must be unique).
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ContextBase`1.ReInitiateKey">
            <summary>
            The key to be used when re-initiating the context.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ContextBase`1.TransportSessionId">
            <summary>
            Transport session identifier (may be null or not present).
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ContextBase`1.ApplicationName">
            <summary>
            Application name handed to server when context was created.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ContextBase`1.WorkstationName">
            <summary>
            Workstation name handed to server when context was created.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ContextBase`1.Identity">
            <summary>
            User identity (may be null).
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ContextBase`1.LocaleId">
            <summary>
            User's locale, negotiated when context was created, zero for default.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ContextBase`1.ContextTimeout">
            <summary>
            The negotiated timeout in milliseconds from the Resource Discover Initiate
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ContextBase`1.LastAccess">
            <summary>
            The last time the context was accessed.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ContextBase`1.CallbackActivated">
            <summary>
            Use this property to determine if this server is using callback data reporting.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.XiDiscoveryMain.#ctor(Xi.Server.Base.XiDiscoveryMain.MainProgramType)">
            <summary>
            
            </summary>
            <param name="mainType"></param>
        </member>
        <member name="M:Xi.Server.Base.XiDiscoveryMain.WriteLine(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Xi.Server.Base.XiDiscoveryMain.ConsoleWriteLine(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Xi.Server.Base.XiDiscoveryMain.OnStartDiscoveryServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xi.Server.Base.XiDiscoveryMain.OnStopDiscoveryServer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Xi.Server.Base.XiDiscoveryMain.EventLog">
            <summary>
            
            </summary>
        </member>
        <member name="T:Xi.Server.Base.XiDiscoveryMain.MainProgramType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Xi.Server.Base.ContextManager`2">
            <summary>
            This is the Context Manager for the reference implementation of an Express Interface (Xi) Server.
            The reference implantation provides some base classes that allow for the implantation of 
            a Xi Server with some common or standardized behavior.
            This class manages the active contexts (sessions) and provides lookup, timeout and caching support.
            </summary>
            <typeparam name="TContext">Concrete server context type</typeparam>
            <typeparam name="TList">Concrete server List type base class</typeparam>
        </member>
        <member name="M:Xi.Server.Base.ContextManager`2.AddContextChangedMonitor(System.EventHandler{Xi.Server.Base.ContextCollectionChangedEventArgs{`0}})">
            <summary>
            Use this method to add an event handler to be notified when 
            a context (session) is added or removed from the server.
            </summary>
            <param name="contextMonitor"></param>
        </member>
        <member name="M:Xi.Server.Base.ContextManager`2.DeleteContextChangedMonitor(System.EventHandler{Xi.Server.Base.ContextCollectionChangedEventArgs{`0}})">
            <summary>
            Use this method to remove an event handler will no longer be notified when 
            a context (session) is added or removed from the server.
            </summary>
            <param name="contextMonitor"></param>
        </member>
        <member name="M:Xi.Server.Base.ContextManager`2.LookupContext(System.String)">
            <summary>
            This method locates a context object using the context ID.
            Proper security checks are performed.
            </summary>
            <param name="contextId">ContextID</param>
            <returns>TContext object</returns>
        </member>
        <member name="M:Xi.Server.Base.ContextManager`2.LookupContext(System.String,System.Boolean)">
            <summary>
            This method locates a context object using the context ID.
            It allows security checks to be disabled
            </summary>
            <param name="contextId">Context ID</param>
            <param name="validate">Whether to validate the context credentials</param>
            <returns>TContext object</returns>
        </member>
        <member name="M:Xi.Server.Base.ContextManager`2.AddContext(`0)">
            <summary>
            This method adds a new context to the manager's collection.  The assigned
            Context.LocalId is used to store the context object.
            </summary>
            <param name="context">Context to add</param>
        </member>
        <member name="M:Xi.Server.Base.ContextManager`2.RemoveContext(System.String)">
            <summary>
            This method removes a context from the context manager collection.
            </summary>
            <param name="contextId">Context ID to remove</param>
        </member>
        <member name="E:Xi.Server.Base.ContextManager`2.ContextChanged">
            <summary>
            This event is raised when the context collection managed by this class is altered.  It provides
            an opportunity for the server implementation to know about clients added/removed outside of the WCF
            connections (i.e. timeout conditions, etc.)
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ContextManager`2.ContextTimeout">
            <summary>
            Enforced context timeout, set to zero to disable context timeout support
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ContextManager`2.Contexts">
            <summary>
            This returns the current (active) list of contexts.
            </summary>
        </member>
        <member name="T:Xi.Server.Base.ContextCollectionChangedEventArgs`1">
            <summary>
            This event is raised when the context collection is changed.
            The removal of a context may be a due to closing the context or the context timed out.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:Xi.Server.Base.ContextCollectionChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Constructor
            </summary>
            <param name="added"></param>
            <param name="removed"></param>
        </member>
        <member name="P:Xi.Server.Base.ContextCollectionChangedEventArgs`1.AddedContext">
            <summary>
            The Xi Context that was added or null.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ContextCollectionChangedEventArgs`1.RemovedContext">
            <summary>
            The Xi Context that was removed or null
            </summary>
        </member>
        <member name="T:Xi.Server.Base.ServerBase`2">
            <summary>
            This partial class implements the IIRestRead interface
            </summary>
            <summary>
            This partial class implements the IRead interface
            </summary>
            <summary>
            This is the base class handler for a XiServer.  It includes some essential
            startup and stop functionality for the server.
            </summary>
            <typeparam name="TContext">Concrete context type</typeparam>
            <typeparam name="TList">Concrete List type</typeparam>
            <summary>
            This partial class implements the IWrite interface
            </summary>
            <summary>
            This is the base class handler for a XiServer.  
            </summary>
            <typeparam name="TContext">Concrete context type</typeparam>
            <typeparam name="TList">Concrete List type</typeparam>
            <summary>
            This partial class implements the IResourceManagement interface
            </summary>
            <summary>
            This partial class implements the IRegisterForCallback interface
            </summary>
            <summary>
            This partial class implements the IPoll interface
            </summary>
        </member>
        <member name="T:Xi.Server.Base.ServerRoot">
            <summary>
            This is the root class for Xi Servers.  It supports the Server
            Discovery interface allowing all servers derived from it to 
            be Discovery Servers.  It also includes some essential
            startup and stop functionality for the server.
            </summary>
            <summary>
            This partial class implements the IServerDiscovery interface
            </summary>
        </member>
        <member name="T:Xi.Server.Base.XiTracer">
            <summary>
            This is the base class for the server - it provides tracing support in a concrete
            singleton implementation so any other type can get to the stored TraceSource.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.XiTracer.TraceSource">
            <summary>
            The singleton trace source used for diagnostic reporting
            </summary>
        </member>
        <member name="M:Xi.Server.Base.XiTracer.#cctor">
            <summary>
            Constructor that modifies the default trace listener list.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ServerRoot._NumServerTypes">
            <summary>
            The number of server types supported by this server. 
            Implementation subclasses of this base class must update this value.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ServerRoot._resolverThread">
            <summary>
            The thread implemented by Directory Servers to locate servers in the mesh.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ServerRoot._ResolvedUrls">
            <summary>
            The list of server urls that have been resolved to a mex endpoint address.
            That is, the ResolverThread has connected to the servers at these urls
            and retrieved their ServerEntry list
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ServerRoot._ServerEntriesLock">
            <summary>
            protect list updates
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ServerRoot.#ctor">
            <summary>
            This constructor os called only from IIS for IIS hosted servers
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ServerRoot.Initialize(System.Type)">
            <summary>
            This is used to create the service host object
            </summary>
            <param name="serviceType"></param>
        </member>
        <member name="M:Xi.Server.Base.ServerRoot.Start(System.String,System.Boolean)">
            <summary>
            This starts the XiServer class - one of the Create methods must be called
            prior to this.
            </summary>
            <param name="serverMesh">
            This is server mesh name as defined in EndpointDefinition
            XiDiscoveryServerMesh or XiServerMesh
            </param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ServerRoot.RegisterPNRP(System.String)">
            <summary>
            This method registers the server with the PeerToPeer protocol (PNRP).
            </summary>
            <param name="meshName">Mesh name</param>
            <param name="port">Port</param>
        </member>
        <member name="M:Xi.Server.Base.ServerRoot.ResolverThread">
            <summary>
            This method runs cyclically in its own thread to detect servers via PNRP.  
            It is used only by Server Discovery Servers.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ServerRoot.Stop">
            <summary>
            This method stops the service host and PNRP registration (if any).
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ServerRoot.EnterMethod(System.String,System.Object[])">
            <summary>
            This is used to log method entries in the server
            </summary>
            <param name="function">Function called</param>
            <param name="args">Arguments</param>
            <returns>TraceCloser object to log exit of method</returns>
        </member>
        <member name="F:Xi.Server.Base.ServerRoot._ServerEntries">
            <summary>
            The list is used by Directory Servers to record the Xi Resource Management Endpoints 
            that it returns in the DiscoverServers() method.  It is null if the server is not a 
            a Directory Server.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ServerRoot._ThisServerEntry">
            <summary>
            The ServerEntry for this server.  It records the server description and the list of 
            Resource Management Endpoints supported by the server.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ServerRoot.Xi#Contracts#IServerDiscovery#DiscoverServers">
            <summary>
            This method returns the list of servers the client is 
            authorized to discover.
            </summary>
            <returns>
            List of server entries.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerRoot.OnDiscoverServers">
            <summary>
            This is called for the IServerDiscovery.DiscoverServers meethod to return the
            ServerEntry list.
            </summary>
            <returns>ServerEntry list identifying endpoints and other servers</returns>
        </member>
        <member name="M:Xi.Server.Base.ServerRoot.Xi#Contracts#IServerDiscovery#DiscoverServerInfo">
            <summary>
            <para>This method is used to get the description of the 
            server.  </para>
            <para>Heritage: This method corresponds to the Identify 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS).</para> 
            </summary>
            <returns>
            The description of the server. 
            </returns>
        </member>
        <member name="P:Xi.Server.Base.ServerRoot.NumServerTypes">
            <summary>
            This property is used to obtain the number of server types 
            supported by this server
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ServerRoot.ServiceHost">
            <summary>
            The ServiceHost being used with this server
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ServerRoot.ThisServerEntry">
            <summary>
            The publicly accessible property for ThisServerEntry. 
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ServerRoot.ServerDescription">
            <summary>
            The publicly accessible property for the ServerDescription. 
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ServerRoot.DiscoveryServerManualConfigPath">
            <summary>
            This property hold the full path of the manual 
            configuration file for Xi Servers.  This is derived from 
            the .config file for the Discovery Server .exe.  The key 
            is "ServerIPAddressFile" and the value may contain 
            environment variables quoted with '%'.  This allows for 
            the manual configuration of a list of Xi Servers.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ServerRoot.DiscoveryServerManualConfigFileName">
            <summary>
            This property hold the full name (with path) of the manual 
            configuration file for Xi Servers.  This is derived from 
            the .config file for the Discovery Server .exe.  The key 
            is "ServerIPAddressFile" and the value may contain 
            environment variables quoted with '%'.  This allows for 
            the manual configuration of a list of Xi Servers.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IRestRead#RestReadData(System.String,System.String)">
            <summary>
            <para>This method is used to read the values of the 
            data objects in a list.</para>
            <para>Heritage: The method corresponds to the ISO 9506 
            Manufacturing Messaging Specification (MMS) Read service.
            </para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects to be read.
            </param>
            <returns>
            The list of requested values. The size and order of this list 
            matches the size and order of serverAliases parameter.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IRead#ReadData(System.String,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the values of one or more 
            data objects in a list.</para>
            <para>Heritage: The method corresponds to the ISO 9506 
            Manufacturing Messaging Specification (MMS) Read service.
            </para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects to be read.
            </param>
            <param name="serverAliases">
            The server aliases of the data objects to read.
            </param>
            <returns>
            The list of requested values. The size and order of this list 
            matches the size and order of serverAliases parameter.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IRead#ReadJournalDataForTimeInterval(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the historical values that fall between 
            a start and end time for one or more data objects within a specific data 
            journal list.</para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose 
            historical values are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive beginning (of returned list) 
            timestamp for values to be returned.  Valid operands include the 
            Timestamp and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive ending (of returned list)
            timestamp for values to be returned.  Valid operands include the 
            Timestamp and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.
            </param>
            <param name="numValuesPerAlias">
            The maximum number of data sample value to be returned.
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read.  
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IRead#ReadJournalDataNext(System.String,System.UInt32,System.UInt32)">
            <summary>
            <para>This method is used to return an in-sequence subset of the 
            historical values selected by the last IRead_ReadJournalDataForTimeInterval() 
            call issued by the client on this client context.  This method is used 
            when the number of values to be returned for one or more aliases 
            exceeds the number specified by the numValuesPerAlias parameter of the 
            IRead_ReadJournalDataForTimeInterval() method.  </para>
            <para>The client may have to reissue this call multiple times to 
            receive all historical values for all aliases.  The client may specify 
            a new numValuesPerAlias with each call to this method to better optimize 
            its performance.  </para>
            <para>The server is responsible for maintaining the list of requested 
            aliases for which values remain, and the timestamp of the last value 
            sent to the client for each alias. </para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose 
            historical values are to be returned.
            </param>
            <param name="numValuesPerAlias">
            The maximum number of data sample values to be returned per alias.
            </param>
            <returns>
            The next set of remaining values for each alias.  If the number of values 
            returned for any one alias is less than numValuesPerAlias, then there are 
            no additional values to return to the client for that alias. If, however, 
            the number returned for any alias is equal to numValuesPerAlias, then the 
            client should issue a ReadJournalDataNext() to retrieve any remaining values.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IRead#ReadJournalDataAtSpecificTimes(System.String,System.UInt32,System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the historical values at specific times for 
            one or more data objects within a specific data journal list.  If no entry exists 
            at the specified time in the data journal for an object, the server creates an 
            interpolated value for that time and includes it in the response as though it 
            actually existed in the journal.</para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose historical 
            values are to be read.
            </param>
            <param name="timestamps">
            Identifies the timestamps of historical values to be returned for each 
            of the requested data objects. 
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read.  
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IRead#ReadJournalDataChanges(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read changed historical values that for one 
            or more data objects within a specific data journal list.  Changed historical 
            values are those that were entered into the journal and then changed (corrected) 
            by an operator or other user.</para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose historical 
            values are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read.  
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IRead#ReadJournalDataChangesNext(System.String,System.UInt32,System.UInt32)">
            <summary>
            <para>This method is used to return an in-sequence subset of the 
            historical values selected by the last OnReadJournalDataChanges() 
            call issued by the client on this client context.  This method is used 
            when the number of values to be returned for one or more aliases 
            exceeds the number specified by the numValuesPerAlias parameter of the 
            OnReadJournalDataChanges() method.  </para>
            <para>The client may have to reissue this call multiple times to 
            receive all historical values for all aliases.  The client may specify 
            a new numValuesPerAlias with each call to this method to better optimize 
            its performance.  </para>
            <para>The server is responsible for maintaining the list of requested 
            aliases for which values remain, and the timestamp of the last value 
            sent to the client for each alias. </para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose 
            historical values are to be returned.
            </param>
            <param name="numValuesPerAlias">
            The maximum number of JournalDataChangedValues to be returned per alias.
            </param>
            <returns>
            The next set of remaining values for each alias.  If the number of values 
            returned for any one alias is less than numValuesPerAlias, then there are 
            no additional values to return to the client for that alias. If, however, 
            the number returned for any alias is equal to numValuesPerAlias, then the 
            client should issue a ReadJournalDataChangesNext() to retrieve any remaining 
            values.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IRead#ReadEvents(System.String,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to read an event list or a subset of it 
            using a filter.
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains alarms and events 
            to be read.
            </param>
            <param name="filterSet">
            The FilterSet used to select the alarms and events to read.
            </param>
            <returns>
            The list of selected alarms and events.
            Null if no alarms or events were selected.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IRead#ReadJournalEvents(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            <para>This method is used to read a list of historical alarms or 
            events.  This method only accesses historical events rather 
            than also accessing historical data as does the MMS ReadJournal 
            service.  This is because the return value is strongly typed 
            to historical alarms and event messages and not to historical  
            data.</para>
            <para>To simplify implementation, clients must first define a   
            historical alarm/event list that the server will prepare to access. </para>
            <para>Heritage: The set of historical alarms and events is referred 
            to collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical alarms and events 
            rather than also accessing historical data as does the MMS 
            ReadJournal service. This is because the return value of this method 
            is strongly typed to historical alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains historical alarms and 
            events that are to be read.
            </param>
            <param name="firstTimeStamp">
            TODO! Need to reword this!
            The timestamps to be used to access historical alarms and events.  
            By default, this list contains the starting and ending timestamps 
            as defined by the MMS ReadJournal method.  However, the filter 
            criterion can be used to override this default behavior, such that 
            the list of timestamps could be used to specify specific timestamps 
            for which historical alarms and events are being requested.
            </param>
            <param name="secondTimeStamp">
            TODO!
            </param>
            <param name="numEventMessages">
            The maximum number of EventMessages to be returned.
            </param>
            <param name="filterSet">
            The FilterSet used to select the historical alarms and events to read.
            </param>
            <returns>
            The list of selected historical alarms and events.
            Or null if no alarms or events were selected.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IRead#ReadJournalEventsNext(System.String,System.UInt32,System.UInt32)">
            <summary>
            <para>This method is used to return an in-sequence subset of the 
            historical events selected by the last ReadJournalEvents() 
            call issued by the client on this client context.  This method is used 
            when the number of EventMessages to be returned exceeds the number specified 
            by the numEventMessages parameter of the ReadJournalEvents() method.  </para>
            <para>The client may have to reissue this call multiple times to 
            receive all historical EventMessages selected by the initial call to 
            ReadJournalEvents().  The client may specify a new numEventMessages with each 
            call to this method to better optimize its performance.  </para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose 
            historical events are to be returned.
            </param>
            <param name="numEventMessages">
            The maximum number of EventMessages to be returned.
            </param>
            <returns>
            The selected EventMessages. If, however, the number returned is equal to 
            numEventMessages, then the client should issue a ReadJournalEventsNext() 
            to retrieve any remaining EventMessages.
            </returns>
        </member>
        <member name="F:Xi.Server.Base.ServerBase`2._ServerState">
            <summary>
            The implementation subclass of this base class must set this value!
            If this server is a wrapper, then the server should set the states 
            that override the states of the underlying server. For example, when 
            the server first comes up, the initializing state should be set, and 
            when shutting down, the aborting state should be set.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ServerBase`2._ServerTypeList">
            <summary>
            The list of all server types to be matched against this 
            server's type defined by SupportedServerTypes.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ServerBase`2._StandardMib">
            <summary>
            The standard server MIB
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ServerBase`2._VendorMib">
            <summary>
            The optional server-specific MIB.  Entries in the 
            VendorMib are identified and described in the 
            standard server MIB.
            </summary>
        </member>
        <member name="F:Xi.Server.Base.ServerBase`2._ServerDetails">
            <summary>
            The details of the server description. This information is not 
            returned in the ServerDescription if the Identify() method is 
            called without a context id.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.InitializeServerData(`0)">
            <summary>
            This method initializes the server data.
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <returns>
            The result code that indicates the success or failure of this method.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.InitializeMib(`0)">
            <summary>
            This method initializes the server MIB.
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.InitializeServerDescription(`0)">
            <summary>
            This method initializes the Server Description.
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <returns>
            The result code that indicates the success or failure of this method.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnGetServerDetails(`0)">
            <summary>
            Override this method in a server specific subclass of ServerBase
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <returns>
            A subset of the description fields for the server.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnSetServerRoles(`0)">
            <summary>
            Override this method in a server specific subclass of ServerBase
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnSetServerMethodsAndFeatures(`0)">
            <summary>
            Override this method in a server specific subclass of ServerBase
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnSetVendorMib(`0)">
            <summary>
            Override this method in a server specific subclass of ServerBase
            </summary>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnGetLocaleIds(`0,System.UInt32)">
            <summary>
            Override this method in a server specific subclass of ServerBase
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <param name="serverType">
            The server type for which locale ids are being requested.
            Only one server type may be specified by this parameter.
            </param>
            <returns>
            The list of locale ids supported by the server.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnGetEventFilters(`0)">
            <summary>
            Override this method in a server specific subclass of ServerBase
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <returns>
            The list of event message fields that can be used for filtering.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnGetCategoryConfiguration(`0)">
            <summary>
            Override this method in a server specific subclass of ServerBase
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <returns>
            The list of categories supported by an alarms and events server.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnGetDataJournalOptions(`0)">
            <summary>
            Override this method in a server specific subclass of ServerBase
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <returns>
            The Data Journal Options supported by the data journal.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnGetEventJournalFilters(`0)">
            <summary>
            Override this method in a server specific subclass of ServerBase
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <returns>
            The list of event message fields that can be used for filtering the 
            event journal.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnGetEventJournalCategoryConfiguration(`0)">
            <summary>
            Override this method in a server specific subclass of ServerBase
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <returns>
            The list of categories supported by the event journal.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IWrite#WriteValues(System.String,System.UInt32,Xi.Contracts.Data.WriteValueArrays)">
            <summary>
            <para>This method is used to write the values of one or more 
            data objects in a list.</para>
            <para>Heritage: The method corresponds to the ISO 9506 
            Manufacturing Messaging Specification (MMS) Write service.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects to be read.
            </param>
            <param name="dataObjectsToWrite">
            The server aliases and values of the data objects to write.
            </param>
            <returns>
            The list server aliases and result codes for the data objects whose 
            write failed. Returns null if all writes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IWrite#WriteJournalData(System.String,System.UInt32,Xi.Contracts.Data.ModificationType,Xi.Contracts.Data.WriteJournalValues[])">
            <summary>
            <para>This method is used to modify historical data values.  
            The modification type parameter indicates the type of 
            modification to perform.  </para>
            <para>Heritage: This method is adapted from the WriteJournal 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS).</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list that contains the data objects 
            to be written.
            </param>
            <param name="modificationType">
            Indicates the type of modification to perform.  
            </param>
            <param name="valuesToWrite">
            The list of historical values to write.  Each is identified 
            by its list id, its server alias, and its timestamp.
            </param>
            <returns>
            The list of identifiers and error codes for each data object 
            whose write failed. Returns null if all writes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IWrite#WriteJournalEvents(System.String,System.UInt32,Xi.Contracts.Data.ModificationType,Xi.Contracts.Data.EventMessage[])">
            <summary>
            <para>This method is used to modify historical alarms and/or 
            events. The modification type parameter indicates the type of 
            modification to perform.  </para>
            <para>Heritage: This method is adapted from the WriteJournal 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS).</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list that contains the alarms and/or 
            events to be written.
            </param>
            <param name="modificationType">
            Indicates the type of modification to perform.  
            </param>
            <param name="eventsToWrite">
            The list of historical alarms and/or events to write.  Each 
            is identified by its EventId contained in the EventMessage.
            </param>
            <returns>
            The list server aliases and result codes for the alarms and/or 
            events whose write failed. Returns null if all writes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IWrite#AcknowledgeAlarms(System.String,System.UInt32,System.String,System.String,System.Collections.Generic.List{Xi.Contracts.Data.EventId})">
            <summary>
            <para>This method is used to acknowledge one or more alarms.</para>
            <para>Heritage: This method is adapted from the 
            AcknowledgeEventNotification service defined by the ISO 9506 
            Manufacturing Messaging Specification (MMS).</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list that contains the alarms to be 
            acknowledged.
            </param>
            <param name="operatorName">
            The name or other identifier of the operator who is acknowledging 
            the alarm.
            </param>
            <param name="comment">
            An optional comment submitted by the operator to accompany the 
            acknowledgement.
            </param>
            <param name="alarmsToAck">
            The list of alarms to acknowledge.
            </param>
            <returns>
            The list EventIds and result codes for the alarms whose 
            acknowledgement failed. Returns null if all acknowledgements 
            succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IWrite#Passthrough(System.String,System.String,System.Int32,System.String,System.Byte[])">
            <summary>
            This method allows the client to send a message to the server that 
            the server delivers unmodified to the intended recipient.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="recipientId">
            The recipient identifier. The list of recipients is contained in 
            the RecipientPassthroughs MIB element.   
            </param>
            <param name="invokeId">
            A client-defined integer identifier for this invocation of the passthrough.  When
            used with asynchronous passthroughs, the server returns the invokeId with the response.  
            </param>
            <param name="passthroughName">
            The name of the passthrough message. The list of passthroughs for a recipient 
            is contained in the RecipientPassthroughs MIB element.   
            </param>
            <param name="DataToSend">
            The Data To Send is just an array of bytes.  No interpretation of the data 
            is made by the Xi server.  This byte array is forwarded unaltered to the 
            underlying system.  It is up to the client application to format this byte 
            array in a valid format for the underlying system.
            </param>
            <returns>
            The Passthrough Result simply returns a Result value and a byte array as 
            returned from the underlying system.  Again it is up to the client 
            application to interpret this byte array.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#Initiate(System.String,System.String,System.UInt32@,System.UInt32@,System.UInt32@,System.String@)">
            <summary>
            <para>This method is used to establish a context between 
            the client and the server.  The server must authenticate 
            the client when this method is called.</para> 
            <para>Once created, the context is capable of multiplexing 
            concurrent WCF connections to Xi endpoints.  In some  
            cases, there may be more than one instance of the Read 
            or Write endpoints (see the OpenEndpoint() method 
            for more information about endpoints. </para>  
            <para>If the WCF connection to the Resource Management 
            Endpoint is inadvertanatly disconnected, the client can 
            prevent the context from timing-out and automatically 
            closing by calling the ReInitiateContext() method.</para>
            <para>Heritage: This method corresponds to the Initiate 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS) that is used to open an MMS environment 
            between the client and server.</para> 
            <para>The term "context" is taken from IEC 61158 IEC 
            61158-5-9: Digital data communications for measurement 
            and control — Fieldbus for use in industrial control 
            systems — Part 5-9: Application layer service definition 
            — Type 9 elements.  This specification derives its context 
            object from the MMS Enviroment.</para> 
            </summary>
            <param name="applicationName">
            The name of the client application.  
            </param>
            <param name="workstationName">
            The name of the workstation on which the client application 
            is running.  
            </param>
            <param name="localeId">
            The localeId to be used for the context. If the requested context 
            is not supported by the server, the server will return its default 
            context. 
            </param>
            <param name="contextTimeout">
            The context timeout is expressed in milliseconds.  The requested 
            timeout value can be negotiated up or down by the server. The 
            negotiated value is returned to the client.  A request value of 
            zero causes the server to use its default timeout.
            </param>
            <param name="contextOptions">
            This parameter enables various debug and tracing options used to 
            aide in diagnosing issues. see ContextOptions enum for the 
            valid values.
            </param>
            <param name="reInitiateKey">
            A server-specific string that is to be supplied by the client in the 
            ReInitiate() method call. This parameter is used to prevent interloping 
            clients from re-initiating a context using only the context id that was 
            obtained through observing message sent to unencrypted Xi endpoints.  
            The reinitiate key value returned to the client by this method is 
            server-specific.   
            </param>
            <returns>
            The server generated context id.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnValidateContextSecurity(System.String,System.String,System.ServiceModel.OperationContext)">
            <summary>
            This method is called prior to calling OnInitiate to validate security for the context.  
            If any problems are found, an XiFault should be thrown to communicate them to the client.
            </summary>
            <param name="applicationName">The client application name to authorize.</param>
            <param name="workstationName">The client workstation name to authorize</param>
            <param name="ctx">The Operation Context to authorize</param>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnGetPrimaryIdentity(System.ServiceModel.OperationContext)">
            <summary>
            This method is called prior to calling OnInitiate to set the Identity for the context 
            appropriately for this server.
            </summary>
            <param name="ctx">The Operation Context that identifies the calling user.</param>
            <returns>The user identity to be used for this context</returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.OnInitiate(System.String,System.String,System.UInt32@,System.UInt32@,Xi.Contracts.Constants.ContextOptions,System.ServiceModel.OperationContext,System.Security.Principal.IIdentity,System.Collections.Generic.List{Xi.Contracts.Data.EndpointDefinition},System.String@)">
            <summary>
            This method is called to create a new client context.  The purpose is for the server
            to validate the passed context information.  If any problems are found, a XiFault 
            should be thrown to communicate them to the client.
            </summary>
            <param name="applicationName"></param>
            <param name="workstationName"></param>
            <param name="localeId"></param>
            <param name="contextTimeout"></param>
            <param name="contextOptions"></param>
            <param name="ctx"></param>
            <param name="userIdentity"></param>
            <param name="listEndpointDefinitions"></param>
            <param name="reInitiateKey"></param>
            <returns>An instance of a Context Implementation</returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#ReInitiate(System.String,System.UInt32@,System.String@)">
            <summary>
            <para>This method is used to reinitate an existing context 
            after a failure of the underlying WCF connection.  The 
            server must reauthenticate the client when this method is 
            called.</para> 
            </summary>
            <param name="existingContext">
            The context identifier of the existing context to reinitate. 
            </param>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#Conclude(System.String)">
            <summary>
            This method is used to close a context. When the context 
            is closed, all resources/endpoints associated with the  
            context are released.
            <para>Heritage: This method corresponds to the Conclude 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS) that is used to close the MMS 
            environment between the client and server.</para> 
            </summary>
            <param name="contextId">
            The context identifier of the context to close. 
            </param>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#ClientKeepAlive(System.String)">
            <summary>
            This method should be invoked by a client that is not actively 
            invoking other methods that use a Context LocalId to keep the 
            client – server context from timing out.
            </summary>
            <param name="contextId"></param>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#Identify(System.String)">
            <summary>
            <para>This method is used to get the description of the 
            server.  This method can be called before a context has 
            been established with the server.</para>
            <para>Heritage: This method corresponds to the Identify 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS).</para> 
            </summary>
            <param name="contextId">
            The optional context identifier. This call can be issued 
            without first having established a client context.  
            However, the ServerDetails element of the ServerDescription 
            is not returned unless this parameter is present.
            </param>
            <returns>
            The description of the server. 
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#Status(System.String)">
            <summary>
            <para>This method is used to get the state of the 
            server.  The client can also register for changes 
            in the ServerState by adding it to a data object list.  
            See the ServerStateId class for the definition of the 
            Object LocalId of the ServerState object.</para>
            <para>Heritage: This method corresponds to the Status 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS).</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <returns>
            The status of the server. 
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#LookupResultCodes(System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method returns text descriptions of error codes.</para>  
            <para>Heritage: This method corresponds to the Microsoft 
            errlook.exe utility.</para>
            </summary>
            <param name="contextId">
            The context identifier. 
            </param>
            <param name="resultCodes">
            The result codes for which text descriptions are being requested.
            </param>
            <returns>
            The list of result codes and if a result code indicates success, 
            the requested text descriptions. The size and order of this 
            list matches the size and order of the resultCodes parameter.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#FindObjects(System.String,Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            <para>This method is used to find objects in the server.  The 
            client uses the findCriteria parameter to identify a starting 
            branch and a set of filter criteria.  It also specifies the 
            maximum number of objects to return.  </para> 
            <para>The server examines the objects that are children of the 
            specified branch and selects those that match the filter criteria.
            Note that "children" are objects whose root paths can be created 
            by appending their names to the path used to identify the starting  
            branch.</para>  
            <para>The object attributes of the selected objects are 
            returned to the client. The number returned is limited by the 
            number specified in the numberToReturn parameter.  If the number 
            returned is less than than that number, then the client can 
            safely assume that the server has no more to return.</para>  
            <para>However, if the number returned is equal to that number, 
            then the client can retrieve the next set of results by issuing 
            another FindObjects() call with the findCriteria parameter set to 
            null. A null findCriteria indicates to the server to continue 
            returning results from those remaining in the list.  The client 
            eventually detects the end of the list by receiving a response 
            that returns less than specified by the numberToReturn parameter.</para>
            <para>Heritage:  This method is based on the List service 
            of the ISO 9594-1 Information technology -- Open Systems 
            Interconnection -- The Directory: Overview of concepts, models 
            and services.  ISO 9594 also defines the object hierarchy model 
            that is used by the server.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="findCriteria">
            The criteria used by the server to find objects.  If this 
            parameter is null, then this call is a continuation of the 
            previous find.
            </param>
            <param name="numberToReturn">
            The maximum number of objects  to return in a single response.
            </param>
            <returns>
            <para>The list of object attributes for the objects that met 
            the filter criteria. </para>  
            <para>Returns an empty list if the starting object is a leaf, or 
            no objects were found that meet the filter criteria, or if the call 
            was made with a null findCriteria and there are no more objects to 
            return.</para>
            <para>May also return null if there is nothing (left) to return.</para>
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#FindRootPaths(System.String,Xi.Contracts.Data.ObjectPath)">
            <summary>
            <para>Each discoverable object in the server has at least 
            one path to the root (called the root path).  A root path 
            is represented by an ordered list of object names beginning 
            with "Root" and ending with the name of the object.</para>
            <para>This method identifies an object by one of its root 
            paths and requests the server to return any additional root 
            paths that exist.  If there are no other root paths that can 
            be used to reach the object, then null is returned.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="objectPath">
            The root path that identifies the object for which alternate 
            root paths are being requested. 
            </param>
            <returns>
            The list of additional root paths to the specified object.  
            Null if specified objectPath is the only root path to the 
            object. An exception is thrown if the specified objectPath is 
            invalid.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#FindTypes(System.String,Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            <para>This method is used to get the description of a data 
            type or an object type. This description is intended to be 
            used by the client to understand the semantics and composition 
            of the data type or object type.  It cannot be used for 
            standard data types.  </para>
            <para>Heritage: This method is derived from the 
            GetNamedTypeAttributes service defined by the ISO 9506 
            Manufacturing Messaging Specification (MMS).  It has been 
            adapted to also apply to Object Types.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="findCriteria">
            The criteria used by the server to find types.  If this 
            parameter is null, then this call is a continuation of the 
            previous find.
            </param>
            <param name="numberToReturn">
            The maximum number of objects to return in a single response.
            </param>
            <returns>
            <para>The list of type attributes for the type that met 
            the filter criteria. </para>  
            <para>Returns null if the starting type is a leaf, or no types 
            were found that meet the filter criteria, or if the call was made 
            with a null findCriteria and there are no more types to return.</para>
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#GetStandardMib(System.String)">
            <summary>
            <para>This method is used to read the standard MIB.</para>  
            <para>Heritage: This method corresponds to the IETF RFC 1157 
            Simple Network Management Protocol Get-Request PDU, with the 
            exception that there is only one standard MIB object, so a 
            list of MIB Object Ids is not required.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <returns>
            The standard MIB is returned.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#GetVendorMib(System.String,System.Collections.Generic.List{Xi.Contracts.Data.InstanceId})">
            <summary>
            <para>This method is used to read the vendor-specific MIB objects.</para>  
            <para>Heritage: This method corresponds to the IETF RFC 1157 
            Simple Network Management Protocol Get-Request PDU.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="vendorMibObjectIds">
            The list of identifiers for the vendor MIB objects to be returned.
            </param>
            <returns>
            The requested vendor-specific MIB objects.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#OpenEndpoint(System.String,System.String,System.String)">
            <summary>
            <para>This method opens an endpoint that can be used to 
            access one or more lists.  Each newly opened endpoint is 
            assigned its own unique identifier.  </para>
            <para>Heritage: Endpoints represent Application Service 
            Elements (ASEs) defined for the Application Layer by ISO 
            7498-1 Information technology -- Open Systems Interconnection 
            -- Basic Reference Model: The Basic Model.  The are 
            implemented by Microsoft Windows Communication Foundation 
            (WCF) endpoints.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="endpointInterfaceType">
            The type of the endpoint as specified by the interface that 
            it supports.  Standard values are defined by the EndpointInterfaceType 
            class, with the exception that IResourceManagement and 
            IServerDiscovery cannot be created.
            </param>
            <param name="bindingName">
            <para>The type of the binding (WSHttpBinding, NetTcpBinding, etc.) 
            as defined in the config.app file.  For standard bindings,
            this is the endpoint binding attribute:</para>
            <para>  endpoint binding="wsHttpBinding"  </para>
            <para>For custom bindings, this is the name attribute of the binding 
            element of the custom binding:</para>
            <para>  binding name="binaryHttpBinding"</para>
            </param>
            <returns>
            The definition of the endpoint.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#AddListToEndpoint(System.String,System.String,System.UInt32)">
            <summary>
            This method adds one or more lists to an endpoint.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="endpointId">
            A string value that uniquely identifies the endpoint 
            to which the list is to be added.
            </param>
            <param name="serverListId">
            The identifiers of the lists to add to the endpoint.
            </param>
            <returns>
            The list identifiers and result codes for the lists whose 
            add failed. Returns null if all adds succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#RemoveListsFromEndpoint(System.String,System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method removes one or more lists from an endpoint.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="endpointId">
            A string value that uniquely identifies the endpoint 
            from which the list is to be removed.
            </param>
            <param name="listIds">
            The identifiers of the lists to remove from the endpoint.
            </param>
            <returns>
            The list identifiers and result codes for the lists whose 
            removal failed. Returns null if all removals succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#CloseEndpoint(System.String,System.String)">
            <summary>
            This method closes an endpoint.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="endpointId">
            The endpoint LocalId of the endpoint to be deleted.
            </param>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#DefineList(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            <para>This method is used to create a list of data 
            objects or alarms/events within the context.  </para>
            <para>Heritage:  Data object lists correspond to Named 
            Variable Lists as defined by the ISO 9506 Manufacturing 
            Message Specification (MMS), with the exception that the 
            server provides the name of the list as an alias. </para>
            <para>Alarms/events correspond to Alarm Lists described in 
            EEMUA Publication 191 "Alarm Systems: A Guide to Design, 
            Management and Procurement".  See http://www.eemua.org </para>
            <para>Lists are more generally based on the more List class 
            defined by the Microsoft .NET Framework.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="clientId">
            The Client LocalId for this list.  Used in callbacks to allow the 
            client to identify this list.
            </param>
            <param name="listType">
            Indicates the type of list to be created.
            Standard list types as defined by the ListAttributes class 
            are: 
            1) Data List, 
            2) History Data List, 
            3) Event List 
            4) History Event List
            </param>
            <param name="updateRate">
            The requested update rate in milliseconds for the list. The  
            update rate indicates how often the server updates the 
            values of elements in the list.  A value of 0 indicates 
            that updating is exception-based. The server may negotiate 
            this value, up or down as necessary to support its efficient 
            operation.
            </param>
            <param name="bufferingRate">
            <para>An optional-use parameter that indicates that the server is 
            to buffer data updates, rather than overwriting them, until either 
            the time span defined by the buffering rate expires or the values 
            are transmitted to the client in a callback or poll response. If 
            the time span expires, then the oldest value for a data object is 
            discarded when a new value is received from the underlying system.</para>
            <para>The value of the bufferingRate is set to 0 to indicate 
            that it is not to be used and that new values overwrite (replace) existing 
            cached values.  </para>
            <para>When used, this parameter contains the client-requested buffering 
            rate, which the server may negotiate up or down, or to 0 if the 
            server does not support the buffering rate. </para>
            <para>The FeaturesSupported member of the StandardMib is used to indicate 
            server support for the buffering rate.</para>
            </param>
            <param name="filterSet">
            The FilterSet used to select elements for the list.  
            </param>
            <returns>
            The attributes created for the list.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#GetListAttributes(System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method gets the attributes of a list.</para>
            <para>Heritage: This method is adapted from the 
            GetNamedVariableListAttributes service defined by the ISO 
            9506 Manufacturing Messaging Specification (MMS).  It has 
            been adapted to also apply to Event Lists.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listIds">
            The identifiers for the lists whose attributes are to be 
            retrieved.
            </param>
            <returns>
            The list of requested List Attributes. The size and order 
            of this list matches the size and order of the listAliases 
            parameter.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#RenewAliases(System.String,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.AliasUpdate})">
            <summary>
            This method is used to renew the aliases for a list.  Successful completion 
            of this method invalidates the previous server alias, but not the previous 
            client alias. However, the server begins using the new client alias at its 
            earliest opportunity and ceases using the previous client alias. This behavior 
            accommodates the race condition that may occur when this method is being processed 
            by the server concurrently with the publishing of data to the client.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list whose aliases are to be 
            updated.
            </param>
            <param name="newAliases">
            The list of aliases to be updated. Each AliasUpdate in the list 
            contains the existing server alias and new client alias for it.
            </param>
            <returns>
            The list of updated aliases. The size and order 
            of this list matches the size and order of the listAliases 
            parameter.  Each AliasResult in the list contains the new client 
            alias from the request and its corresponding new server alias assigned
            by the server.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#DeleteLists(System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method deletes a list.  It does not, however, 
            delete the elements of the list from the server.</para>
            <para>Heritage: This method is adapted from the 
            DeleteNamedVariableList service defined by the ISO 9506 
            Manufacturing Messaging Specification (MMS).  It has been 
            adapted to also apply to Event Lists.  </para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listIds">
            The identifiers for the lists to be deleted.
            </param>
            <returns>
            The list identifiers and result codes for the lists whose 
            deletion failed. Returns null if all deletes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#AddDataObjectsToList(System.String,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.ListInstanceId})">
            <summary>
            <para>This method is used to add objects to a list.  Objects 
            are added with updating of their values by the server 
            disabled. Updating of values by the server can be enabled 
            using the EnableListUpdating() method.</para>
            <para>Heritage: This method is derived from the Add method of 
            the more generic List class defined by the Microsoft .NET 
            Framework.</para>        
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list to which data objects are to be 
            added.
            </param>
            <param name="dataObjectsToAdd">
            The data objects to add.
            </param>
            <returns>
            The list of results. The size and order of this list matches 
            the size and order of the objectsToAdd parameter.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#RemoveDataObjectsFromList(System.String,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to remove members from a list.  
            It does not, however, delete the corresponding data object 
            from the server.</para>
            <para>Heritage: This method is derived from the Remove 
            method of the more generic List class defined by the 
            Microsoft .NET Framework.</para>        
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list from which data objects are 
            to be removed.
            </param>
            <param name="serverAliasesToDelete">
            The server aliases of the data objects to remove.
            </param>
            <returns>
            The list identifiers and result codes for data objects whose 
            removal failed. Returns null if all removals succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#ModifyListAttributes(System.String,System.UInt32,System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to change the filters of a list.  The 
            new filters replace the old filters if they exist.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list to which the filters are to 
            be set.
            </param>
            <param name="updateRate">
            List update or scan rate.  The list will be modified to
            use this new rate.  Use GetListAttributes to obtain the
            current value of this parameter.
            </param>
            <param name="filterSet">
            The new FilterSet.
            </param>
            <returns>
            The revised update rate and filter set.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#EnableListUpdating(System.String,System.UInt32,System.Boolean)">
             <summary>
             This method can be used to enable or disable updating of an entire 
             list. When this method is called, the enabled state of the list is changed, 
             but the enabled state of the individual elements of the list is unchanged. 
             </summary>
             <param name="contextId">
             The context identifier.
             </param>
             <param name="listId">
             The identifier for the list for which updating is to be 
             enabled or disabled.
            </param>
             <param name="enable">
             Indicates, when TRUE, that updating of the list is to be enabled,
             and when FALSE, that updating of the list is to be disabled.
             </param>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#EnableListElementUpdating(System.String,System.UInt32,System.Boolean,System.Collections.Generic.List{System.UInt32})">
             <summary>
             This method can be used to enable or disable updating of individual 
             elements of a list.  If the server aliases parameter is null, then 
             all elements of the list are enabled/disabled.  This call does not 
             change the enabled state of the list itself.
             </summary>
             <param name="contextId">
             The context identifier.
             </param>
             <param name="listId">
             The identifier for the list for which updating is to be 
             enabled or disabled.
            </param>
             <param name="enableUpdating">
             Indicates, when TRUE, that updating of the list is to be enabled,
             and when FALSE, that updating of the list is to be disabled.
             </param>
             <param name="serverAliases">
             The list of aliases for data objects of a list for 
             which updating is to be enabled or disabled.
             When this value is null updating all elements of the list are to be 
             enabled/disabled. In this case, however, the enable/disable state 
             of the list itself is not changed.
             </param>
             <returns>
             <para>If the serverAliases parameter was null, returns 
             null if the server was able to successfully enable/disable 
             the list and all its elements.  If not, throws an exception 
             for event lists and for data lists, returns the client and server 
             aliases and result codes for the data objects that could not be 
             enabled/disabled.  </para> 
             <para>If the serverAliases parameter was not null, returns null 
             if the server was able to successfully enable/disable the data 
             objects identified by the serverAliases.  If not, returns the 
             client and server aliases and result codes for the data objects 
             that could not be enabled/disabled.</para> 
             </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#AddEventMessageFields(System.String,System.UInt32,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
             <summary>
             This method is used to request that category-specific fields be 
             included in event messages generated for alarms and events of 
             the category for the specified Event/Alarm List.
             </summary>
             <param name="contextId">
             The context identifier.
            </param>
             <param name="listId">
             The identifier for the list for which event message fields are being added. 
            </param>
             <param name="categoryId">
             The category for which event message fields are being added.
             </param>
             <param name="fieldObjectTypeIds">
             The list of category-specific fields to be included in the event 
             messages generated for alarms and events of the category.  Each field 
             is identified by its ObjectType LocalId obtained from the EventMessageFields 
             contained in the EventCategoryConfigurations Standard MIB element.
             </param>
             <returns>
             The ObjectTypeIds and result codes for the fields that could not be  
             added to the event message. Returns null if all succeeded.  
             </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#TouchDataObjects(System.String,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method is used to touch (mark as changed) a specific 
            set of Data Objects, the Data List and Data Objects must be 
            in the Active state.
            within the list.
            </summary>
            <param name="contextId"></param>
            <param name="listId"></param>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#TouchList(System.String,System.UInt32)">
            <summary>
            This method is used to touch (mark as changed) all itmes that
            are active within the list.
            </summary>
            <param name="contextId"></param>
            <param name="listId"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IResourceManagement#GetAlarmSummary(System.String,Xi.Contracts.Data.InstanceId)">
            <summary>
            <para>This method is used to request summary information for the 
            alarms that can be generated for a given event source.</para>
            <para>Heritage: This method is adapted from the GetAlarmSummary 
            service defined by ISO 9506 Manufacturing Message Specification.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="eventSource">
            The InstanceId for the event source for which alarm summaries are 
            being requested.
            </param>
            <returns>
            The summaries of the alarms that can be generated by the specified 
            event source.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IPoll#PollDataChanges(System.String,System.UInt32)">
            <summary>
            <para>This method is used to poll the endpoint for changes 
            to a specific data list.</para>    
            <para>Changes consists of:</para>
            <para>1) values for data objects that were added to the list,</para> 
            <para>2) values for data objects whose current values 
            have changed since the last time they were reported to the 
            client via this interface.  If a deadband filter has been 
            defined for the list, floating point values are not considered 
            to have changed unless they have changed by the deadband amount.</para>
            <para>3) historical values that meet the list filter criteria, 
            including the deadband.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list whose changes are to be returned 
            (reported).
            </param>
            <returns>
            The list of changed values.
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IPoll#PollEventChanges(System.String,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to poll the endpoint for changes to a 
            specific event list.  Event messages are sent when there 
            has been a change to the specified event list. A new alarm 
            or event that has been added to the list, a change to an 
            alarm already in the list, or the deletion of an alarm from 
            the list constitutes a change to the list.
            <para>Once an event has been reported from the list, it 
            is automatically deleted from the list.  Alarms are only 
            deleted from the list when they transition to inactive and 
            acknowledged.  </para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list whose changes are to be returned 
            (reported).
            </param>
            <param name="filterSet">
            Optional set of filters to further refine the selection from 
            the alarms and events in the list. The event list itself is 
            created using a filter.
            </param>
            <returns>
            The list of new alarm/event messages, changes to alarm messages 
            that are already in the list, and deletions of alarm messages 
            from the list.  
            </returns>
        </member>
        <member name="M:Xi.Server.Base.ServerBase`2.Xi#Contracts#IPoll#PollPassthroughResponses(System.String)">
            <summary>
            This method returns the results of invoking one or more asynchronous passthrough 
            requests.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <returns>
            The results of executing the passthroughs. Each result in the list consists of the 
            result code, the invokeId supplied in the request, and a byte array.  It is up to the 
            client application to interpret this byte array.  
            </returns>
        </member>
        <member name="P:Xi.Server.Base.ServerBase`2.ServerState">
            <summary>
            This property is used to obtain the state of this Xi Server
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ServerBase`2.ServerTypeList">
            <summary>
            This property is used to obtain the complete list of valid server types.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ServerBase`2.StandardMib">
            <summary>
            The publicly accessible property for the standard server MIB. 
            </summary>
        </member>
        <member name="P:Xi.Server.Base.ServerBase`2.VendorMib">
            <summary>
            The publicly accessible property for the server-specific MIB. 
            </summary>
        </member>
        <member name="T:Xi.Server.Base.DataListRoot">
            <summary>
            This is the root or base class for all lists the report data values either current or historical.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.DataListRoot.OnAddDataObjectsToList(System.Collections.Generic.List{Xi.Contracts.Data.ListInstanceId})">
            <summary>
            This method is invoked from Context Base (List Management) 
            to Add Data objects To this List.
            </summary>
            <param name="dataObjectsToAdd"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.DataListRoot.OnAddDataObjectsToList(System.Collections.Generic.List{Xi.Server.Base.ValueRoot})">
            <summary>
            Normally an override will be provided in the implementation 
            subclass to add the Data List Value Base 
            instance to the Data List.
            </summary>
            <param name="listDataListEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.DataListRoot.OnNewDataListValue(System.UInt32,System.UInt32,Xi.Contracts.Data.InstanceId)">
            <summary>
            The implementation subclass provides the implementation of this abstract method 
            to create / construct an instance of a subclass of Data List Value Base.
            </summary>
            <param name="clientAlias"></param>
            <param name="serverAlias"></param>
            <param name="instanceId"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.DataListRoot.OnRemoveDataObjectsFromList(System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method is used to Remove Data Objects From this List.  
            It is invoked from Context Base {List Management} Remove Data Object From List.
            </summary>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.DataListRoot.OnRemoveDataObjectsFromList(System.Collections.Generic.List{Xi.Contracts.Data.AliasResult},System.Collections.Generic.List{Xi.Server.Base.ValueRoot})">
            <summary>
            This method should be overridden in the implementation 
            base class to take any actions needed to remove the 
            specified Data List Value Base instances from the list.
            </summary>
            <param name="listUintIdRes"></param>
            <param name="dataListEntries"></param>
            <returns></returns>
        </member>
        <member name="T:Xi.Server.Base.EndpointEntry`1">
            <summary>
            An instance of this class is used to hold the associations between an endpoint 
            and an Xi List.  A Xi List must be associated with the proper type of end point 
            for the actions associated with the endpoint to be performed on the Xi List.  
            For example an "Write" can not be performed on elements of an Xi List unless 
            that list is associated with the "IWrite" endpoint.  Each instance of this class 
            is associated with an EndpointDefinition.
            </summary>
            <typeparam name="TList"></typeparam>
        </member>
        <member name="F:Xi.Server.Base.EndpointEntry`1._XiLists">
            <summary>
            List of Xi Lists associated with this EndpointDefinition.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.EndpointEntry`1.#ctor(Xi.Contracts.Data.EndpointDefinition)">
            <summary>
            Constructor used to create an instance of this class allowing for the 
            association between Xi Lists and Endpoint Definitions.
            </summary>
            <param name="endpointDefinition">
            The Endpoint Definition this instance of Endpoint Entry to which 
            the Xi Lists will be associated.
            </param>
        </member>
        <member name="M:Xi.Server.Base.EndpointEntry`1.Dispose">
            <summary>
            see IDisposable interface.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.EndpointEntry`1.OnAddListToEndpoint(`0)">
            <summary>
            This method is invoked to associate a Xi List with an endpoint.
            </summary>
            <param name="listToAdd">
            The Xi List to be associated with the endpoint managed by this instance.
            </param>
        </member>
        <member name="M:Xi.Server.Base.EndpointEntry`1.OnRemoveListFromEndpoint(`0)">
            <summary>
            This method is invoked to remove a Xi List association from an endpoint.
            </summary>
            <param name="listToRemove">
            The Xi List to be removed from this endpoint entry.
            </param>
        </member>
        <member name="M:Xi.Server.Base.EndpointEntry`1.OnCloseEndpoint">
            <summary>
            Remove all associations between this endpoint and the lists.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.EndpointEntry`1.EndpointState">
            <summary>
            The Endpoint State property returns true if this endpoint is open 
            and ready for use and false if the endpoint has not been opened or 
            has been closed.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.EndpointEntry`1.EndpointDefinition">
            <summary>
            Attribute providing the Endpoint Definition for this instance.
            </summary>
        </member>
        <member name="T:Xi.Server.Base.EventJournalListBase">
            <summary>
            This is the base class from which an implementation of a Xi server 
            would subclass to provide access historical or journaled event and 
            alarm data to a client.
            </summary>
        </member>
        <member name="T:Xi.Server.Base.DataListValueBase">
            <summary>
            This class provides common basic values for the Data List Values.
            A Data List is used to represent real time process values.  This
            base class provides some common properties runtime Data Values.
            </summary> 
        </member>
        <member name="M:Xi.Server.Base.DataListValueBase.#ctor(Xi.Server.Base.ListRoot,System.UInt32,System.UInt32)">
            <summary>
            Constructor for the Data List Value Base class.
            </summary>
            <param name="ownerList"></param>
        </member>
        <member name="M:Xi.Server.Base.DataListValueBase.DoubleValueUpdate(System.UInt32,System.DateTime,System.Double)">
            <summary>
            This method is used to update this Data Value Base 
            with new values.  It has the side effect of adding this 
            Data Value Base to the queue of changed Entry Root maintained 
            by List Root.This method 
            </summary>
            <param name="statusCode"></param>
            <param name="timeStamp"></param>
            <param name="value"></param>
        </member>
        <member name="P:Xi.Server.Base.DataListValueBase.UpdatingEnabled">
            <summary>
            This property is used to track or indicate the 
            active or inactive state of this Data List Value.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.DataListValueBase.StatusCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Xi.Server.Base.DataListValueBase.TimeStamp">
            <summary>
            The Time Stamp is a UTC time.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.DataListValueBase.ValueTransportTypeKey">
            <summary>
            The Value Transport Type Key property provides the data type for transport.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.DataListValueBase.Value">
            <summary>
            The actual Data Value is simply stored as a .NET object.  Thus
            it may represent any data value from a simple intrisic data type, 
            an array of intrisic data types or an instance of a class.  
            Note that if a class is to be represented it must be defined 
            with a Data Contract and Data Memebers.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.DataListValueBase.DoubleValue">
            <summary>
            Used to set the value when transproted as a double.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.DataListValueBase.UintValue">
            <summary>
            Used to set the value when transproted as a long.
            </summary>
        </member>
        <member name="P:Xi.Server.Base.DataListValueBase.ObjectValue">
            <summary>
            Used to set the value when transproted as a object.
            </summary>
        </member>
        <member name="T:Xi.Server.Base.DataListBase">
            <summary>
            This is the base class from which an implementation of a Xi server 
            would subclass to provide access to current process data values.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.DataListBase.#ctor(Xi.Server.Base.ContextBase{Xi.Server.Base.ListRoot},System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Xi.Contracts.Data.StandardMib)">
            <summary>
            The constructor for this class.
            </summary>
            <param name="context"></param>
            <param name="clientId"></param>
            <param name="updateRate"></param>
            <param name="bufferingRate"></param>
            <param name="listType"></param>
            <param name="listKey"></param>
        </member>
        <member name="M:Xi.Server.Base.DataListBase.OnPollDataChanges">
            <summary>
            This method may be overridden in the implementation subclass.  However, 
            the implementation provided here should be adequate when the changed 
            data values are added to the queue of changed Entry Root by setting 
            the Entry Queued property of the data value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.DataListBase.OnReadData(System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method provides a default implementation for On Read Data which 
            is invoked by Context Base {Read}.  This implementation should be 
            adequate for most situations.  This method in turn invokes another 
            version of On Read Data which is generally overridden by the 
            implementation subclass.
            </summary>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Server.Base.DataListBase.OnReadData(System.Collections.Generic.List{Xi.Server.Base.DataListValueBase})">
            <summary>
            Generally this method will be overridden in the implementation subclass.  
            The default behavior is to return the Data List Value in the cache.
            </summary>
            <param name="readRequests"></param>
        </member>
        <member name="T:Xi.Server.Base.DataJournalListBase">
            <summary>
            The Data Journal List is used to represent a collection of historical 
            process data values.  Each value contained by the Data Journal List
            contains a collection of data values for a specified time interval.  
            There are several options as to the exact nature of this collection 
            of data values, the data value collection may be raw values or values 
            process (calculated) according to the servers capabilities.
            </summary>
        </member>
        <member name="M:Xi.Server.Base.DataJournalListBase.#ctor(Xi.Server.Base.ContextBase{Xi.Server.Base.ListRoot},System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Xi.Contracts.Data.StandardMib)">
            <summary>
            This constructor is simply a pass through place holder.
            </summary>
            <param name="context"></param>
            <param name="clientId"></param>
            <param name="updateRate"></param>
            <param name="listType"></param>
            <param name="listKey"></param>
        </member>
        <member name="P:Xi.Server.Base.EventListValueBase.StatusCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Xi.Server.Base.EventListValueBase.ValueTransportTypeKey">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
