<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xi.Contracts</name>
    </assembly>
    <members>
        <member name="T:Xi.Contracts.XiFaultCodes">
            <summary>
            <para>This class defines standard Xi success and fault codes.
            Xi servers can report error to the client as:</para>
            <para>a)	Exceptions, if the handling of a request completely fails</para>
            <para>b)	Result codes. These are uint values that hold any HResult code.</para> 
            <para>c)	Status codes. These are used only in methods that return data values. </para>
            <para>	The uint status code merges OPC quality and a subset of HResult codes. </para>
            <para>	Additional error info can be passed in the associated ErrorInfo object.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.S_OK">
            <summary>
            This code indicates success.
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.S_FALSE">
            <summary>
            This code is used to indicate success with additional failure information;
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_NOTIMPL">
            <summary>
            This is the standard error code for not implemented.  
            It is used as both a result code and in exceptions 
            when a function is not implemented.
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_FAIL">
            <summary>
            This code indicates a general failure.  The error text 
            associated with this error code may be more 
            specific.
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_SEEERRORINFO">
            <summary>
            See the Error Info structure for information.
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_NOCONTEXT">
            <summary>
            This code indicates failure.
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_BADLISTID">
            <summary>
            This code indicates that an invalid list id was used.
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_ALIASNOTFOUND">
            <summary>
            No match was found for the server alias supplied.
            Alias value (client alias) is returned as the client alias.
            No translation to server alias is possible!
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_NOTFOUND">
            <summary>
            This code indicates that the requested object was not found.
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_LISTDISABLED">
            <summary>
            This code indicates that the requested operation could not be completed 
            because the list was in the disabled state.
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_BADARGUMENT">
            <summary>
            This code indicates that the request contained a bad parameter value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_INCONSISTENTUSEAGE">
            <summary>
            This code indicates an Inconsistent Usage.
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_INVALIDREQUEST">
            <summary>
            The requested action is invalid.
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_ENDPOINTERROR">
            <summary>
            The requested operation failed due to an Endpoint related error condition.
            </summary>
        </member>
        <member name="F:Xi.Contracts.XiFaultCodes.E_INCONSISTENT_TRANSPORTDATATYPE">
            <summary>
            The Transport Data Type is not valid or is inconsistent.
            </summary>
        </member>
        <member name="T:Xi.Contracts.XiFault">
            <summary>
            The fault that is returned by method failures.
            </summary>
        </member>
        <member name="M:Xi.Contracts.XiFault.#ctor(System.String)">
            <summary>
            This constructor creates a general failure XiFault that is described by 
            a specific error string.
            </summary>
            <param name="errorText">
            The error message associated with the error code.
            </param>
        </member>
        <member name="M:Xi.Contracts.XiFault.#ctor(System.Exception)">
            <summary>
            This constructor creates a general failure XiFault that is described by 
            an inner exception.
            </summary>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Xi.Contracts.XiFault.#ctor(System.UInt32,System.String)">
            <summary>
            This constructor creates an XiFault from a specific error code and  
            error string.
            </summary>
            <param name="errorCode">
            The error code.
            </param>
            <param name="message">
            The error string.
            </param>
        </member>
        <member name="P:Xi.Contracts.XiFault.ErrorCode">
            <summary>
            A server-specific error code value.  For wrapped COM servers, 
            it may contain a COM error code.
            </summary>
        </member>
        <member name="P:Xi.Contracts.XiFault.ErrorText">
            <summary>
            Optional text that describes the error. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ServerMibVersionId">
            <summary>
            <para>This class contains a constant that defines the InstanceId 
            for the Version number of Standard MIB object. This object 
            id allows the client to add this version number to a data list 
            and be notified via callbacks or polling when the state changes.</para>
            <para>If the server does not support adding this version number to 
            a list, then the E_NOTIMPLEMENTED error will be returned for the add.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerMibVersionId.ObjectId">
            <summary>
            The InstanceId of the Version number of Standard MIB object.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.MibElementIds">
            <summary>
            <para>This enum contains the element ids for each of the 
            StandardMib elements that can be included in the list of  
            ChangedMibElementIds.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.MethodsSupported">
            <summary>
            The identifier for the OptionalMethodsSupported MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.FeaturesSupported">
            <summary>
            The identifier for the OptionalFeaturesSupported MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.RecipientPassthroughs">
            <summary>
            The identifier for the RecipientPassthroughs MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.ObjectRoles">
            <summary>
            The identifier for the ObjectRoles MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.EventMessageFilters">
            <summary>
            The identifier for the EventMessageFilters MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.EventCategoryConfiguration">
            <summary>
            The identifier for the CategoryConfiguration MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.DataJournalFilters">
            <summary>
            The identifier for the DataJournalFilters MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.DataJournalOptions">
            <summary>
            The identifier for the DataJournalOptions MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.EventJournalMessageFilters">
            <summary>
            The identifier for the EventJournalMessageFilters MIB element.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.StandardMib">
            <summary>
            <para>This class defines the standard Management Objects of the 
            server.  Management objects in this class that are not supported 
            by the server are set to null.</para>  
            <para>Heritage: Management objects are defined by ISO 7498-4 
            Information processing systems -- Open Systems Interconnection 
            -- Basic Reference Model -- Part 4: Management framework.</para> 
            <para>Access to the Xi MIB is derived from the IETF RFC 1157 
            Simple Network Management Protocol Get-Request PDU.  
            (See the Xi GetStandardMib and GetVendorMib methods.</para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.ChangedMibElementIds">
            <summary>
            Ids of the standard MIB Elements that changed causing the  
            current version to be incremented.  Each time the Current 
            Version is updated, the ChangeFlags are cleared, and then 
            reset to identify the newly changed standard MIB Elements.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.MethodsSupported">
            <summary>
            The list of optional Xi Methods supported by the server.  
            This list may be different depending on the security access 
            restrictions placed on the context.  The Xi methods are 
            defined by the XiMethods enumeration.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.FeaturesSupported">
            <summary>
            The list of optional Xi Features supported by the server.  
            The Xi features are defined by the XiFeatures enumeration.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.EventMessageFilters">
            <summary>
            <para>Names of the event message fields that can be used for filtering.  
            Standard field names that can be used in filters are defined in the 
            FilterOperand class.</para> 
            <para>Names of non-standard event message fields that a server can include 
            in this list are defined in the EventMessageFields element for each 
            CategoryConfiguration contained in the EventCategoryConfigurations 
            StandardMib element. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.DataJournalFilters">
            <summary>
            <para>Names of the historical data properties that can be used for filtering.  
            Standard historical data properties that can be used in filters are defined 
            in the FilterOperand class.</para> 
            <para>Names of non-standard historical data properties that a server can 
            include in this list are contained in the DataJournalOptions StandardMib 
            element. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.EventJournalMessageFilters">
            <summary>
            <para>Names of the event message fields that can be used for filtering 
            historical alarms and events.  Standard field names that can be used in 
            filters are defined in the FilterOperand class.</para> 
            <para>The server may include the names of additional, non-standard 
            event message fields in this list. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.VendorMibObjects">
            <summary>
            The identities and descriptions of Vendor objects included 
            in the MIB.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StandardMib.CurrentVersion">
            <summary>
            The current version of the standard MIB. Each time a MIB 
            element changes, the version number of the MIB is incremented.  
            The InstanceId of the Current Version of the MIB is 
            "Xi:MIB/CurrentVersion".  Clients may add the Current 
            Version to a List to detect MIB Changes.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StandardMib.RecipientPassthroughsList">
            <summary>
            The list of Recipients and the Passthroughs that can be 
            sent to them.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StandardMib.ObjectRoles">
            <summary>
            The list of Object Roles supported by the server.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StandardMib.EventCategoryConfigurations">
            <summary>
            The configuration of the server's Event Categories.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StandardMib.DataJournalOptions">
            <summary>
            The Data Journal options supported by the server. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StandardMib.EventJournalCategoryConfiguration">
            <summary>
            The configuration of the Event Journal's Event Categories.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.EventId">
            <summary>
            This class is used in EventMessages to identify 
            the occurrence of an alarm/event.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventId.SourceId">
            <summary>
            The object that is the source of the alarm/event.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventId.MulitplexedAlarmContainer">
            <summary>
            The TypeId of the container for alarms with multiple conditions, 
            such as grouped or eclipsed alarms. The EventType enumeration defines 
            these types of alarms. 
            Null if the event is not a grouped or eclipsed alarm. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventId.Condition">
            <summary>
            <para>For system events, operator action events, simple alarms, 
            and complex alarms, the TypeId of the condition 
            that is being reported in the event message.</para>
            <para>For grouped or eclipsed alarms, the name of 
            one or more conditions that are active.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventId.OccurrenceId">
            <summary>
            A server-specific id that identifies an individual occurrence of the 
            alarm/event.  This identifier can be constructed by the server to meet 
            the server's needs fo ridentifying alarms.  For example, if the server 
            wraps an OPC AE server, the OccurrenceId may be constructed from the 
            ActiveTime and Cookie parameters of the IOPCEventServer::AckCondition() 
            method.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.TypeId">
            <summary>
            This class defines the identifier for data types and object types.  Each 
            element of the TypeId is case-sensitive.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeId.SchemaType">
            <summary>
            <para>This string identifies the type of the type definition 
            (the type of its schema).  Standard values are defined by the XiSchemaType 
            enumeration.</para>
            <para>For Data Types, the value XiSchemaType.Xi is used for 
            the standard .NET data types and those defined by the Xi contracts.</para>
            <para>The forward slash '/'character and the dot character, '.', 
            cannot be used in the SchemaType string.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeId.Namespace">
            <summary>
            <para>This member is used to identify the context for the 
            Identifier. The context defines which organization defined 
            the type and any additional qualifying information. For CLS 
            data types, the SchemaType is set to CLS and the namespace 
            is set to null.</para>
            <para>For example, data types for Fieldbus Foundation devices 
            are defined either by the Fieldbus Foundation or by device 
            manufacturers. When defined by the Fieldbus Foundation, the 
            Namespace would be composed of a single string 
            with a value of "FF", and if defined by a device manufacturer, 
            the path would be composed of the Manufacturer LocalId registered by 
            the Fieldbus Foundation, the device type, and the device revision. 
            If the type is an EDDL type, the EDD revision is also needed.</para>
            <para>Set to XiNamespace.Xi (null) for .NET defined data types.</para>
            <para>For types defined by the server vendor for use in multiple 
            Xi servers, the ServerDescription VendorName should be used as 
            the namespace.  </para>
            <para>The forward slash '/' character is not permitted to be used 
            within the namespace.  Instead, the dot '.' character should be used 
            to separate elements of the namespace.</para>
            <para>Following the example above, if the vendor defines the type 
            specifically for a given server, then the ServerDescription ServerName, 
            separated by a '.' should be appended after the vendor name. 
            (e.g. "MyVendor.MyServer").</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeId.LocalId">
            <summary>
            The string representation of the identifier for the type.  
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.TypeId.#ctor">
            <summary>
            The default constructor. 
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.TypeId.#ctor(System.Type)">
            <summary>
            Construct a Type LocalId given a .NET / CLI Type.
            </summary>
            <param name="id">
            The .NET / CLI Type for which the TypeId is being constructed.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.TypeId.#ctor(System.String,System.String,System.String)">
            <summary>
            This constructor initializes a new TypeId object.
            </summary>
            <param name="schemaType">
            The SchemaType.
            </param>
            <param name="nameSpace">
            The Namespace.
            </param>
            <param name="id">
            The LocalId.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.TypeId.Compare(Xi.Contracts.Data.TypeId)">
            <summary>
            This method compares this TypeId with a TypeId passed-in as a parameter.
            </summary>
            <param name="typeId">
            The TypeId to compare against this TypeId.
            </param>
            <returns>
            True if the two TypeIds are the same, and false if not.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.TypeId.ToString">
            <summary>
            <para>This method converts a type id to a string. The string form of the TypeId 
            closely resembles a URL, containing a resource type prefix, a namespace qualifier, 
            and the identifier with the exception that the namespace qualifier and the local 
            identifier are separated by the dot '.' character.</para>
            <para>  SchemaType:Namespace.Identifier</para>
            <para>If the SchemaType is present, it is terminated with the colon ':' character, 
            and followed by the Namespace. </para>
            <para>If the SchemaType is not present, the Namespace is the first element of the 
            string. </para>
            <para>If the Namespace is present, it is terminated with the dot '.' character, and 
            followed by the LocalId. </para>
            <para>If the Namespace is not present, the LocalId follows immediately. </para>
            <para>For example, if the type is the CLS Int32 type, the string representation would be 
            "System.Int32".</para>
            </summary>
            <returns>
            The resulting string.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.ORedFilters">
            <summary>
            This class defines a list of FilterCriterion that are logically ORed 
            together.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ORedFilters.FilterCriteria">
            <summary>
            The list of FilterCriterion that are to be ORed together.  If at least 
            one of the FilterCriterion results in TRUE, then the results for the 
            list are TRUE.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ORedFilters.CompareIdentical(Xi.Contracts.Data.ORedFilters)">
            <summary>
            <para>This method compares this ORedFilters against the filtersToCompare to determine 
            if they are identical. Identical ORedFilters are are those with the same number of 
            identical FilterCriterion that are in the same order. </para>
            <para>identical FilterCriterion are are those with the same operand, operator, and 
            comparison value.</para>
            </summary>
            <param name="filtersToCompare">
            The FilterSet to compare against this FilterSet.
            </param>
            <returns>
            Returns TRUE if the FilterSets are identical. Otherwise returns FALSE.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.DataValueArrays">
            <summary>
            <para>This class contains three sets of arrays that are used to 
            transfer data values.  Each set is composed of an array of values, an 
            array of status codes, and an array of timestamps. Each set is 
            differentiated by the data type of the values that it holds.</para>
            <para>This class also contains a list of ErrorInfo. This list contains 
            error information as a result of:</para>
            <para>(1) a server alias not being found in the server.</para>
            <para>(2) an additional HRESULT associated with a value that the 
            server wishes to return.</para>
            <para>(1) text descriptions of errors (error messages) when requested by 
            the client when Initiating or Reinitiating the Context using the 
            EnableErrorInfo ContextOptions.  Error Messages are not permitted if 
            this option is not set.</para>
            <para>This approach was developed to optimize data transfers:</para>
            <para> - The value array in the first set is defined as an array 64-bit 
            floating point values. </para>  
            <para> - The value array in the second set is defined as an array 64-bit 
            integers. </para>  
            <para> - The value array in the third set is defined as an array of objects.
            It is used to transfer all other data types. </para>  
            <para>This class also contains optional error information to allow servers to 
            include an additional error code with a specific status code, and/or to also 
            provide a text description of the error. The additional error code can be 
            included by the server as desirec, while the error description is only used 
            when the Context is opened with ContextOptions set to DebugErrorMessages, 
            and must be null otherwise.  ContextOptions is set using the Initiate() 
            and ReInitiate() methods.</para>
            <para>The AdditionalDetailDesc property of the StatusCode FlagsByte, when 
            set to 7, is used to specify the existence of an additional error code. 
            Normally, the value of this field will be the facility code of an HRESULTor a 
            value that indicates that the AdditionalDetail property of the XiStatusCode 
            contains a server-specifc value. (see the XiStatusCode definition for more 
            detail.</para>
            <para>For any given value in an array of values, the associated status, 
            timestamp, and error message are located at the same index in their 
            respective arrays. For example, for the fourth value in a Value array, the 
            status, timestamp, and error message are the fourth entries in their 
            respective arrays.</para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor creates a DataValuesArrays object with arrays of the 
            specified sizes.  All entries in each array are set to their initial 
            values.
            </summary>
            <param name="doubleArraySize">
            The size of the arrays associated with double values.
            </param>
            <param name="uintArraySize">
            The size of the arrays associated with long values.
            </param>
            <param name="objectArraySize">
            The size of the arrays associated with object values.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.#ctor(System.UInt32[]@,System.DateTime[]@,System.Double[]@,System.UInt32[]@,System.DateTime[]@,System.UInt32[]@,System.UInt32[]@,System.DateTime[]@,System.Object[]@)">
            <summary>
            This constructor creates a DataValuesArrays object from existing arrays 
            passed in as parameters.
            </summary>
            <param name="doubleStatusCodes">
            The status code array for double values.
            </param>
            <param name="doubleTimeStamps">
            The timestamp array for double values.
            </param>
            <param name="doubleValues">
            The array of double values.
            </param>
            <param name="uintStatusCodes">
            The status code array for long values.
            </param>
            <param name="uintTimeStamps">
            The timestamp array for long values.
            </param>
            <param name="uintValues">
            The array of uint values.
            </param>
            <param name="objectStatusCodes">
            The status code array for object values.
            </param>
            <param name="objectTimeStamps">
            The timestamp array for object values.
            </param>
            <param name="objectValues">
            The array of object values.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.Clear">
            <summary>
            This method clears the DataValuesArrays object by setting each 
            of its arrays and its ErrorInfo list to null.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.SetDouble(System.Int32,System.UInt32,System.DateTime,System.Double)">
            <summary>
            This method sets a double value, its status code, and its timestamp 
            for a given index in the DataValuesArrays object.
            </summary>
            <param name="idx">
            The index of the double value, status code, and timestamp in each of 
            the corresponding arrays.
            </param>
            <param name="statusCode">
            The status code of the value.
            </param>
            <param name="timeStamp">
            The timestamp of the value.</param>
            <param name="value">
            The double value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.SetUint(System.Int32,System.UInt32,System.DateTime,System.UInt32)">
            <summary>
            This method sets a long value, its status code, and its timestamp 
            for a given index in the DataValuesArrays object.
            </summary>
            <param name="idx">
            The index of the long value, status code, and timestamp in each of 
            the corresponding arrays.
            </param>
            <param name="statusCode">
            The status code of the value.
            </param>
            <param name="timeStamp">
            The timestamp of the value.
            </param>
            <param name="value">
            The long value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.SetObject(System.Int32,System.UInt32,System.DateTime,System.Object)">
            <summary>
            This method sets an object value, its status code, and its timestamp 
            for a given index in the DataValuesArrays object.
            </summary>
            <param name="idx">
            The index of the object value, status code, and timestamp in each of 
            the corresponding arrays.
            </param>
            <param name="statusCode">
            The status code of the value.
            </param>
            <param name="timeStamp">
            The timestamp of the value.
            </param>
            <param name="value">
            The object value.
            </param>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArrays.DoubleStatusCodes">
            <summary>
            The array of status codes. Status code values are defined by 
            the XiStatusCode class.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArrays.DoubleTimeStamps">
            <summary>
            The array of timestamps.  All timestamps are UTC.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArrays.DoubleValues">
            <summary>
            The array of values. 
            Used to transfer single and double floating point values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArrays.UintStatusCodes">
            <summary>
            The array of status codes. Status code values are defined by 
            the XiStatusCode class.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArrays.UintTimeStamps">
            <summary>
            The array of timestamps.  All timestamps are UTC.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArrays.UintValues">
            <summary>
            The array of integer values.
            Used to transfer byte, sbyte, short, ushort, int and uint values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArrays.ObjectStatusCodes">
            <summary>
            The array of status codes. Status code values are defined by 
            the XiStatusCode class.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArrays.ObjectTimeStamps">
            <summary>
            The array of timestamps.  All timestamps are UTC.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArrays.ObjectValues">
            <summary>
            The array of values.
            Used to transfer type that do not conform to the integer or float values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArrays.ErrorInfo">
            <summary>
            <para>The error message to be returned when the Context has been 
            opened with ContextOptions set to DebugErrorMessages. This list is 
            always null if the Context was not opened with ContextOptions set 
            to DebugErrorMessages.</para>
            <para>When ContextOptions is set to DebugErrorMessages, the server 
            can provide an error message that provides additional information about 
            bad values.  If additional error information is not provided for any 
            values, then the list is set to null.</para>
            </summary>
        </member>
        <member name="T:Xi.Contracts.IWrite">
            <summary>
            This interface is composed of methods used to write/update 
            data, alarms, and events and their histories.
            </summary>
        </member>
        <member name="M:Xi.Contracts.IWrite.WriteValues(System.String,System.UInt32,Xi.Contracts.Data.WriteValueArrays)">
            <summary>
            <para>This method is used to write the values of one or more 
            data objects in a list.</para>
            <para>Heritage: The method corresponds to the ISO 9506 
            Manufacturing Messaging Specification (MMS) Write service.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects to be read.
            </param>
            <param name="writeValueArrays">
            The server aliases and values of the data objects to write.
            </param>
            <returns>
            The list server aliases and result codes for the data objects whose 
            write failed. Returns null if all writes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IWrite.WriteVST(System.String,System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            This method is used to write the data value, status, and 
            timestamp for one or more data objects.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list that contains the data objects 
            to be written.</param>
            <param name="writeValueArrays">
            The list of values to be written. For performance purposes, this list 
            is represented by typed parallel arrays for the server alias, value,
            timestamp, and status. See the definition of DataValueArraysWithAlias 
            for more information.
            </param>
            <returns>
            The list of error results.  Only values that could not be written are 
            included in this list.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IWrite.WriteJournalData(System.String,System.UInt32,Xi.Contracts.Data.ModificationType,Xi.Contracts.Data.WriteJournalValues[])">
            <summary>
            <para>This method is used to modify historical data values.  
            The modification type parameter indicates the type of 
            modification to perform.  </para>
            <para>Heritage: This method is adapted from the WriteJournal 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS).</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list that contains the data objects 
            to be written.
            </param>
            <param name="modificationType">
            Indicates the type of modification to perform.  
            </param>
            <param name="valuesToWrite">
            The array of historical values to write.  Each is identified 
            by its list id, its server alias, and its timestamp.
            </param>
            <returns>
            The list of identifiers and error codes for each data object 
            whose write failed. Returns null if all writes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IWrite.WriteJournalEvents(System.String,System.UInt32,Xi.Contracts.Data.ModificationType,Xi.Contracts.Data.EventMessage[])">
            <summary>
            <para>This method is used to modify historical alarms and/or 
            events. The modification type parameter indicates the type of 
            modification to perform.  </para>
            <para>Heritage: This method is adapted from the WriteJournal 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS).</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list that contains the alarms and/or 
            events to be written.
            </param>
            <param name="modificationType">
            Indicates the type of modification to perform.  
            </param>
            <param name="eventsToWrite">
            The list of historical alarms and/or events to write.  Each 
            is identified by its EventId contained in the EventMessage.
            </param>
            <returns>
            The list server aliases and result codes for the alarms and/or 
            events whose write failed. Returns null if all writes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IWrite.AcknowledgeAlarms(System.String,System.UInt32,System.String,System.String,System.Collections.Generic.List{Xi.Contracts.Data.EventId})">
            <summary>
            <para>This method is used to acknowledge one or more alarms.</para>
            <para>Heritage: This method is adapted from the 
            AcknowledgeEventNotification service defined by the ISO 9506 
            Manufacturing Messaging Specification (MMS).</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list that contains the alarms to be 
            acknowledged.
            </param>
            <param name="operatorName">
            The name or other identifier of the operator who is acknowledging 
            the alarm.
            </param>
            <param name="comment">
            An optional comment submitted by the operator to accompany the 
            acknowledgement.
            </param>
            <param name="alarmsToAck">
            The list of alarms to acknowledge.
            </param>
            <returns>
            The list EventIds and result codes for the alarms whose 
            acknowledgement failed. Returns null if all acknowledgements 
            succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IWrite.Passthrough(System.String,System.String,System.Int32,System.String,System.Byte[])">
            <summary>
            This method allows the client to send a message to the server that 
            the server delivers unmodified to the intended recipient.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="recipientId">
            The recipient identifier. The list of recipients is contained in 
            the RecipientPassthroughs MIB element.   
            </param>
            <param name="invokeId">
            A client-defined integer identifier for this invocation of the passthrough.  When
            used with asynchronous passthroughs, the server returns the invokeId with the response.  
            </param>
            <param name="passthroughName">
            The name of the passthrough message. The list of passthroughs for a recipient 
            is contained in the RecipientPassthroughs MIB element.   
            </param>
            <param name="DataToSend">
            The Data To Send is just an array of bytes.  No interpretation of the data 
            is made by the Xi server.  This byte array is forwarded unaltered to the 
            underlying system.  It is up to the client application to format this byte 
            array in a valid format for the underlying system.
            </param>
            <returns>
            The Passthrough Result returns a Result value and a byte array as 
            returned from the underlying system.  It is up to the client 
            application to interpret this byte array.  If the passthrough returns its 
            response asynchronously, the result code in the response indicates whether 
            the passthrough was invoked. The results of asynchronous passthroughs are 
            returned via the callback or poll interface.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.WriteValueArrays">
            <summary>
            This class is used to transfer the server-assigned alias of 
            a data object and its value.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.WriteValueArrays.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor initializes a WriteValueList object with empty  
            lists of server aliases and object values.
            </summary>
            <param name="doubleArraySize">
            The size of the arrays associated with double values.
            </param>
            <param name="uintArraySize">
            The size of the arrays associated with long values.
            </param>
            <param name="objectArraySize">
            The size of the arrays associated with object values.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.WriteValueArrays.SetDouble(System.Int32,System.UInt32,System.Double)">
            <summary>
            This method adds a double value to a WriteValueList
            </summary>
            <param name="idx">
            The array index of the value to be added.  The same index 
            is used to add the server alias to associated server alias array.
            </param>
            <param name="serverAlias">
            The server-alias of the value.
            </param>
            <param name="value">
            The double value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.WriteValueArrays.SetUint(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            This method adds a long value to a WriteValueList
            </summary>
            <param name="idx">
            The array index of the value to be added.  The same index 
            is used to add the server alias to associated server alias array.
            </param>
            <param name="serverAlias">
            The server-alias of the value.
            </param>
            <param name="value">
            The long value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.WriteValueArrays.SetObject(System.Int32,System.UInt32,System.Object)">
            <summary>
            This method adds an object value to a WriteValueList
            </summary>
            <param name="idx">
            The array index of the value to be added.  The same index 
            is used to add the server alias to associated server alias array.
            </param>
            <param name="serverAlias">
            The server-alias of the value.
            </param>
            <param name="value">
            The object value.
            </param>
        </member>
        <member name="P:Xi.Contracts.Data.WriteValueArrays.DoubleServerAlias">
            <summary>
            The array of server-assigned aliases of the double values to be written.
            The size and order of this array matches the size and order of the 
            DoubleValues array.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteValueArrays.UintServerAlias">
            <summary>
            The array of server-assigned aliases of the uint values to be written.
            The size and order of this array matches the size and order of the 
            UintValues array.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteValueArrays.ObjectServerAlias">
            <summary>
            The array of server-assigned aliases of the object values to be written.
            The size and order of this array matches the size and order of the 
            ObjectValues array.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteValueArrays.DoubleValues">
            <summary>
            The array of double values to be written.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteValueArrays.UintValues">
            <summary>
            The array of integer values to be written.
            Used to transfer byte, sbyte, short, ushort, int and uint values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteValueArrays.ObjectValues">
            <summary>
            The array of object values to be written.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.EventMessage">
            <summary>
            <para>This class defines the Event Messages that are used to 
            report the occurrence of an event or alarm.</para> 
            <para>Heritage:  The concepts for alarms and events accessible 
            through this interface are defined in EEMUA Publication 191 
            "Alarm Systems: A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            <para>The EventMessage is derived from the EventNotification 
            Protocol Data Unit (PDU) defined by ISO 9506 Manufacturing 
            Message Specification (MMS).  The MMS EventNotification PDU 
            is sent to the MMS client using the MMS EventNotification 
            service.</para>  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.OccurrenceTime">
            <summary>
            The time of the event/alarm occurrence.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.EventType">
            <summary>
            The type of the event/alarm that is being reported by this 
            event message.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.EventId">
            <summary>
            The identifier for the event/alarm occurrence.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.TextMessage">
            <summary>
            Text that describes the event occurrence.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.CategoryId">
            <summary>
            The category to which the event is assigned.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.Priority">
            <summary>
            The priority of the event.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.OperatorName">
            <summary>
            <para>For event messages that report operator action events, 
            the name of the operator who caused an operator action event 
            to be generated.</para>
            <para>For event messages that report the acknowledgement of 
            an alarm, the name of the operator who acknowledged the 
            alarm.</para>
            <para>Null for all other event messages.</para>  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.AlarmData">
            <summary>
            Data to be included in the event message for alarms.  Null 
            if the event message is not reporting an alarm.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.ClientRequestedFields">
            <summary>
            The fields selected by the client to be included in Event Messages 
            for the indicated Event Category.  The fields that can be selected 
            by the client to be returned in Event Messages for a given Category 
            are specified in the EventCategories member of the Event Capabilities 
            MIB Element.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EventMessage.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data contract 
            class by recording versioning information about it.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AlarmState">
            <summary>
            <para>The state of the Alarm.</para> 
            <para>The alarm states accessible through this interface 
            are defined in EEMUA Publication 191 "Alarm Systems: 
            A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmState.Initial">
            <summary>
            The default value of 0 is the starting state, 
            which is inactive (cleared), acknowledged, enabled, 
            and unsuppressed.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmState.Disabled">
            <summary>
            The generation/detection of the alarm is disabled 
            even though the base condition may be active.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmState.Active">
            <summary>
            The Alarm has been detected and its condition 
            continues to persist. This state is also referred 
            to as "raised" or "standing".
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmState.Unacked">
            <summary>
            The Alarm has not been acknowledged.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmState.Suppressed">
            <summary>
            Automatic generation/detection of the alarm is 
            disabled, even though the base condition may be active.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AlarmDescription">
            <summary>
            <para>This class is used to provide the description 
            of an alarm.</para>  
            <para>The concepts for alarms and events accessible through 
            this interface are defined in EEMUA Publication 191 "Alarm 
            Systems: A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            <para>EEMUA Publication 191 describes alarms as "signals which 
            are annunciated to the operator, typically by an audible sound, 
            some form of visual indication, using flashing, and by the 
            presentation of a message or some other identifier."</para>  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmDescription.MultiplexedAlarmContainer">
            <summary>
            The namespace qualified name of the container for alarms with 
            multiple conditions, such as grouped or eclipsed alarms. .  
            Null if the alarm is not a grouped or eclipsed alarm. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmDescription.AlarmConditionNames">
            <summary>
            The namespace qualified name of the alarm condition.  
            Examples include HI_HI, HI, LO, and LO_LO.  If the alarm 
            is a simple alarm, then this list contains a single 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AlarmDescription.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.IResourceManagement">
            <summary>
            <para>This interface is composed of methods used to:</para>
            <para>- initiate a context with the server, </para>
            <para>- read the server's MIB, </para>
            <para>- discover objects, alarms, and events supported by the server, </para>
            <para>- create lists within the server of selected objects, alarms, or 
            events, and</para> 
            <para>- create read and write endpoints and add one or more lists to them. </para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.Initiate(System.String,System.String,System.UInt32@,System.UInt32@,System.UInt32@,System.String@)">
            <summary>
            <para>This method is used to establish a context between 
            the client and the server.  The server must authenticate 
            the client when this method is called.</para> 
            <para>Once created, the context is capable of multiplexing 
            concurrent WCF connections to Xi endpoints.  In some  
            cases, there may be more than one instance of the Read 
            or Write endpoints (see the OpenEndpoint() method 
            for more information about endpoints. </para>  
            <para>If the WCF connection to the Resource Management 
            Endpoint is inadvertanatly disconnected, the client can 
            prevent the context from timing-out and automatically 
            closing by calling the ReInitiateContext() method.</para>
            <para>Heritage: This method corresponds to the Initiate 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS) that is used to open an MMS environment 
            between the client and server.</para> 
            <para>The term "context" is taken from IEC 61158 IEC 
            61158-5-9: Digital data communications for measurement 
            and control — Fieldbus for use in industrial control 
            systems — Part 5-9: Application layer service definition 
            — Type 9 elements.  This specification derives its context 
            object from the MMS Enviroment.</para> 
            </summary>
            <param name="applicationName">
            The name of the client application.  
            </param>
            <param name="workstationName">
            The name of the workstation on which the client application 
            is running.  
            </param>
            <param name="localeId">
            The localeId to be used for the context. If the requested context 
            is not supported by the server, the server will return its default 
            context. 
            </param>
            <param name="contextTimeout">
            The context timeout is expressed in milliseconds.  The requested 
            timeout value can be negotiated up or down by the server. The 
            negotiated value is returned to the client.  A request value of 
            zero causes the server to use its default timeout.
            </param>
            <param name="contextOptions">
            This parameter enables various debug and tracing options used to 
            aide in diagnosing issues. see ContextOptions enum for the 
            valid values.
            </param>
            <param name="reInitiateKey">
            A server-specific string that is to be supplied by the client in the 
            ReInitiate() method call. This parameter is used to prevent interloping 
            clients from re-initiating a context using only the context id that was 
            obtained through observing message sent to unencrypted Xi endpoints.  
            The reinitiate key value returned to the client by this method is 
            server-specific.   
            </param>
            <returns>
            The server generated context id.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.ReInitiate(System.String,System.UInt32@,System.String@)">
            <summary>
            <para>This method is used to reinitate an existing context 
            after a failure of the underlying WCF connection.  The 
            server must reauthenticate the client when this method is 
            called.</para> 
            </summary>
            <param name="existingContextId">
            The context identifier of the existing context to reinitate. 
            </param>
            <param name="contextOptions">
            This parameter enables various  options for the context that may 
            be used, for example, to aide in diagnosing issues. This value 
            may be different than that used in the previous initiation/reinitiation 
            of the context.  See ContextOptions enum for the valid values.
            </param>
            <param name="reInitiateKey">
            A server-specific string that was returned to the client in the last 
            Initiate() or ReInitiate() method call that was used for the context.
            This parameter is used to prevent interloping clients from re-initiating 
            a context using only the context id that was obtained through observing 
            message sent to unencrypted Xi endpoints.  The reinitiate key value 
            returned to the client by this method is server-specific. 
            </param>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.Conclude(System.String)">
            <summary>
            This method is used to close a context. When the context 
            is closed, all resources/endpoints associated with the  
            context are released.
            <para>Heritage: This method corresponds to the Conclude 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS) that is used to close the MMS 
            environment between the client and server.</para> 
            </summary>
            <param name="contextId">
            The context identifier of the context to close. 
            </param>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.ClientKeepAlive(System.String)">
            <summary>
            To prevent a client – server context from timing out it 
            is necessary to invoke a method that requires a Context LocalId 
            within the timeout interval.  This method provides a very 
            low overhead method to keep a context alive when a client 
            has no other actions to perform.  A common situation may be 
            where the client has setup ICallback to monitor data values.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.Identify(System.String)">
            <summary>
            <para>This method is used to get the description of the 
            server.  This method can be called before a context has 
            been established with the server.</para>
            <para>Heritage: This method corresponds to the Identify 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS).</para> 
            </summary>
            <param name="contextId">
            The optional context identifier. This call can be issued 
            without first having established a client context.  
            However, the ServerDetails element of the ServerDescription 
            is not returned unless this parameter is present.
            </param>
            <returns>
            The description of the server. 
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.Status(System.String)">
            <summary>
            <para>This method is used to get the state of the server, and 
            the state of any wrapped servers.  The client can also register 
            for changes in the ServerState by adding it to a data object 
            list.  See the Xi.Contracts.Constants.InstanceIds.ServerStateId 
            class for the definition of the Object LocalId of the ServerState 
            object.</para>
            <para>Heritage: This method corresponds to the Status 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS).</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <returns>
            The status of the Xi server and the status of wrapped servers. 
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.LookupResultCodes(System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method returns text descriptions of error codes.</para>  
            <para>Heritage: This method corresponds to the Microsoft 
            errlook.exe utility.</para>
            </summary>
            <param name="contextId">
            The context identifier. 
            </param>
            <param name="resultCodes">
            The result codes for which text descriptions are being requested.
            </param>
            <returns>
            The list of result codes and if a result code indicates success, 
            the requested text descriptions. The size and order of this 
            list matches the size and order of the resultCodes parameter.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.FindObjects(System.String,Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            <para>This method is used to find objects in the server.  The 
            client uses the findCriteria parameter to identify a starting 
            branch and a set of filter criteria.  It also specifies the 
            maximum number of objects to return.  </para> 
            <para>The server examines the objects that are children of the 
            specified branch and selects those that match the filter criteria.
            Note that "children" are objects whose root paths can be created 
            by appending their names to the path used to identify the starting  
            branch.</para>  
            <para>The object attributes of the selected objects are 
            returned to the client. The number returned is limited by the 
            number specified in the numberToReturn parameter.  If the number 
            returned is less than than that number, then the client can 
            safely assume that the server has no more to return.</para>  
            <para>However, if the number returned is equal to that number, 
            then the client can retrieve the next set of results by issuing 
            another FindObjects() call with the findCriteria parameter set to 
            null. A null findCriteria indicates to the server to continue 
            returning results from those remaining in the list.  The client 
            eventually detects the end of the list by receiving a response 
            that returns less than specified by the numberToReturn parameter.</para>
            <para>Heritage:  This method is based on the List service 
            of the ISO 9594-1 Information technology -- Open Systems 
            Interconnection -- The Directory: Overview of concepts, models 
            and services.  ISO 9594 also defines the object hierarchy model 
            that is used by the server.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="findCriteria">
            The criteria used by the server to find objects.  If this 
            parameter is null, then this call is a continuation of the 
            previous find.
            </param>
            <param name="numberToReturn">
            The maximum number of objects to return in a single response.
            </param>
            <returns>
            <para>The list of object attributes for the objects that met 
            the filter criteria. </para>  
            <para>Returns null if the starting object is a leaf, or no objects 
            were found that meet the filter criteria, or if the call was made 
            with a null findCriteria and there are no more objects to return.</para>
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.FindTypes(System.String,Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            <para>This method is used to find type definitions in the server.  The 
            client uses the findCriteria parameter to identify a starting 
            branch and a set of filter criteria.  It also specifies the 
            maximum number of types to return.  </para> 
            <para>The server examines the types that are children of the 
            specified branch and selects those that match the filter criteria.
            Note that "children" are types whose root paths can be created 
            by appending their names to the path used to identify the starting  
            branch.</para>  
            <para>The type attributes attributes of the selected types are 
            returned to the client. The number returned is limited by the 
            number specified in the numberToReturn parameter.  If the number 
            returned is less than than that number, then the client can 
            safely assume that the server has no more to return.</para>  
            <para>However, if the number returned is equal to that number, 
            then the client can retrieve the next set of results by issuing 
            another FindTypes() call with the findCriteria parameter set to 
            null.</para> 
            <para>A null findCriteria indicates to the server to continue 
            returning results from those remaining in the list.  The client 
            eventually detects the end of the list by receiving a response 
            that returns less than specified by the numberToReturn parameter.</para>
            <para>Heritage: This method is derived from the 
            GetNamedTypeAttributes service defined by the ISO 9506 
            Manufacturing Messaging Specification (MMS).  It has been 
            adapted to also apply to both Data Types and Object Types.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="findCriteria">
            The criteria used by the server to find types.  If this 
            parameter is null, then this call is a continuation of the 
            previous find.
            </param>
            <param name="numberToReturn">
            The maximum number of objects to return in a single response.
            </param>
            <returns>
            <para>The list of type attributes for the type that met 
            the filter criteria. </para>  
            <para>Returns null if the starting type is a leaf, or no types 
            were found that meet the filter criteria, or if the call was made 
            with a null findCriteria and there are no more types to return.</para>
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.FindRootPaths(System.String,Xi.Contracts.Data.ObjectPath)">
            <summary>
            <para>Each discoverable object in the server has at least 
            one path to the root (called the root path).  A root path 
            is represented by an ordered list of object names beginning 
            with "Root" and ending with the name of the object.</para>
            <para>This method identifies an object by one of its root 
            paths and requests the server to return any additional root 
            paths that exist.  If there are no other root paths that can 
            be used to reach the object, then null is returned.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="objectPath">
            The root path that identifies the object for which alternate 
            root paths are being requested. 
            </param>
            <returns>
            The list of additional root paths to the specified object.  
            Null if specified objectPath is the only root path to the 
            object. An exception is thrown if the specified objectPath is 
            invalid.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.GetStandardMib(System.String)">
            <summary>
            <para>This method is used to read the standard MIB.</para>  
            <para>Heritage: This method corresponds to the IETF RFC 1157 
            Simple Network Management Protocol Get-Request PDU, with the 
            exception that there is only one standard MIB object, so a 
            list of MIB Object Ids is not required.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <returns>
            The standard MIB is returned.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.GetVendorMib(System.String,System.Collections.Generic.List{Xi.Contracts.Data.InstanceId})">
            <summary>
            <para>This method is used to read the vendor-specific MIB objects.</para>  
            <para>Heritage: This method corresponds to the IETF RFC 1157 
            Simple Network Management Protocol Get-Request PDU.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="vendorMibObjectIds">
            The list of identifiers for the vendor MIB objects to be returned.
            </param>
            <returns>
            The requested vendor-specific MIB objects.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.OpenEndpoint(System.String,System.String,System.String)">
            <summary>
            <para>This method opens an endpoint that can be used to 
            access one or more lists.  Each newly opened endpoint is 
            assigned its own unique identifier.  It may be that the 
            server supports only one endpoint of each type (e.g. Read). 
            In this case a second attempt to open a Read endpoint will 
            succeed and the EndpointId of the already opened Read 
            endpoint will be returned.  </para>
            <para>Heritage: Endpoints represent Application Service 
            Elements (ASEs) defined for the Application Layer by ISO 
            7498-1 Information technology -- Open Systems Interconnection 
            -- Basic Reference Model: The Basic Model.  They are 
            implemented by Microsoft Windows Communication Foundation 
            (WCF) endpoints.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="endpointInterfaceType">
            The type of the endpoint as specified by the interface that it 
            supports.  Standard values are defined by the Standard values 
            are defined in the Xi.Contracts.Constants.EndpointInterfaceType 
            enumeration, with the exception that IResourceManagement and 
            IServerDiscovery cannot be created.
            </param>
            <param name="bindingName">
            <para>The type of the binding (WSHttpBinding, NetTcpBinding, etc.) 
            as defined in the config.app file.  For standard bindings,
            this is the endpoint binding attribute:</para>
            <para>  endpoint binding="wsHttpBinding"  </para>
            <para>For custom bindings, this is the name attribute of the binding 
            element of the custom binding:</para>
            <para>  binding name="binaryHttpBinding"</para>
            </param>
            <returns>
            The definition of the endpoint.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.AddListToEndpoint(System.String,System.String,System.UInt32)">
            <summary>
            This method adds one or more lists to an endpoint.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="endpointId">
            A string value that uniquely identifies the endpoint (may be a GUID) 
            to which the list is to be added.
            </param>
            <param name="serverListId">
            The identifiers of the lists to add to the endpoint.
            </param>
            <returns>
            The list identifiers and result codes for the lists whose 
            add failed. Returns null if all adds succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.RemoveListsFromEndpoint(System.String,System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method removes one or more lists from an endpoint.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="endpointId">
            A string value that uniquely identifies the endpoint (may be a GUID) 
            from which the list is to be removed.
            </param>
            <param name="listIds">
            The identifiers of the lists to remove from the endpoint.
            </param>
            <returns>
            The list identifiers and result codes for the lists whose 
            removal failed. Returns null if all removals succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.CloseEndpoint(System.String,System.String)">
            <summary>
            This method closes an endpoint.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="endpointId">
            A string value the uniquely identified the endpoint (may be a GUID) to be deleted.
            </param>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.DefineList(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            <para>This method is used to create a list of data 
            objects or alarms/events within the context.  </para>
            <para>Heritage:  Data object lists correspond to Named 
            Variable Lists as defined by the ISO 9506 Manufacturing 
            Message Specification (MMS), with the exception that the 
            server provides the name of the list as an alias. </para>
            <para>Alarms/events correspond to Alarm Lists described in 
            EEMUA Publication 191 "Alarm Systems: A Guide to Design, 
            Management and Procurement".  See http://www.eemua.org </para>
            <para>They are implemented by the Microsoft .NET Framework List class.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="clientId">
            The Client LocalId for this list.  Used in callbacks to allow the 
            client to identify this list.
            </param>
            <param name="listType">
            Indicates the type of list to be created.
            Standard list types as defined by the ListAttributes class 
            are: 
            1) Data List, 
            2) History Data List, 
            3) Event List 
            4) History Event List
            </param>
            <param name="updateRate">
            The requested update rate in milliseconds for the list. The  
            update rate indicates how often the server updates the 
            values of elements in the list.  A value of 0 indicates 
            that updating is exception-based. The server may negotiate 
            this value, up or down as necessary to support its efficient 
            operation.
            </param>
            <param name="bufferingRate">
            <para>An optional-use parameter that indicates that the server is 
            to buffer data updates, rather than overwriting them, until either 
            the time span defined by the buffering rate expires or the values 
            are transmitted to the client in a callback or poll response. If 
            the time span expires, then the oldest value for a data object is 
            discarded when a new value is received from the underlying system.</para>
            <para>The value of the bufferingRate is set to 0 to indicate 
            that it is not to be used and that new values overwrite (replace) existing 
            cached values.  </para>
            <para>When used, this parameter contains the client-requested buffering 
            rate, which the server may negotiate up or down, or to 0 if the 
            server does not support the buffering rate. </para>
            <para>The FeaturesSupported member of the StandardMib is used to indicate 
            server support for the buffering rate.</para>
            </param>
            <param name="filterSet">
            The set of filters to be used to select the elements of the list.  
            </param>
            <returns>
            The attributes created for the list.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.GetListAttributes(System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method gets the attributes of a list.</para>
            <para>Heritage: This method is adapted from the 
            GetNamedVariableListAttributes service defined by the ISO 
            9506 Manufacturing Messaging Specification (MMS).  It has 
            been adapted to also apply to Event Lists.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listIds">
            The identifiers for the lists whose attributes are to be 
            retrieved.
            </param>
            <returns>
            The list of requested List Attributes. The size and order 
            of this list matches the size and order of the listAliases 
            parameter.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.RenewAliases(System.String,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.AliasUpdate})">
            <summary>
            This method is used to renew the aliases for a list.  Successful completion 
            of this method invalidates the previous server alias, but not the previous 
            client alias. However, the server begins using the new client alias at its 
            earliest opportunity and ceases using the previous client alias. This behavior 
            accommodates the race condition that may occur when this method is being processed 
            by the server concurrently with the publishing of data to the client.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list whose aliases are to be 
            updated.
            </param>
            <param name="newAliases">
            The list of aliases to be updated. Each AliasUpdate in the list 
            contains the existing server alias and new client alias for it.
            </param>
            <returns>
            The list of updated aliases. The size and order 
            of this list matches the size and order of the listAliases 
            parameter.  Each AliasResult in the list contains the new client 
            alias from the request and its corresponding new server alias assigned
            by the server.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.DeleteLists(System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method deletes a list.  It does not, however, 
            delete the elements of the list from the server.</para>
            <para>Heritage: This method is adapted from the 
            DeleteNamedVariableList service defined by the ISO 9506 
            Manufacturing Messaging Specification (MMS).  It has been 
            adapted to also apply to Event Lists.  </para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listIds">
            The identifiers for the lists to be deleted.
            </param>
            <returns>
            The list identifiers and result codes for the lists whose 
            deletion failed. Returns null if all deletes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.AddDataObjectsToList(System.String,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.ListInstanceId})">
            <summary>
            <para>This method is used to add objects to a list.  Objects 
            are added with updating of their values by the server 
            disabled. Updating of values by the server can be enabled 
            using the EnableListUpdating() method.</para>
            <para>Heritage: This method is derived from the Add method of 
            the more generic List class defined by the Microsoft .NET 
            Framework.</para>        
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list to which data objects are to be 
            added.
            </param>
            <param name="dataObjectsToAdd">
            The data objects to add.
            </param>
            <returns>
            The list of results. The size and order of this list matches 
            the size and order of the objectsToAdd parameter.   
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.RemoveDataObjectsFromList(System.String,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to remove members from a list.  
            It does not, however, delete the corresponding data object 
            from the server.</para>
            <para>Heritage: This method is derived from the Remove 
            method of the more generic List class defined by the 
            Microsoft .NET Framework.</para>        
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list from which data objects are 
            to be removed.
            </param>
            <param name="serverAliasesToDelete">
            The server aliases of the data objects to remove.
            </param>
            <returns>
            The list identifiers and result codes for data objects whose 
            removal failed. Returns null if all removals succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.ModifyListAttributes(System.String,System.UInt32,System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to change the filters of a list.  The 
            new filters replace the old filters if they exist.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list for which the filters are to 
            be changed.
            </param>
            <param name="updateRate">
            List update or scan rate.  The list will be modified to
            use this new rate.  Use GetListAttributes to obtain the
            current value of this parameter.
            </param>
            <param name="filterSet">
            The new set of filters.
            </param>
            <returns>
            The revised update rate and filter set.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.EnableListUpdating(System.String,System.UInt32,System.Boolean)">
             <summary>
             <para>This method can be used to enable or disable updating of an entire 
             list. When this method is called, the enabled state of the list is changed, 
             but the enabled state of the individual elements of the list is unchanged. </para>
             <para>When a list is disabled, the server excludes it from participating in 
             callbacks and polls. However, at the option of the server, the server may continue 
             updating its cache for the elements of the list.</para>
             </summary>
             <param name="contextId">
             The context identifier.
             </param>
             <param name="listId">
             The identifier for the list for which updating is to be 
             enabled or disabled.
            </param>
             <param name="enable">
             Indicates, when TRUE, that updating of the list is to be enabled,
             and when FALSE, that updating of the list is to be disabled.
             </param>
             <returns>
             The attributes of the list.
             </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.EnableListElementUpdating(System.String,System.UInt32,System.Boolean,System.Collections.Generic.List{System.UInt32})">
             <summary>
             <para>This method can be used to enable or disable updating of 
             individual elements of a list.  If the server aliases parameter is 
             null, then all elements of the list are enabled/disabled.  This call 
             does not change the enabled state of the list itself.</para>
             <para>When an element of the list is disabled, the server excludes it 
             from participating in callbacks and polls. However, at the option of the 
             server, the server may continue updating its cache for the element.</para>
             </summary>
             <param name="contextId">
             The context identifier.
             </param>
             <param name="listId">
             The identifier for the list for which updating is to be 
             enabled or disabled.
            </param>
             <param name="enableUpdating">
             Indicates, when TRUE, that updating of the list is to be enabled,
             and when FALSE, that updating of the list is to be disabled.
             </param>
             <param name="serverAliases">
             The list of aliases for data objects of a list for 
             which updating is to be enabled or disabled.
             When this value is null updating all elements of the list are to be 
             enabled/disabled. In this case, however, the enable/disable state 
             of the list itself is not changed.
             </param>
             <returns>
             <para>If the serverAliases parameter was null, returns 
             null if the server was able to successfully enable/disable 
             the list and all its elements.  If not, throws an exception 
             for event lists and for data lists, returns the client and server 
             aliases and result codes for the data objects that could not be 
             enabled/disabled.  </para> 
             <para>If the serverAliases parameter was not null, returns null 
             if the server was able to successfully enable/disable the data 
             objects identified by the serverAliases.  If not, returns the 
             client and server aliases and result codes for the data objects 
             that could not be enabled/disabled.</para> 
             </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.AddEventMessageFields(System.String,System.UInt32,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
             <summary>
             This method is used to request that category-specific fields be 
             included in event messages generated for alarms and events of 
             the category for the specified Event/Alarm List.
             </summary>
             <param name="contextId">
             The context identifier.
             </param>
             <param name="listId">
             The identifier for the list for which event message fields are being added. 
            </param>
             <param name="categoryId">
             The category for which event message fields are being added.
             </param>
             <param name="fieldObjectTypeIds">
             The list of category-specific fields to be included in the event 
             messages generated for alarms and events of the category.  Each field 
             is identified by its ObjectType LocalId obtained from the EventMessageFields 
             contained in the EventCategoryConfigurations Standard MIB element.
             </param>
             <returns>
             The ObjectTypeIds and result codes for the fields that could not be  
             added to the event message. Returns null if all succeeded.  
             </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.TouchDataObjects(System.String,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to cause one or more data objects of 
            a list to be "touched".  Data objects that are in the disabled 
            state (see the EnableListElementUpdating() method) are not 
            affected by this method.  This method cannot be used with 
            event lists.</para>
            <para>Touching an enabled data object causes the server to update 
            the data object, mark it as changed (even if their values did not change), 
            and then return it to the client in the next callback or poll.</para> 
            <para>Heritage:  The concept of touch is derived from the 
            POSIX (IEEE Std 1003.1-2008) touch utility that causes file 
            access and modification times to be changed, thus forcing 
            them to be included in the next compile.</para>  
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the lists whose data objects are to be touched.
            </param>
            <param name="serverAliases">
            The aliases for the data objects to touch.
            </param>
            <returns>
            The list of error codes for the data objects that could not be 
            touched.  See XiFaultCodes claass for standardized result codes. 
            Data objects that were successfully touched are not included in this 
            list.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.TouchList(System.String,System.UInt32)">
             <summary>
             <para>This method is used to cause a list to be "touched".</para> 
             <para>For lists that contain data objects, this method causes 
             the server to update all data objects in the list that are currently 
             enabled (see the EnableListElementUpdating() method), mark them 
             as changed (even if their values did not change), and then return 
             them all to the client in the next callback or poll. </para>  
             <para>For lists that contain events, this method causes 
             the server to mark all alarms/event in the list as changed, 
             and then return them all to the client in the next callback.</para>
             <para>Heritage:  The concept of touch is derived from 
             the POSIX (IEEE Std 1003.1-2008) touch utility that causes file 
             access and modification times to be changed, thus forcing them 
             to be included in the next compile.</para>  
             </summary>
             <param name="contextId">
             The context identifier.
             </param>
             <param name="listId">
             The identifier for the list to be touched.
            </param>
             <returns>
             The result code for the operation.  See XiFaultCodes claass for 
             standardized result codes. 
             </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.GetAlarmSummary(System.String,Xi.Contracts.Data.InstanceId)">
            <summary>
            <para>This method is used to request summary information for the 
            alarms that can be generated for a given event source.</para>
            <para>Heritage: This method is adapted from the GetAlarmSummary 
            service defined by ISO 9506 Manufacturing Message Specification.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="eventSourceId">
            The InstanceId for the event source for which alarm summaries are 
            being requested.
            </param>
            <returns>
            The summaries of the alarms that can be generated by the specified 
            event source.  
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.RecipientPassthroughs">
            <summary>
            This class defines the passthrough messages that 
            can be sent a given recipient.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.RecipientPassthroughs.RecipientId">
            <summary>
            The identifier of the recipient of one or more passthrough 
            messages.  The recipient represents the entity to which 
            the client sends the messages and that is responsible for 
            processing or otherwise consuming the message.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.RecipientPassthroughs.PassthroughMessages">
            <summary>
            The list of Passthough messages that can be sent to the 
            recipient.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.JournalDataValues">
            <summary>
            This class is used to return requested historical data values or 
            historical attribute values to the client.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.ResultCode">
            <summary>
            The Result Code being returned for the associated data 
            object identified by the ClientAlias and ServerAlias.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.ErrorInfo">
            <summary>
            The overall Error Info associated with this ResultCode,
            or null if there is no additional error information.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.ClientAlias">
            <summary>
            When used in a read context (returned from the server) 
            this is the Client Alias.  When used in a write context 
            (sent to the server) this is the Server Alias.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.Calculation">
            <summary>
            The calculation used to derive these Historical Values
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.StartTime">
            <summary>
            The servers start time for the response values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.EndTime">
            <summary>
            The servers end time for the response values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.HistoricalValues">
            <summary>
            The list of requested history values if the Result Code indicates success; otherwise null.
            </summary>
        </member>
        <member name="T:Xi.Contracts.IServerDiscovery">
            <summary>
            This interface is used to locate Xi servers on the network 
            and their Resource Management endpoints.  Servers that 
            implement this interface may apply access controls to limit 
            the servers a client may discover.  
            </summary>
        </member>
        <member name="M:Xi.Contracts.IServerDiscovery.DiscoverServers">
            <summary>
            This method returns the list of servers the client is 
            authorized to discover.
            </summary>
            <returns>
            List of server entries.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IServerDiscovery.DiscoverServerInfo">
            <summary>
            <para>This method is used to get the description of the 
            server.  It is intended to be used by Xi Directory Services 
            servers to identify an Xi server and obtain its list of 
            Mex endpoint names.</para>
            <para>Heritage: This method is derived from the Identify 
            service defined by the ISO 9506 Manufacturing Messaging 
            Specification (MMS).</para> 
            </summary>
            <returns>
            The description of the server. 
            </returns>
        </member>
        <member name="T:Xi.Contracts.ICallback">
            <summary>
            This interface is composed of methods to be implemented by the 
            client and called by the server to send data, alarms, and 
            events to the client.
            </summary>
        </member>
        <member name="M:Xi.Contracts.ICallback.Abort(System.String,System.String)">
            <summary>
            <para>This callback method is implemented by the client to 
            be notified when the server server state changes to Aborting.  
            Clients that use the poll interface instead of this callback 
            interface can add the ServerDescription object to a data 
            object list to be notified when the server state transitions   
            to the aborting state.</para> 
            <para>Heritage: The method corresponds to the ISO 9506 
            Manufacturing Messaging Specification (MMS) Abort service.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="reason">
            The reason the context is being closed.
            </param>
        </member>
        <member name="M:Xi.Contracts.ICallback.InformationReport(System.String,System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            <para>This callback method is implemented by the client 
            to receive data changes. </para> 
            <para> Servers send data changes to the client that have 
            not been reported to the client via this method.  
            Changes consists of:</para>
            <para>1) values for data objects that were added to the list,</para> 
            <para>2) values for data objects whose current values 
            have changed since the last time they were reported to the 
            client via this interface.  If a deadband filter has been 
            defined for the list, floating point values are not considered 
            to have changed unless they have changed by the deadband amount.</para>
            <para>3) historical values that meet the list filter criteria, 
            including the deadband.</para> 
            <para>Heritage: The method corresponds to the ISO 9506 
            Manufacturing Messaging Specification (MMS) Information 
            Report service.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list for which data changes are being 
            reported.
            </param>
            <param name="updatedValues">
            The values being reported.
            </param>
        </member>
        <member name="M:Xi.Contracts.ICallback.EventNotification(System.String,System.UInt32,Xi.Contracts.Data.EventMessage[])">
            <summary>
            <para>This callback method is implemented by the client to 
            receive alarms and events.</para> 
            <para> Servers send event messages to the client via this 
            interface.  Event messages are sent when there has been a 
            change to the specified event list. A new alarm or event 
            that has been added to the list, a change to an alarm already 
            in the list, or the deletion of an alarm from the list 
            constitutes a change to the list.</para>
            <para>Once an event has been reported from the list, it 
            is automatically deleted from the list.  Alarms are only 
            deleted from the list when they transition to inactive and 
            acknowledged.  </para>
            <para>Heritage: The method corresponds to the ISO 9506 
            Manufacturing Messaging Specification (MMS) Event Notification 
            service.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list for which alarms/events are being 
            reported.
            </param>
            <param name="eventList">
            The list of alarms/events are being reported.
            </param>
        </member>
        <member name="M:Xi.Contracts.ICallback.PassthroughCallback(System.String,System.Int32,Xi.Contracts.Data.PassthroughResult)">
            <summary>
            This method returns the results of invoking an asynchronous passthrough.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="invokeId">
            The identifier for this invocation of the passthrough defined by the client 
            in the request.  
            </param>
            <param name="passthroughResult">
            The result of executing the passthrough, consisting of the result code, the invokeId 
            supplied in the request, and a byte array.  It is up to the client application to 
            interpret this byte array.  
            </param>
        </member>
        <member name="T:Xi.Contracts.IRegisterForCallback">
            <summary>
            This interface is used to register for callbacks so that list updates are passed
            back asynchronously.
            </summary>
        </member>
        <member name="M:Xi.Contracts.IRegisterForCallback.SetCallback(System.String,System.UInt32,System.TimeSpan)">
            <summary>
            This method is invoked to allow the client to set or change the 
            keepAliveSkipCount and callbackRate. The first time this method is 
            invoked server obtains the callback interface from the client.  
            Therefore, this method must be called at least once for each 
            callback endpoint to enable the server to make the callbacks.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="keepAliveSkipCount">
            The client-requested keepAliveSkipCount that the server may negotiate up 
            or down. The keepAliveSkipCount indicates the number of consecutive 
            UpdateRate cycles for a list that occur with nothing to send before an empty 
            callback is sent to indicate a keep-alive message. For example, if the value 
            of this parameter is 1, then a keep-alive callback will be sent each UpdateRate 
            cycle for each list assigned to the callback for which there is nothing to send. 
            A value of 0 indicates that keep-alives are not to be sent for any list assigned 
            to the callback.
            </param>
            <param name="callbackRate">
            This parameter is used to establish the callback rate.
            </param>
            <returns>
            The results of the operation, including the negotiated keep-alive skip count and callback rate.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.InstanceId">
            <summary>
            <para>The InstanceId is a string that identifies an instance that 
            can be accessed through an Xi server.  The InstanceId closely resembles 
            a URL. It contains a resource type prefix, a system name/id qualifier 
            for the local identifier, and the local identifier itself. </para>
            <para>The resource type is terminated by a ':' that is followed by an 
            optional SystemId.  The local identifier follows and is always preceded and 
            terminated by a '/', producing an InstanceId of the form:</para>
            <para>"ResourceType:System/LocalId/" (SystemId is present), or</para>
            <para>"ResourceType:/LocalId/" (SystemId is NOT present), or</para>
            <para>The InstanceId may also contain an Element Identifier that can be used 
            to identify a specific element or range of elements of the identified object 
            (e.g. an element or series of elements of an array).  When present the 
            ElementId is always follows the LocalId forward slash ('/') terminator and may 
            not itself contain a forward slash. See the ElementId property description for 
            more detail.</para> 
            <para>Each of these elements of the InstanceId is defined as a 
            property of the InstanceId string. See the description of each 
            of these properties for more detail.</para>
            <para>The following are examples of valid InstanceIds:</para>
            <para>"DA:MySystem/MyObject/" - identifies a data object in MySystem.</para>
            <para>"DA:/MyObject/" - identifies a data object using only it local id.</para>
            <para>"MySystem/MyObject/" - identifies an object in MySystem.</para>
            <para>":MySystem/MyObject/" - identifies an object in MySystem.</para>
            <para>":MyPlant.MySystem/MyObject/" - identifies an object in MySystem that is in MyPlant.</para>
            <para>"/MyObject/" - identifies an object using only it local id.</para>
            <para>":/MyObject/" - identifies an object using only it local id.</para>
            <para>"//" - identifies the root within the server.</para>
            <para>"DA://" - identifies the root for data objects within the server.</para>
            <para>"DA:MySystem//" - identifies the root for data objects in MySystem.</para>
            <para>The following are examples of invalid InstanceIds:</para>
            <para>"D:MySystem/MyObject" - The ResourceType must be at least 2 characters and 
            MyObject should be terminated by '/'.</para>
            <para>"MyObject" - the LocalId must be preceded and terminated by a '/'</para>
            <para>":MyPlant/MySystem/MyObject/" - not invalid, but identifies an object 
            in MyPlant whose local id is "MySystem/MyObject.  It should be more 
            appropriately named ":MyPlant.MySystem/MyObject/"</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.InstanceId.RootId">
            <summary>
            The InstanceId.FullyQualifiedId string for the Root.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.InstanceId.FullyQualifiedId">
            <summary>
            <para>The complete instance identifier string composed of 
            the ResourceType, System, and LocalId.</para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.#ctor">
            <summary>
            This is the default constructor.  It creates an object 
            with a null identifier.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.#ctor(System.String)">
            <summary>
            This constructor creates an InstanceId for the local server 
            using a fully qualified identifier or a local id.
            </summary>
            <param name="theId">
            The local id or the fully qualified id.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.#ctor(System.String,System.String,System.String)">
            <summary>
            This constructor creates an InstanceId from an optional resource 
            type, an optional system and an identifier local to the system 
            that contains the instance. 
            </summary>
            <param name="resourceType">
            The ResourceType property. Null or empty if not used. If present,
            the constructor always inserts a '/' after the ResourceType during 
            construction of the FullyQualifiedId.
            </param>
            <param name="system">
            The System property. Null or empty if not used.
            </param>
            <param name="localId">
            The local id property. The constructor always inserts '/' before the 
            localId during construction of the FullyQualifiedId.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            This constructor creates an InstanceId from an optional resource 
            type, an optional system, an identifier local to the system 
            that contains the instance, and an element id that identifies a 
            specific element or range of elements. 
            </summary>
            <param name="resourceType">
            The ResourceType property. Null or empty if not used. If present,
            the constructor always inserts a '/' after the ResourceType during 
            construction of the FullyQualifiedId.
            </param>
            <param name="system">
            The System property. Null or empty if not used.
            </param>
            <param name="localId">
            The local id property. The constructor always inserts '/' before the 
            localId during construction of the FullyQualifiedId.
            </param>
            <param name="elementId">
            The local id property. The constructor always inserts '/' before the 
            localId during construction of the FullyQualifiedId.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.#ctor(Xi.Contracts.Data.InstanceId)">
            <summary>
            This constructor creates an InstanceId from another InstanceId.  
            </summary>
            <param name="instanceId">The instance id that is to be copied to 
            the InstanceId being created.</param>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.IsValid(Xi.Contracts.Data.InstanceId)">
            <summary>
            This static method checks the validity of an instance id.
            </summary>
            <param name="instanceId">
            The instance id to validate.
            </param>
            <returns>
            True if valid. False if not.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.IsValid">
            <summary>
            This method checks the validity of this instance id.
            </summary>
            <returns>
            True if valid. False if not.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.ToString">
            <summary>
            This override returns the LocalId as the string representation of the InstanceId.
            </summary>
            <returns>
            The string representation of the InstanceId.
            </returns>
        </member>
        <member name="P:Xi.Contracts.Data.InstanceId.ResourceType">
            <summary>
            <para>This optional property returns the portion of the InstanceId 
            between the beginning of the InstanceId and the first ':' character. 
            The standard ResourceTypes are defined by constants in this class.  
            The ResourceType must be at least two characters.</para>
            <para>These constants may be extended by the server by appending characters 
            (e.g. "DA1" and "DA2") to differentiate instances of the same ResourceType.  
            This is only necessary when the server wraps more than one underlying server 
            of the same ResourceType (e.g more than one OPC DA server). </para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.InstanceId.System">
            <summary>
            <para>This optional property returns the portion of the InstanceId 
            between the ResourceType and the LocalId. The ':' delimiter that 
            terminates the ResourceType and '/' delimiter that starts the LocalId 
            are not included in the System.  The System value is not permitted 
            to contain the '/' character. </para>
            <para>The System value is specific to the server, but it is recommended 
            that it identify the system that contains the instance.  If the system 
            name is qualified by one or more higher level names, such as the SiteName, 
            it is recommended that they be separated from each other by '.' characters. 
            E.g. "Site#1.System#3".</para>  
            <para>If all InstanceIds provided by server are contained within the same 
            system, the System property may be omitted from InstanceIds. In this case, the 
            system name is contained in the ServerDescription object accessible via 
            the Identify() method.</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.InstanceId.LocalId">
            <summary>
            This property returns the local id portion of the InstanceId.
            The local id identifies an instance within the identified system and site.
            It always follows the first '/' in the FullyQualifiedId.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.InstanceId.ElementId">
            <summary>
            <para>This property returns the element id portion of the InstanceId.
            The element id is a zero-based index that identifies an element 
            of an array or structure, or a list of elements. </para>
            <para>This property always follows the last '/' in the FullyQualifiedId.</para>
            <para>Each index is contained within square brackets (e.g. [6], or [4][5] 
            for a two-dimensional array. Servers are free to define other constructs 
            to identify elements. The only constraint is that the ElementId 
            cannot contain a forward slash ('/').</para>
            <para>If a range of indexes are to be specified, two indexes separated by 
            a hyphen ('-') are contained within a pair of square brackets (e.g. [3-6]).
            In this case, the order, ascending or descending is determined by which 
            index of the pair is higher. For example, [6-3] indicates a descending order 
            of indexes of 6, 5, 4, and 3.</para>
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ObjectRole">
            <summary>
            <para>This class is used by the server to define the roles 
            for objects that it supports. Roles can be assigned to 
            objects to allow them to be found using the FindObjects() 
            method.</para>  
            <para>Note that the role of an object may be relative 
            to another object or the role of an object may be independent 
            of its relationship with another object.  For example, a company 
            may be a customer (role) of one company, and a supplier (role) 
            of another.  Or the company may just have the role of 
            manufacturer.</para>
            <para>Two standard relationship independent roles are defined 
            for control systems, Area and EventSource.  Each is defined 
            using a constant.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectRole.RoleId">
            <summary>
            TypeId of the Role. Standard RoleIds are defined by the 
            Xi.Contracts.Constants.ObjectRoleId class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectRole.Name">
            <summary>
            TypeId of the Role. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectRole.Description">
            <summary>
            Description of the Role. 
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectRole.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectRole.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This constructor initializes an Object Role with the supplied namespace and 
            id of the role's InstanceId, and the name and description of the role.
            </summary>
            <param name="schemaType">
            The schemaType component of the role's TypeId.
            </param>
            <param name="roleNamespace">
            The namespace component of the role's TypeId.
            </param>
            <param name="roleId">
            The identifier for the role's TypeId.
            </param>
            <param name="name">
            The name of the role.
            </param>
            <param name="description">
            The text description of the role.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectRole.IsRole(Xi.Contracts.Data.TypeId[],Xi.Contracts.Data.TypeId)">
            <summary>
            Determines if the specified list of roles contains the specified role.
            </summary>
            <param name="roles">The list of roles.</param>
            <param name="role">The specified role.  </param>
            <returns>TRUE, if the specified role is in the list.
            Otherwise, FALSE.</returns>
        </member>
        <member name="T:Xi.Contracts.Data.MexEndpointInfo">
            <summary>
            This class defines the details of a MEX endpoint to give the
            client enough information to select an endpoint in case the
            server has multiple MEX endpoints and to access this MEX endpoint.
            The Binding details cannot be communicated and must be standardized.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.MexEndpointInfo.Description">
            <summary>
            The description of the endpoint.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.MexEndpointInfo.EndpointName">
            <summary>
            The names of the metaDataExchange endpoint.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.MexEndpointInfo.Url">
            <summary>
            The URL the client needs to use to access the endpoint.
            </summary>
        </member>
        <member name="T:Xi.Contracts.IPoll">
            <summary>
            This interface is composed of methods called by the client to 
            poll the server for data, alarms, and events.
            </summary>
        </member>
        <member name="M:Xi.Contracts.IPoll.PollDataChanges(System.String,System.UInt32)">
            <summary>
            <para>This method is used to poll the endpoint for changes 
            to a specific data list.</para>    
            <para>Changes consists of:</para>
            <para>1) values for data objects that were added to the list,</para> 
            <para>2) values for data objects whose current values 
            have changed since the last time they were reported to the 
            client via this interface.  If a deadband filter has been 
            defined for the list, floating point values are not considered 
            to have changed unless they have changed by the deadband amount.</para>
            <para>3) historical values that meet the list filter criteria, 
            including the deadband.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list whose changes are to be returned 
            (reported).
            </param>
            <returns>
            The list of changed values.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IPoll.PollEventChanges(System.String,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to poll the endpoint for changes to a 
            specific event list.  Event messages are sent when there 
            has been a change to the specified event list. A new alarm 
            or event that has been added to the list, a change to an 
            alarm already in the list, or the deletion of an alarm from 
            the list constitutes a change to the list.
            <para>Once an event has been reported from the list, it 
            is automatically deleted from the list.  Alarms are only 
            deleted from the list when they transition to inactive and 
            acknowledged.  </para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list whose changes are to be returned 
            (reported).
            </param>
            <param name="filterSet">
            Optional set of filters to further refine the selection from 
            the alarms and events in the list. The event list itself is 
            created using a filter.
            </param>
            <returns>
            The list of new alarm/event messages, changes to alarm messages 
            that are already in the list, and deletions of alarm messages 
            from the list.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IPoll.PollPassthroughResponses(System.String)">
            <summary>
            This method returns the results of invoking one or more asynchronous passthrough 
            requests.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <returns>
            The results of executing the passthroughs. Each result in the list consists of the 
            result code, the invokeId supplied in the request, and a byte array.  It is up to the 
            client application to interpret this byte array.  
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.ServerState">
            <summary>
            This enumeration defines the standard server state values.
            The ServerState enumeration is represented by a standard 
            object in the server that can be added to a data object list. 
            This allows the client to be notified when the server state 
            changes.  The ServerStateId class defines the InstanceId for  
            the ServerState object.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.Operational">
            <summary>
            The server is operational - this is the normal running state for a server
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.Diagnostics">
            <summary>
            The server is running, but in diagonstics mode.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.Initializing">
            <summary>
            The server is not operational because it is starting up.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.Faulted">
            <summary>
            The server is not operational due to a fault.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.NeedsConfiguration">
            <summary>
            The server is not operational because it has not been configured.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.OutOfService">
            <summary>
            The server is not operational because it has been taken out 
            of service.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.NotConnected">
            <summary>
            The server is not operational because it is not connected to 
            its underlying system/devices.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.Aborting">
            <summary>
            The server is operational but it is shutting down and aborting 
            all of its client contexts.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.NotOperational">
            <summary>
            The server is not operational, but the reason is not known.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.DataValueArraysWithAlias">
            <summary>
            This class is a subclass of DataValueArrays and adds the aliases 
            for the inherited values, statuses, timestamps.  Three arrays of 
            aliases are defined by this class, one associated with double values, 
            one associated with long values, and one associated with object values.  
            The index used for given alias is the same as that used for its value, 
            status, and timestamp in the appropriate array set (double, long, object). 
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor creates a DataValueArraysWithAlias object 
            with empty arrays of the specified sizes.
            </summary>
            <param name="doubleArraySize">
            The size of the alias, value, status, and timestamp arrays for 
            double values.
            </param>
            <param name="uintArraySize">
            The size of the alias, value, status, and timestamp arrays for 
            uint values.
            </param>
            <param name="objectArraySize">
            The size of the alias, value, status, and timestamp arrays for 
            object values.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.#ctor(System.UInt32[]@,System.UInt32[]@,System.DateTime[]@,System.Double[]@,System.UInt32[]@,System.UInt32[]@,System.DateTime[]@,System.UInt32[]@,System.UInt32[]@,System.UInt32[]@,System.DateTime[]@,System.Object[]@)">
            <summary>
            This constructor creates a DataValueArraysWithAlias object 
            from a set of arrays.
            </summary>
            <param name="doubleAliases">
            The array of aliases for double values.
            </param>
            <param name="doubleStatusCodes">
            The array of status codes for double values.
            </param>
            <param name="doubleTimeStamps">
            The array of timestamps for double values.
            </param>
            <param name="doubleValues">
            The array of double values.
            </param>
            <param name="uintClientAliases">
            The array of aliases for uint values.
            </param>
            <param name="uintStatusCodes">
            The array of status codes for uint values.
            </param>
            <param name="uintTimeStamps">
            The array of timestamps for uint values.
            </param>
            <param name="uintValues">
            The array of uint values.
            </param>
            <param name="objectClientAliases">
            The array of aliases for object values.
            </param>
            <param name="objectStatusCodes">
            The array of status codes for object values.
            </param>
            <param name="objectTimeStamps">
            The array of timestamps for object values.
            </param>
            <param name="objectValues">
            The array of object values.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.Clear">
            <summary>
            This method sets the arrays of this object to null.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.SetDouble(System.Int32,System.UInt32,System.UInt32,System.DateTime,System.Double)">
            <summary>
            This method sets a double value and its associated alias, status, 
            timestamp in the appropriate arrays.
            </summary>
            <param name="idx">
            The index of the array entries to be updated.
            </param>
            <param name="clientAlias">
            The client alias of the value.
            </param>
            <param name="statusCode">
            The status of the value.
            </param>
            <param name="timeStamp">
            The timestamp of the value.
            </param>
            <param name="value">
            The double value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.SetUint(System.Int32,System.UInt32,System.UInt32,System.DateTime,System.UInt32)">
            <summary>
            This method sets a long value and its associated alias, status, 
            timestamp in the appropriate arrays.
            </summary>
            <param name="idx">
            The index of the array entries to be updated.
            </param>
            <param name="clientAlias">
            The client alias of the value.
            </param>
            <param name="statusCode">
            The status of the value.
            </param>
            <param name="timeStamp">
            The timestamp of the value.
            </param>
            <param name="value">
            The long value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.SetObject(System.Int32,System.UInt32,System.UInt32,System.DateTime,System.Object)">
            <summary>
            This method sets an object value and its associated alias, status, 
            timestamp in the appropriate arrays.
            </summary>
            <param name="idx">
            The index of the array entries to be updated.
            </param>
            <param name="clientAlias">
            The client alias of the value.
            </param>
            <param name="statusCode">
            The status of the value.
            </param>
            <param name="timeStamp">
            The timestamp of the value.
            </param>
            <param name="value">
            The object value.
            </param>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArraysWithAlias.DoubleAlias">
            <summary>
            When used in a read context (returned from the server) 
            this is the Client Alias.  When used in a write context 
            (sent to the server) this is the Server Alias.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArraysWithAlias.UintAlias">
            <summary>
            When used in a read context (returned from the server) 
            this is the Client Alias.  When used in a write context 
            (sent to the server) this is the Server Alias.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataValueArraysWithAlias.ObjectAlias">
            <summary>
            When used in a read context (returned from the server) 
            this is the Client Alias.  When used in a write context 
            (sent to the server) this is the Server Alias.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.TypeIdResult">
            <summary>
            This class is used to return an error code and the 
            identifier of the entity for which the requested 
            operation failed.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.TypeIdResult.#ctor(System.UInt32,Xi.Contracts.Data.TypeId)">
            <summary>
            This constructor initializes the ResultCode and the TypeId based 
            on the corresponding input parameters.
            </summary>
            <param name="resultCode">
            The ResultCode to be set.
            </param>
            <param name="id">
            The TypeId to be set.</param>
        </member>
        <member name="P:Xi.Contracts.Data.TypeIdResult.ResultCode">
            <summary>
            The Error Code being returned.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.TypeIdResult.Id">
            <summary>
            The TypeId of the entity associated with the error result. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.SetCallbackResult">
            <summary>
            This class is used to return a result code along with 
            the negotiated KeepAliveSkipCount.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.SetCallbackResult.#ctor(System.UInt32,System.UInt32,System.TimeSpan)">
            <summary>
            This constructor creates a SetCallbackResult from a result code, 
            a keepAliveSkipCount, and a callbackRate.
            </summary>
            <param name="result">
            The result code.
            </param>
            <param name="keepAliveSkipCount">
            The KeepAliveSkipCount.
            </param>
            <param name="callbackRate">
            The callback rate.
            </param>
        </member>
        <member name="P:Xi.Contracts.Data.SetCallbackResult.Result">
            <summary>
            The Result Code being returned.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.SetCallbackResult.KeepAliveSkipCount">
            <summary>
            The server-negotiated number of consecutive UpdateRate cycles for a list 
            that occur with nothing to send before an empty callback is sent to indicate 
            a keep-alive message. For example, if the value of this parameter is 1, then 
            a keep-alive callback will be sent each UpdateRate cycle for each list assigned 
            to the callback for which there is nothing to send. A value of 0 indicates that 
            keep-alives are not to be sent for any list assigned to the callback.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.SetCallbackResult.CallbackRate">
            <summary>
            The time interval between callback by the server.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ObjectPath">
            <summary>
            The path to a specific object or type. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectPath.Elements">
            <summary>
            <para>The path to an object (or type), either from the root or from another 
            object (or type).  The first element in the list is always an InstanceId string 
            or a TypeId string.  The InstanceId or TypeId for the root is "//".</para>
            <para>The remaining elements are object/type names (the Name member of the 
            ObjectAttributes or TypeAttributes class). Clients may construct this portion 
            of the path using the names of objects/types returned by the server in FindObjects() 
            or FindTypes() calls.  </para>
            <para>The last element in the list is always the name of an object/type, and 
            the intervening elements represent the names of objects/types (or branches) between 
            the root and the object/type identified by last element.</para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectPath.#ctor(System.Boolean)">
            <summary>
            This constructor creates an object path with a root element.
            </summary>
            <param name="rootPath">
            Indicates, when TRUE, that the path is to be a root path that 
            starts with the root element.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectPath.#ctor(Xi.Contracts.Data.ObjectPath)">
            <summary>
            This constructor creates a copy of an existing path.
            </summary>
            <param name="path">
            The existing path to copy to the new path.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectPath.#ctor(System.String,System.String)">
            <summary>
            This constructor creates an object path from a starting InstanceId 
            or TypeId string and a '/' delimited string of object/type names.
            </summary>
            <param name="startingIdString">
            The starting InstanceId.FullyQualifiedId or the TypeId string obtained 
            using the TypeId.ToString() method.
            </param>
            <param name="stringPath">
            The '/' delimited string of object/type names.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectPath.ToString">
            <summary>
            This method converts an object path to a string, using '/' characters to delimit 
            elements of the path.
            </summary>
            <returns>
            A string of '/' delimited path elements.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectPath.Clear">
            <summary>
            This method sets the list of elements to null.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectPath.IsEqualToOrChildOf(Xi.Contracts.Data.ObjectPath,Xi.Contracts.Data.ObjectPath)">
            <summary>
            This method compares two paths and determines if the first path is 
            equal to or a parent of the second path. 
            </summary>
            <param name="firstPath">
            The first path in the comparison.
            </param>
            <param name="secondPath">
            The second path in the comparison.
            </param>
            <returns>
            The results of the comparison. 0 if the first path is equal to 
            the second path and 1 if the second path is the parent of the 
            first path. -1 if neither.
            </returns>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectPath.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ObjectAttributeFlags">
            <summary>
            <para>The boolean attributes of an object.</para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.IsReadable">
            <summary>
            Indicates, when TRUE, that the object can be read.  
            The value is FALSE if the object is not a data object.
            IsReadable is nullable to allow it to be set to null when 
            the server does not know whether or not the object is readable.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.IsWritable">
            <summary>
            Indicates, when TRUE, that the object can be written.  
            The value is FALSE if the object is not a data object.  
            IsWritable is nullable to allow it to be set to null when 
            the server does not know whether or not the object is writable.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.IsLeaf">
            <summary>
            Indicates, when TRUE, that this object is not permitted to have 
            children in the tree.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.IsCollectingHistory">
            <summary>
            Indicates, when TRUE, that the object is currently 
            collecting historical values.  This attribute applies to 
            data objects and to objects that are Event Sources (for 
            event/alarm collection)
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.IsDataList">
            <summary>
            Indicates, when TRUE, that this object is a data list.  The members of 
            the list are leaves of this object.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.IsEventList">
            <summary>
            Indicates, when TRUE, that this object is an event list.  Event list 
            objects must have a leaf item beneath them of type FilterSet that 
            defines (selects) the members of the list.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AliasAndCalculation">
            <summary>
            This class contains the changed historical data values for a specific data object.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AliasAndCalculation.ServerAlias">
            <summary>
            The server alias that identifies a data object in the data journal. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AliasAndCalculation.Calculation">
            <summary>
            The calculation to perform on the historical values of the specified data object. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AlarmSummary">
            <summary>
            <para>This class defines summary information of an alarm.</para>
            <para>Heritage: The concepts for alarms and events accessible 
            through this interface are defined in EEMUA Publication 191 "Alarm 
            Systems: A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            <para>EEMUA Publication 191 describes alarms as "signals which 
            are annunciated to the operator, typically by an audible sound, 
            some form of visual indication, using flashing, and by the 
            presentation of a message or some other identifier."</para>  
            <para>The alarm summary class is derived from the alarm summary 
            data returned by the GetAlarmSummary service defined by ISO 9506 
            Manufacturing Message Specification</para>  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.EventType">
            <summary>
            The type of the alarm. Only Event Types associated with alarms 
            are permissable.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.Name">
            <summary>
            For simple alarms, the name of the condition.
            For eclipsed and grouped alarms, the MulitplexedAlarmContainer name 
            (see the EventId and AlarmDescription classes).
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.State">
            <summary>
            The current state of the alarm.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.AlarmStateStatusCode">
            <summary>
            The status code associated with the data object used to detect 
            an occurrence of the alarm (e.g. the status of the PV parameter).
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.MostRecentActiveCondition">
            <summary>
            <para>The name of the most recent condition to become active.  
            Null if no conditions are active.</para>  
            <para>For Grouped and Eclipsed Alarms, the most recent condition 
            to become active may change while the alarm is active. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.TimeMostRecentConditionActive">
            <summary>
            <para>The time that the most recent condition became active.  
            Null if no conditions are active.</para>  
            <para>For Grouped and Eclipsed Alarms, the most recent condition 
            to become active may change while the alarm is active.  Since this 
            represents the most recent condition to become active, this is the 
            time that should be specified when acknowledging the alarm. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.TimeAlarmLastActive">
            <summary>
            The time that the alarm last transitioned to the active state.  
            This time is independent of the current state of the alarm.  
            Null if the alarm has never been active. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.TimeAlarmLastInactive">
            <summary>
            The time that the alarm last transitioned to the inactive state.  
            This time is independent of the current state of the alarm.  Null 
            if the alarm has never been active and transitioned to inactive. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.TimeLastAck">
            <summary>
            The time that the alarm last transitioned to the acknowledged state.  
            This time is independent of the current state of the alarm.  Null if 
            the alarm has never transitioned to the acknowledged state. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.AcknowledgingOperator">
            <summary>
            The name or other system-specific identifier of the operator 
            that last acknowledged the alarm. Null if the alarm was never
            acknowledged.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.OperatorLastAckComment">
            <summary>
            The operator comment that accompanied the last acknowledgement.  
            Null if the alarm was never acknowledged.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.ActiveConditions">
            <summary>
            The names of the active conditions of the alarm. 
            Null if no conditions are active.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.Conditions">
            <summary>
            The list of conditions defined for the alarm and 
            their active state.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.ServerData">
            <summary>
            Server-specific information about the alarm.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AlarmSummary.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data contract 
            class by recording versioning information about it.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ServerDescription">
            <summary>
            This class contains descriptive information about the 
            server.   
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.ServerTypes">
            <summary>
            The server types supported by this server. Standard types are defined 
            by the ServerType class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.VendorName">
            <summary>
            <para>Name of the server software vendor.  </para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.VendorNamespace">
            <summary>
            <para>Namespace for types defined by this vendor.  This may or 
            may not be the same as the VendorName.  Null or empty if not used.</para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.ServerName">
            <summary>
            <para>Name of the server software.</para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.ServerNamespace">
            <summary>
            <para>Namespace for server-specific types. Null or empty if not used.</para> 
            <para>This name is typically a concatentation of the VendorNamespace 
            and the ServerName (separated by a '/' character) 
            (e.g "MyVendorNamespace/MyServer").</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.HostName">
            <summary>
            <para>The HostName of the machine in which the server resides (runs).  The 
            HostName is used as part of the object path in InstanceIds of the 
            server's objects.</para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.ServiceName">
            <summary>
            <para>The name of the WCF service provided by the server. </para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.SystemName">
            <summary>
            <para>The name of the system that contains the objects accessible 
            through the server.  Null or empty if the server provides access 
            to objects from more than one system. </para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.InstanceIdSystemProperties">
            <summary>
            The list of InstanceId System property values supported by the server. 
            See the description of InstanceId for the description of valid values. 
            May be null if the server provides access to only one system.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.SecurityTokenServiceUrl">
            <summary>
            The URL for the Security Token Service. Null if the Security 
            Token Service is not present.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.SupportedLocaleIds">
            <summary>
            Supported locale ids (the native language is first entry)
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.ServerDetails">
            <summary>
            Detailed information about the server.
            Set to null if the ServerDescription is being 
            accessed without a client context.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ServerDescription.ServerDiscoveryUrl">
            <summary>
            The URL used to access the server's IServerDiscoveryEndpoint.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.JournalDataPropertyValue">
            <summary>
            This class contains the results of attmepting to access a set of historized 
            property values for a given data object.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataPropertyValue.ResultCode">
            <summary>
            The result code associated with accessing the property.  
            See XiFaultCodes claass for standardized result codes. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataPropertyValue.ClientAlias">
            <summary>
            The client-assigned alias for the historized data object.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataPropertyValue.PropertyId">
            <summary>
            The id of the property being accessed.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataPropertyValue.PropertyValues">
            <summary>
            An optional list of history properties of the historized data object.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ModifyListAttrsResult">
            <summary>
            This class is used to return the revised update rate and filter set.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModifyListAttrsResult.RevisedUpdateRate">
            <summary>
            The Revised Update Rate.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModifyListAttrsResult.RevisedFilterSet">
            <summary>
            The list of FilterCriterion results. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.FilterSet">
            <summary>
            <para>This class is used to define the set of filters used by the server to 
            find objects.  The filter set is composed of a list of ORedFilters that 
            are logically ANDed together.  That is, to result in a value of TRUE, 
            each ORedFilters element in the list must result in TRUE.</para>
            <para>The boolean Not member is provided to allow DeMorgan's Theorem to be 
            used to convert an ORed expression of type:</para>
            <para>"((A AND B) OR (C AND D))" to 
            <para>"!((!A OR !B) AND (!C OR !D))",</para> 
            <para>where '!' represents "NOT".</para>
            </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.FilterSet.Not">
            <summary>
            Set to TRUE to negate the resuls of the Filters parameter.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.FilterSet.Filters">
            <summary>
            <para>The list of ORedFilters. Each element of the list contains its own list 
            of filters that are logically ORed together, and each element must resolve to 
            TRUE for this list of ORed filters to result in TRUE. That is, the elements of 
            this list are ANDed together, while the elements of each of the ORedFilters 
            are ORed together.</para>
            <para>For example, the expression "((A OR B) AND (C OR D))" would be represented 
            by setting "Not" to false and a "Filters" list containing two ORedFilters, one 
            that contains "(A OR B)", and one that contains "(C OR D)". </para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.FilterSet.CompareIdentical(Xi.Contracts.Data.FilterSet)">
            <summary>
            <para>This method compares this FilterSet against the setToCompare to determine 
            if they are identical. Identical FilterSets are those with the same number of 
            ORedFilters that are identical and in the same order.  </para>
            <para>Identical ORedFilters are are those with the same number of FilterCriterion 
            that are identical and in the same order. </para>
            </summary>
            <param name="setToCompare">
            The FilterSet to compare against this FilterSet.
            </param>
            <returns>
            Returns TRUE if the FilterSets are identical. Otherwise returns FALSE.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.EventMessageField">
            <summary>
            This class is used to identify a non-standard event message field.  
            Each field is identified by the client alias and its object id. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessageField.Name">
            <summary>
            The name of the event message field.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessageField.ClientAlias">
            <summary>
            The context-wide client alias for the non-standard event message field.  
            This alias is used to identify each field in list of ClientRequestedFields 
            contained in an EventMessage.  
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.EventMessageField.#ctor(System.String,System.UInt32)">
            <summary>
            This constructor initializes the EventMessageField with the 
            name and client alias.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="clientAlias">
            The client supplied alias for the field.
            </param>
        </member>
        <member name="P:Xi.Contracts.Data.EventMessageField.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data contract 
            class by recording versioning information about it.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ObjectAttributes">
            <summary>
            This class is used to return the attributes of an object.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.Name">
            <summary>
            This string provides the display name.  Names are not permitted 
            to contain the forward slash ('/') character.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.Description">
            <summary>
            This string provides the description of the object.  Null if unknown.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.ObjectFlags">
            <summary>
            This unsigned integer contains a set of bit flags, each of which 
            defines some boolean aspect of the object.  The ObjectAttributeFlags 
            enumeration defines values for this object attribute.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.InstanceId">
            <summary>
            <para>The identifier for the object instance.</para>
            <para>If the object is a data object that can be added to 
            a list, this is the identifier used for that purpose. </para>
            <para>This identifier is not used for the ObjectAttributes 
            of members of types (see the MemberPath element of TypeAttributes). </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.ObjectTypeId">
            <summary>
            <para>The identifier of the object type.  Setpoint, Process 
            Variable, and PID Block are all examples of object types.</para>  
            <para>Null if the object type is unknown.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.DataTypeId">
            <summary>
            The data type of a data object.  Null if the object is not a 
            data object.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.ListDimensions">
            <summary>
            <para>The number of elements in this list specifies 
            the number of dimensions of a List object. The value 
            of each entry in this list specifies the maximum number 
            of elements in each dimension. A value of zero indicates 
            that there is no maximum.</para>
            <para>Null if this object is not a list.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.FastestScanRate">
            <summary>
            The fastest the server can collect values from the 
            underlying system for the object (in milliseconds).  
            The value 0 indicates that there is no maximum rate, 
            or that the maximum is unknown.  Null if unused. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.Roles">
            <summary>
            The list of roles defined for this Xi object. 
            See the ObjectRole class for more information about roles.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.IsReadable">
            <summary>
            This property represents the IsReadable bit in the ObjectFlags data member.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.IsWritable">
            <summary>
            This property represents the IsWritable bit in the ObjectFlags data member.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.IsLeaf">
            <summary>
            This property represents the IsLeaf bit in the ObjectFlags data member.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.IsCollectingHistory">
            <summary>
            This property represents the IsCollectingHistory bit in the ObjectFlags data member.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.IsDataList">
            <summary>
            This property represents the IsDataList bit in the ObjectFlags data member.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.IsEventList">
            <summary>
            This property represents the IsEventList bit in the ObjectFlags data member.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.RequestedString">
            <summary>
            This class defines the results of attempting to retrieve 
            a string.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.RequestedString.ResultCode">
            <summary>
            The Result Code associated with retrieving the string.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.RequestedString.String">
            <summary>
            The requested string.  If the ResultCode for this string 
            indicates failure, this string is null.   
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.RequestedString.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.FilterCriterion">
            <summary>
            This class represents a single filter criterion in terms of an expression, 
            in which the operand is compared against a value using a comparison operator.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.FilterCriterion.CompareIdentical(Xi.Contracts.Data.FilterCriterion)">
            <summary>
            This method compares this FilterCriterion against the filterToCompare 
            to determine if they are identical. Identical FilterCriterion are are those 
            with the same operand, operator, and comparison value.
            </summary>
            <param name="filterToCompare">
            The FilterCriterion to compare against this FilterCriterion.
            </param>
            <returns>
            Returns TRUE if the FilterCriterion are identical. Otherwise returns FALSE.
            </returns>
        </member>
        <member name="P:Xi.Contracts.Data.FilterCriterion.OperandName">
            <summary>
            The name of the operand. Standard operand names are defined by the 
            FilterOperand class.  Non-standard operands and the data types for 
            their values are defined in the Standard MIB by the Event Message Fields 
            and History Properties supported by the server.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.FilterCriterion.Operator">
            <summary>
            The name of the operator. Standard operators are defined by the 
            FilterOperator enumeration.  Operator values between 0 and 
            UInt16.MaxValue are reserved.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.FilterCriterion.ComparisonValue">
            <summary>
            The comparison value.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.FindCriteria">
            <summary>
            This class is used to define the criteria used by the server to 
            find objects or types.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.FindCriteria.StartingPath">
            <summary>
            <para>Identifies the position in the object/type hierarchy from which 
            this FindObjects or FindTypes request will begin. This path is specified 
            as an ordered list of object/type names that begins with either the 
            root or with a specific object/type.  Paths that begin with the root are 
            considered to be "Root Paths" and those that begin with an object/type are 
            considered to be "Relative Paths".</para>
            <para> For Root Paths, the first element of the path is an InstanceId string 
            whose LocalId is empty (e.g. DA:/".  For Relative Paths, the first element of 
            the path is set to the InstanceId string of the object used as the base of 
            the path.</para>
            <para>Null or empty paths indicate that the find is to begin at the root.</para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.FindCriteria.FilterSet">
            <summary>
            <para>The FilterSet to be used to find objects. </para>
            <para>The default behavior for filtering is to look for both branches and 
            leaves, and therefore, the BranchOrLeaf filter operand is to select only branches 
            or only leaves.</para>  
            <para>The default behavior for filtering is to look only for objects that are 
            children of the StartingPath.  Therefore, two filter operands are defined to allow 
            the client to modify this behavior. The StartingObjectAttributes filter operand 
            allows the client to request that object attributes of the object 
            identified by the StartingPath also be selected and returned.  The 
            StartingObjectAttributesOnly filter operand, on the other hand, allows the client 
            to request that object attributes of only the object identified by the StartingPath 
            be selected and returned (the object attributes of the children are not returned).</para>  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.DataJournalWriteResult">
            <summary>
            Result from a data journal write request
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataJournalWriteResult.ResultCode">
            <summary>
            Result code for the corresponding WriteJournalValues entry.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataJournalWriteResult.ListAlias">
            <summary>
            List alias
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataJournalWriteResult.ServerDataAlias">
            <summary>
            Server data alias
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ParameterDefinition">
            <summary>
            This class is used to define parameters, fields, and properties.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ParameterDefinition.Name">
            <summary>
            The display name of the parameter, field, or property.  Names 
            are not permitted to contain the forward slash ('/') character.  
            This name is used as the FilterOperand in FilterCriterion.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ParameterDefinition.Description">
            <summary>
            The optional description of the parameter, field, or property.  
            Null if unused.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ParameterDefinition.ObjectTypeId">
            <summary>
            The object type of the parameter, field, or property.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ParameterDefinition.DataTypeId">
            <summary>
            The data type of the parameter, field, or property.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ParameterDefinition.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.JournalDataChangedValues">
            <summary>
            This class contains the changed historical data values for a specific data object.
            <para>NOTE: The HistoricalValues parameter is null for this type!</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.ResultCode">
            <summary>
            Result Code for the corresponding server alias / client alias.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.ClientAlias">
            <summary>
            The client-assigned alias for a data object.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.Calculation">
            <summary>
            The calculation used to derive these Historical Values
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.StartTime">
            <summary>
            The servers start time for the response values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.EndTime">
            <summary>
            The servers end time for the response values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.ErrorInfo">
            <summary>
            The overall Error Info for this Journal Data Value
            or null if there is no additional error information.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.ModificationAttributes">
            <summary>
            The attributes that describe the changes to the HistoricalValues element of 
            the JournalDataReturnValues base class. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.EndpointConfiguration">
            <summary>
            <para>This class is used pass endpoint/binding configuration settings to the client
            that are not contained in the meatadata.</para>
            <para>This client can use this data to as default settings that mach the server setting.
            The client can use different settings. The metadata doen=sn't contain this information
            because the settings don't have necessarily be the same in server and client.</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.EndpointName">
            <summary>
            The endpoint configuration name.
            This name is used to associate the object with the endpoint data in the metadata.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.BindingName">
            <summary>
            This name indicates what Binding is assiciated with the endpoint.
            It is the Binding name defiend in the endpoint, not the actual Binding name.
            The BindingNamespace is part of the metadata and can be used to identify the 
            creator of the binding.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.ContractType">
            <summary>
            The type of the contract associated with this endpoint.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.MaxBufferSize">
            <summary>
            The buffer size from the server binding configuration.
            This member corresponds to the MaxBufferSize attribute in the 
            binding element associated with this endpoint in the server's 
            app.config file.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.MaxItemsInObjectGraph">
            <summary>
            The MaxItemsInObjectGraph attribute of the dataContractSerializer behavior 
            associated with the endpoint in the server.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.OpenTimeout">
            <summary>
            The timeout setting from the server binding configuration.
            This member corresponds to the openTimeout attribute in the 
            binding element associated with this endpoint in the server's 
            app.config file.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.CloseTimeout">
            <summary>
            The timeout setting from the server binding configuration.
            This member corresponds to the closeTimeout attribute in the 
            binding element associated with this endpoint in the server's 
            app.config file.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.SendTimeout">
            <summary>
            The timeout setting from the server binding configuration.
            This member corresponds to the sendTimeout attribute in the 
            binding element associated with this endpoint in the server's 
            app.config file.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.ReceiveTimeout">
            <summary>
            The timeout setting from the server binding configuration.
            This member corresponds to the receiveTimeout attribute in the 
            binding element associated with this endpoint in the server's 
            app.config file.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AddDataObjectResult">
            <summary>
            This class is used to return the results of attempting to 
            add a data object to a data list.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AliasResult">
            <summary>
            This class is used to return a result code along with 
            a client and server alias if the result code indicates 
            success.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.AliasResult.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            This constructor creates an AliasResult from a result code, 
            a client alias, and a server alias.
            </summary>
            <param name="result">
            The result code.
            </param>
            <param name="ca">
            The client alias.
            </param>
            <param name="sa">
            The server alias.
            </param>
        </member>
        <member name="P:Xi.Contracts.Data.AliasResult.Result">
            <summary>
            The Result Code being returned.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AliasResult.ClientAlias">
            <summary>
            The client-assigned alias (identifier) for an InstanceId. Set to 0 if unknown.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AliasResult.ServerAlias">
            <summary>
            The server-assigned alias (identifier) for an InstanceId.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AddDataObjectResult.DataTypeId">
            <summary>
            The data type of a data object.  Null if the object is not a 
            data object.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AddDataObjectResult.IsReadable">
            <summary>
            Indicates, when TRUE, that the data object can be read.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AddDataObjectResult.IsWritable">
            <summary>
            Indicates, when TRUE, that the data object can be written.  
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.AddDataObjectResult.#ctor(System.UInt32,System.UInt32,System.UInt32,Xi.Contracts.Data.TypeId,System.Boolean,System.Boolean)">
            <summary>
            This constructor creates an AliasResult from a result code, 
            a client alias, and a server alias.
            </summary>
            <param name="result">
            The result code.
            </param>
            <param name="ca">
            The client alias of the data object.
            </param>
            <param name="sa">
            The server alias of the data object.
            </param>
            /// <param name="dataTypeId">
            The data type id of the data object.
            </param>
            <param name="isReadable">
            The IsReadable attribute of the data object.
            </param>
            <param name="isWritable">
            The IsWritable attribute of the data object.
            </param>
        </member>
        <member name="T:Xi.Contracts.Data.ServerEntry">
            <summary>
            This class defines the resource management endpoints of a server.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ServerEntry.ServerDescription">
            <summary>
            The description of the server.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ServerEntry.MexEndpoints">
            <summary>
            The names of available metaDataExchange endpoints.
            These names can only be used as a selection choice for the client.
            The Mex endpoint communication settings must be standardized.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ServerEntry.EndpointServerSettings">
            <summary>
            Endpoint configuration settings that are not in the endpoint metadata.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.PassthroughResult">
            <summary>
            This class defines the response messsage that is returned  
            to the client for a passthrough request.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughResult.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughResult.ResultCode">
            <summary>
            The Result Code returned by the passthrough mechanism.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughResult.InvokeId">
            <summary>
            The InvokeId passed in the Passthrough() request.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughResult.ReturnData">
            <summary>
            The data returned by the passthough mechanism.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.CategoryConfiguration">
            <summary>
            <para>This class defines the configuration of a category.  
            Categories are defined as groupings of alarms and events 
            for reporting purposes.</para> 
            <para>The concepts for categories accessible through 
            this interface are defined in EEMUA Publication 191 "Alarm 
            Systems: A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            <para>EEMUA Publication 191 recommends that "Grouping 
            of alarms into categories and providing facilities to select 
            alarm lists filtered on these categories is a highly desirable 
            feature."</para>  
            <para>A category may be composed of either alarms or events, 
            but not both. The EventTypes and AlarmDescriptions members of 
            this class are used to list the the alarms or events that 
            belong to the category. One of these must be present, and the 
            other must be null.</para>
            <para>Occurrences of the alarms or event type that belong to 
            this category are reported using event messages that 
            contain the fields listed in the EventMessageFields member 
            of this class.</para>
            <para>Note that alarms or events that are assigned to a 
            given category may change during the life of a system.</para>  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.CategoryConfiguration.CategoryId">
            <summary>
            The identifier for the category.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.CategoryConfiguration.Name">
            <summary>
            The name of the category.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.CategoryConfiguration.Description">
            <summary>
            The text description of the category.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.CategoryConfiguration.EventType">
            <summary>
            The event type associated with this category.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.CategoryConfiguration.EventMessageFields">
            <summary>
            Event message fields supported by the server that the client 
            can add to event messages sent for the category.  A flag is 
            included for each field that indicates whether or not it 
            can be used for filtering.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.CategoryConfiguration.AlarmDescriptions">
            <summary>
            The list of Alarms that have been assigned to this Category.  
            If this member is null the category is configured to report 
            events.    
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.XiStatusCode">
            <summary>
            <para>The Xi status code is a structured 32-bit unsigned integer.  This class 
            defines the structure and provides properties used to extract and set 
            bit-fields of the 32-bit status code.  </para>
            <para>The structure of the status code is defined as follows, where bit 32 
            is the Most Significant Bit (MSB):</para>
            <para>Bits    Property</para>
            <para>32-25   StatusByte</para>
            <para>24-17   FlagsByte</para>
            <para>16-1    AdditionalDetail</para>
            <para>The StatusByte contains the success/error code associated with the value. </para>
            <para>The FlagsByte contains codes that further describe the status of historical values,
            and that identify the format of the AdditionalDetail bits. </para>
            <para>The AdditionalDetail is a 16-bit value that allows the server to provide 
            additional detail about the value. These bits can contain a vendor-specific 
            code or an HRESULT as indicated by the FlagsByte.  The values for the 
            AdditionalDetail are defined by Xi.Contracts.Constants.AdditionalDetailType.</para>
            <para>16-1    AdditionalDetail</para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.MakeStatusCode(System.Byte,System.Byte,System.UInt16)">
            <summary>
            This method creates a status code from the status byte, flags byte, and additional detail.
            </summary>
            <param name="statusByte">
            The StatusByte to be incorporated into the Status Code.
            </param>
            <param name="flagsByte">
            The FlagsByte to be incorporated into the Status Code.
            </param>
            <param name="additionalDetail">
            The AdditionalDetail to be incorporated into the Status Code.
            </param>
            <returns>
            The newly constructed Status Code.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.MakeStatusByte(System.Byte,System.Byte)">
            <summary>
            This method creates a status byte from status bits and limit bits.
            </summary>
            <param name="statusBits">
            The StatusBits to be incorporated into the Status Byte.
            </param>
            <param name="limitBits">
            The LimitBits to be incorporated into the Status Byte.
            </param>
            <returns>
            The newly constructed Status Byte.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.StatusByte(System.UInt32)">
            <summary>
            <para>StatusByte is an 8-bit property that specifies the status of the 
            data value. It is formatted as follows:</para>
            <para>  SSBBBBLL, where</para>
            <para>      SSBBBB   = StatusBits (most significant bits)</para>
            <para>          LL   = LimitBits</para>
            </summary>
            <param name="statusCode">
            The 32-bit status code from which the status byte is to be extracted. 
            </param>
            <returns>
            The 8-bit status byte.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.StatusBits(System.UInt32)">
            <summary>
            StatusBits contains a 2-bit value that indicates whether the value is good, 
            bad, or uncertain, that is followed by a 4-bit value that provides a description 
            of the status.
            </summary>
            <param name="statusCode">The 32-bit status code from which the status bits are 
            to be extracted. 
            </param>
            <returns>
            The byte value of this 2-bit property.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.LimitBits(System.UInt32)">
            <summary>
            LimitBits is a 2-bit property that describes if and how the associated value 
            is limited.  It value is independent of the value of the StatusBits.
            </summary>
            <param name="statusCode">The 32-bit status code from which the limit bits are 
            to be extracted. 
            </param>
            <returns>
            The byte value of this 2-bit property.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.MakeFlagsByte(System.Byte,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            <para>This method creates the FlagsByte from its components. It is 
            formatted as follows:</para>
            <para>  VVVNCAAA, where</para>
            <para>      VVV  = Historical Value Type (most significant bits)</para>
            <para>      N    = Historical No Bounding</para>
            <para>      C    = Historical Conversion Error</para>
            <para>      AAA  = Additional Detail Desc</para>
            </summary>
            <param name="historicalValueType">
            The 3-bit property that defines how the HistoricalValue property is used. 
            The XiStatusCodeHistoricalValueType enum defines the values for this property.
            </param>
            <param name="historicalNoBounding">
            The boolean that indicates whether or not a bounding value was included 
            in the historical value associated with this StatusCode. 
            </param>
            <param name="historicalConversionError">
            The boolean that indicates whether or not a a scaling / conversionm error 
            occurred for the historical value associated with this StatusCode. 
            </param>
            <param name="additionalDetailDesc">
            The 3-bit description of the AdditionalDetail property. 
            The XiStatusCodeAdditionalDetailType enum defines the values for this property.
            </param>
            <returns>
            The FlagsByte.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.FlagsByte(System.UInt32)">
            <summary>
            <para>FlagsByte is an 8-bit property composed of bitfields that define how 
            the AdditionalDetail property is to be interpreted and that provide historical 
            status information for historical data values.  It is formatted as follows:</para>
            <para>  VVVNCAAA, where</para>
            <para>      VVV  = Historical Value Type (most significant bits)</para>
            <para>      N    = Historical No Bounding</para>
            <para>      C    = Historical Conversion Error</para>
            <para>      AAA  = Additional Detail Desc</para>
            </summary>
            <param name="statusCode">
            The 32-bit status code from which the flags byte is to be extracted. 
            </param>
            <returns>
            The 8-bit flags byte.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.HistoricalValueType(System.UInt32)">
            <summary>
            <para>The HistoricalValueType is a 3-bit property that describes the 
            the historical data value associated with this status code.  The
            StatusCodeHistoricalValueType enumeration defines the values for 
            this property.  </para>
            </summary>
            <param name="statusCode">
            The 32-bit status code from which HistoricalValueTypeBits is to be extracted. 
            </param>
            <returns>
            The HistoricalValueTypeBits value.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.NoBoundingDataFlag(System.UInt32)">
            <summary>
            NoBoundingDataFlag is an 1-bit property that indicates whether or not 
            bounding data was included in the historical data value associated with this 
            status code.
            </summary>
            <param name="statusCode">
            The 32-bit status code from which NoBoundingDataFlag is to be extracted. 
            </param>
            <returns>
            The NoBoundingDataFlag boolean value.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.ConversionErrorFlag(System.UInt32)">
            <summary>
            ConversionErrorFlag is an 1-bit property that indicates whether or not 
            the historical data value associated with this status code had a 
            conversion/scaling error.
            </summary>
            <param name="statusCode">
            The 32-bit status code from which ConversionErrorFlag is to be extracted. 
            </param>
            <returns>
            The ConversionErrorFlag boolean value.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.AdditionalDetailType(System.UInt32)">
            <summary>
            <para>AdditionalDetailType is an 3-bit property that indicates how the 
            AdditionalDetail property is used.  The StatusCodeAdditionalDetailType 
            enumeration defines the values for this property.</para>
            </summary>
            <param name="statusCode">
            The 32-bit status code from which AdditionalDetailType is to be extracted. 
            </param>
            <returns>
            The AdditionalDetailType value.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.ModificationType">
            <summary>
            This enumeration identifies the type of modification to 
            perform for a given journal entry.  For the Insert, 
            Replace, and Insert/Replace, the server receives a new  
            journal entry, and attempts to locate a journal entry 
            for the same data object with the same timestamp, or for 
            the same event based on the event id.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ModificationType.Insert">
            <summary>
            Inserts a new entry in the journal in timestamp order. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ModificationType.Replace">
            <summary>
            Replaces an existing entry in the journal.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ModificationType.InsertReplace">
            <summary>
            Replaces an existing entry in the journal if it exists,
            and inserts a new entry in timestamp order if it does 
            not exist.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ModificationType.Delete">
            <summary>
            Deletes an existing entry from the journal.
            </summary>
        </member>
        <member name="T:Xi.Contracts.IRestRead">
            <summary>
            This interface is composed of methods used to retrieve 
            data, alarms, and events and their histories from the 
            server using REST Web Services.
            </summary>
        </member>
        <member name="M:Xi.Contracts.IRestRead.RestReadData(System.String,System.String)">
            <summary>
            <para>This method is used to read the values of the 
            data objects in a list.</para>
            <para>Heritage: The method corresponds to the ISO 9506 
            Manufacturing Messaging Specification (MMS) Read service.
            </para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects to be read.
            </param>
            <returns>
            The list of requested values. The size and order of this list 
            matches the size and order of serverAliases parameter.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.EventType">
            <summary>
            <para>This enumeration defines types of events that can be 
            conveyed by this interface.</para> 
            <para>The concepts for alarms and events accessible through 
            this interface are defined in EEMUA Publication 191 "Alarm 
            Systems: A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            <para>EEMUA Publication 191 defines events as "a change in 
            plant or equipment condition." It further differentiates 
            alarms and events describing as "signals without a defined 
            operator response" and alarms as events that have a "defined 
            response."</para>
            <para>This generic definition provides the basis for defining 
            the types of events of this EventType enumeration.</para>  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.SystemEvent">
            <summary>
            An event generated by a condition within the system 
            that does not require operator attention.
            See EEMUA Publication 191, 2.4.1.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.OperatorActionEvent">
            <summary>
            An event generated as the result of an operator action. 
            See EEMUA Publication 191, 2.4.1.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.SimpleAlarm">
            <summary>
            The general case of an alarm as defined by See EEMUA Publication 191.  
            A simple alarm is represented by a single condition.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.EclipsedAlarm">
            <summary>
            An alarm that is composed of a set of conditions that are 
            all related to the same monitored data object, but where 
            only the one with the highest operational significance 
            can be active at a time. See EEMUA Publication 191, A8.3.2. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.GroupedAlarm">
            <summary>
            An alarm that is represented by multiple conditions, 
            any number of which can be active at the same time.  
            For alarms of this type, the alarm is active when at 
            least one of its conditions is active, and is inactive 
            when none of its conditions are active. See EEMUA 
            Publication 191, A8.2.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.Alert">
            <summary>
            An event similar to an alarm, but that is a lower 
            priority and has no significant consequences if missed. 
            Alerts are often referred to as warnings or prompts.  
            See EEMUA Publication 191, Appendix 7. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AlarmMessageData">
            <summary>
            This class defines the alarm data that is transferred in Event 
            Messages that report an alarm.
            <para>The concepts for alarms and events accessible through 
            this interface are defined in EEMUA Publication 191 "Alarm 
            Systems: A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            <para>EEMUA Publication 191 generally defines messages to 
            report alarms and events as "text information presented to 
            the operator that describes the alarm condition."</para>  
            <para>The members of this class represent the individual 
            pieces of alarm information to be included in the text 
            information that is presented to the operator for alarms.</para>  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmMessageData.AlarmState">
            <summary>
            The current state of the alarm.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmMessageData.AlarmStateChange">
            <summary>
            The state change(s) that caused the alarm message to sent.
            The Xi.Contract.Constants.AlarmStateChangeCodes class defines 
            the values for this member.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmMessageData.TimeLastActive">
            <summary>
            The time that the alarm last transitionedto the active state.  
            This time is independent of the current state of the alarm.  
            Null if the alarm has never been active. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.WriteJournalValues">
            <summary>
            This class is used to specify a data object to write and the 
            value to write.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteJournalValues.ListAlias">
            <summary>
            Identifies the list that contains the data objects 
            to write.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteJournalValues.HistoricalValues">
            <summary>
            The list of data object values to write. Each data object 
            is identified by its server alias. When used to write 
            historical values using the WriteJournalData() method, 
            the timestamp is used to identify a specific journal 
            entry for the data object.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.EventIdResult">
            <summary>
            This class is used to return an error code and the 
            event id of the event message for which the 
            requested operation failed.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EventIdResult.ResultCode">
            <summary>
            Result Code for the corresponding EventMessage or EventId.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EventIdResult.EventId">
            <summary>
            The EventId of the event message associated with 
            the error result. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ServerDetails">
            <summary>
            This class contains descriptive information about the server.   
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDetails.StartTime">
            <summary>
            The time the server was last started.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDetails.BuildNumber">
            <summary>
            The build number of the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDetails.Version">
            <summary>
            The version of the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDetails.VendorInfo">
            <summary>
            Vendor-specific information about the server.
            </summary>
        </member>
        <member name="T:Xi.Contracts.IRead">
            <summary>
            This interface is composed of methods used to retrieve 
            data, alarms, and events and their histories from the 
            server.
            </summary>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadData(System.String,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the values of one or more 
            data objects in a list.</para>
            <para>Heritage: The method corresponds to the ISO 9506 
            Manufacturing Messaging Specification (MMS) Read service.
            </para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects to be read.
            </param>
            <param name="serverAliases">
            The server aliases of the data objects to read.
            </param>
            <returns>
            The list of requested values. Each value in this list is identified 
            by its client alias.  If the server alias for a data object to read 
            was not found, an ErrorInfo object will be returned that contains 
            the server alias instead of a value, status, and timestamp. 
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalDataForTimeInterval(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the historical values that fall between 
            a start and end time for one or more data objects within a specific data 
            journal list.</para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose 
            historical values are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the first or beginning (of returned list) 
            timestamp for values to be returned.  Valid operands include the 
            Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.  The FilterOperand Operator is used to 
            determine if the returned data should include data values 
            the occur exactly at the first or second time stamp.  If the equals 
            operator is specified then values that occur at the first and second 
            time stamp will be included in the sample set.  Any other operator 
            will not include first or second time stamped values.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the second or ending (of returned list)
            timestamp for values to be returned.  Valid operands include the 
            Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.  The FilterOperand Operator is not used.
            </param>
            <param name="numValuesPerAlias">
            The maximum number of JournalDataReturnValues to be returned per alias.
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read.  
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalDataNext(System.String,System.UInt32,System.UInt32)">
            <summary>
            <para>This method is used to return an in-sequence subset of the 
            historical values selected by the last IRead_ReadJournalDataForTimeInterval() 
            call issued by the client on this client context.  This method is used 
            when the number of values to be returned for one or more aliases 
            exceeds the number specified by the numValuesPerAlias parameter of the 
            IRead_ReadJournalDataForTimeInterval() method.  </para>
            <para>The client may have to reissue this call multiple times to 
            receive all historical values for all aliases.  The client may specify 
            a new numValuesPerAlias with each call to this method to better optimize 
            its performance.  </para>
            <para>The server is responsible for maintaining the list of requested 
            aliases for which values remain, and the timestamp of the last value 
            sent to the client for each alias. </para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose 
            historical values are to be returned.
            </param>
            <param name="numValuesPerAlias">
            The maximum number of data sample values to be returned per alias.
            </param>
            <returns>
            The next set of remaining values for each alias.  If the number of values 
            returned for any one alias is less than numValuesPerAlias, then there are 
            no additional values to return to the client for that alias. If, however, 
            the number returned for any alias is equal to numValuesPerAlias, then the 
            client should issue a ReadJournalDataNext() to retrieve any remaining values.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalDataAtSpecificTimes(System.String,System.UInt32,System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the historical values at specific times for 
            one or more data objects within a specific data journal list.  If no entry exists 
            at the specified time in the data journal for an object, the server creates an 
            interpolated value for that time and includes it in the response as though it 
            actually existed in the journal.</para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose historical 
            values are to be read.
            </param>
            <param name="timestamps">
            Identifies the timestamps of historical values to be returned for each 
            of the requested data objects. 
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read.  
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalDataChanges(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read changed historical values for one 
            or more data objects within a specific data journal list.  Changed historical 
            values are those that were entered into the journal and then changed (corrected) 
            by an operator or other user.</para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose historical 
            values are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read.  
            </param>
            <param name="numValuesPerAlias">
            The maximum number of JournalDataChangedValues to be returned.  
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.  If, however, the number returned for any alias is equal to 
            numValuesPerAlias, then the client should issue a ReadJournalDataChangesNext() 
            to retrieve any remaining values.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalDataChangesNext(System.String,System.UInt32,System.UInt32)">
            <summary>
            <para>This method is used to return an in-sequence subset of the 
            historical values selected by the last IRead_ReadJournalDataChanges() 
            call issued by the client on this client context.  This method is used 
            when the number of values to be returned for one or more aliases 
            exceeds the number specified by the numValuesPerAlias parameter of the 
            IRead_ReadJournalDataChanges() method.  </para>
            <para>The client may have to reissue this call multiple times to 
            receive all historical values for all aliases.  The client may specify 
            a new numValuesPerAlias with each call to this method to better optimize 
            its performance.  </para>
            <para>The server is responsible for maintaining the list of requested 
            aliases for which values remain, and the timestamp of the last value 
            sent to the client for each alias. </para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose 
            historical values are to be returned.
            </param>
            <param name="numValuesPerAlias">
            The maximum number of JournalDataChangedValues to be returned per alias.
            </param>
            <returns>
            The next set of remaining values for each alias.  If the number of values 
            returned for any one alias is less than numValuesPerAlias, then there are 
            no additional values to return to the client for that alias. If, however, 
            the number returned for any alias is equal to numValuesPerAlias, then the 
            client should issue a ReadJournalDataChangesNext() to retrieve any remaining 
            values.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadCalculatedJournalData(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Xi.Contracts.Data.AliasAndCalculation})">
            <summary>
            <para>This method is used to read calculated historical values (e.g. averages or 
            interpolations) for one or more data objects within a specific data journal list.  
            The time-range used to select the historical values is specified by the client. 
            Additionally, the client specifies a calculation period that divides that time 
            range into periods. The server calculates a return value for each of these periods.</para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose historical 
            values are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="calculationPeriod">
            The time span used to divide the specified time range into individual periods for 
            which return values are calculated.  The specified calculation is performed on the 
            set of historical values of a data object that fall within each period. 
            </param>
            <param name="serverAliasesAndCalculations">
            The list of server aliases for the data objects whose historical 
            values are to be calculated, and the calculation to perform for each.  
            </param>
            <returns>
            The set of calculated values. There is one value for each calculation period within 
            the specified time range for each specific data object.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalDataProperties(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
            This method reads the properties associated with a historized data object.
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose property 
            values are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="serverAlias">
            The server alias of the data object whose property values are to be read.  
            </param>
            <param name="propertiesToRead">
            The TypeIds of the properties to read. Each property is identified by 
            its property type.
            </param>
            <returns>
            The array of requested property values.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadEvents(System.String,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to read an event list or a subset of it 
            using a filter.
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains alarms and events 
            to be read.
            </param>
            <param name="filterSet">
            The set of filters used to select alarms and events 
            to be read.
            </param>
            <returns>
            The list of selected alarms and events.
            Null if no alarms or events were selected.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalEvents(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            <para>This method is used to read a list of historical alarms or 
            events.  This method only accesses historical events rather 
            than also accessing historical data as does the MMS ReadJournal 
            service.  This is because the return value is strongly typed 
            to historical alarms and event messages and not to historical  
            data.</para>
            <para>To simplify implementation, clients must first define a   
            historical alarm/event list that the server will prepare to access. </para>
            <para>Heritage: The set of historical alarms and events is referred 
            to collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical alarms and events 
            rather than also accessing historical data as does the MMS 
            ReadJournal service. This is because the return value of this method 
            is strongly typed to historical alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains historical alarms and 
            events that are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the first or beginning (of returned list) 
            timestamp for event messages to be returned.  Valid operands include 
            the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the second or ending (of returned list)
            timestamp for event messages to be returned.  Valid operands include 
            the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.
            </param>
            <param name="numEventMessages">
            The maximum number of EventMessages to be returned.
            </param>
            <param name="filterSet">
            The set of filters used to select historical alarms and events 
            to be read.
            </param>
            <returns>
            The list of selected historical alarms and events.
            Or null if no alarms or events were selected.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalEventsNext(System.String,System.UInt32,System.UInt32)">
            <summary>
            <para>This method is used to return an in-sequence subset of the 
            historical events selected by the last ReadJournalEvents() 
            call issued by the client on this client context.  This method is used 
            when the number of EventMessages to be returned exceeds the number specified 
            by the numEventMessages parameter of the ReadJournalEvents() method.  </para>
            <para>The client may have to reissue this call multiple times to 
            receive all historical EventMessages selected by the initial call to 
            ReadJournalEvents().  The client may specify a new numEventMessages with each 
            call to this method to better optimize its performance.  </para>
            <para>Heritage: The set of historical values is referred to 
            collectively as a "Journal", as described by the ISO 9506 
            Manufacturing Message Specification (MMS).  This method is derived 
            from the ReadJournal service defined by that specification.</para>
            <para>However, this method only accesses historical data rather 
            than also accessing historical events as does the MMS 
            ReadJournal service. This is because the return value of this 
            method is strongly typed to historical data and not to historical 
            alarms and events.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects whose 
            historical events are to be returned.
            </param>
            <param name="numEventMessages">
            The maximum number of EventMessages to be returned.
            </param>
            <returns>
            The selected EventMessages. If, however, the number returned is equal to 
            numEventMessages, then the client should issue a ReadJournalEventsNext() 
            to retrieve any remaining EventMessages.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.TypeAttributes">
            <summary>
            This class provides a type attributes for a data type or 
            an object type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeAttributes.TypeId">
            <summary>
            The identifier for the type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeAttributes.Name">
            <summary>
            This string provides the display name.  Names are not permitted 
            to contain the forward slash ('/') character.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeAttributes.Description">
            <summary>
            The description of the type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeAttributes.MemberPath">
            <summary>
            The ObjectPath for the Branch that contains the list of members for 
            this type. The list of members and their ObjectAttributes can be 
            retrieved by calling FindObjects() using the MemberPath.  The  
            InstanceId of these ObjectAttributes is set to null since these 
            ObjectAttributes describe all instances of the member, and  
            instances of the member description inherit its ObjectAttributes. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.TypeAttributes.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.TypeAttributes.Schema">
            <summary>
            A byte-string that contains a detailed specification of the type.  
            The SchemaType element of the TypeId indicates the format of 
            the schema.  Null if unknown or unused.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ModificationAttributesList">
            <summary>
            This class defines attributes that describe modifications 
            performed to a history value. 
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ModificationAttributesList.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor initializes a ModificationAttributesList object with arrays of the 
            specified sizes.
            </summary>
            <param name="doubleArraySize">The size of the DoubleModificationTimeStamps, 
            DoubleModificationTypes, and the DoubleOperatorNames arrays.</param>
            <param name="longArraySize">The size of the LongModificationTimeStamps, 
            LongModificationTypes, and the LongOperatorNames arrays.</param>
            <param name="objectArraySize">The size of the ObjectModificationTimeStamps, 
            ObjectModificationTypes, and the ObjectOperatorNames arrays.</param>
        </member>
        <member name="M:Xi.Contracts.Data.ModificationAttributesList.SetDouble(System.Int32,System.DateTime,Xi.Contracts.Data.ModificationType,System.String,System.UInt32,System.DateTime,System.Double)">
            <summary>
            This method is used to set the entries at a specific index in the 
            DoubleModificationTimeStamps, DoubleModificationTypes, and the 
            DoubleOperatorNames arrays.
            </summary>
            <param name="idx">The index of the entries to be updated.</param>
            <param name="modificationTimeStamp">The modificationTimeStamp to be set for the entry.</param>
            <param name="modificationType">The modificationType to be set for the entry.</param>
            <param name="operatorName">The operatorName to be set for the entry.</param>
            <param name="statusCode">The statusCode to be set for the entry.</param>
            <param name="timeStamp">The timeStamp to be set for the entry.</param>
            <param name="value">The double value to be set for the entry.</param>
        </member>
        <member name="M:Xi.Contracts.Data.ModificationAttributesList.SetUint(System.Int32,System.DateTime,Xi.Contracts.Data.ModificationType,System.String,System.UInt32,System.DateTime,System.UInt32)">
            <summary>
            This method is used to set the entries at a specific index in the 
            LongModificationTimeStamps, LongModificationTypes, and the 
            LonOperatorNames arrays
            </summary>
            <param name="idx">The index of the entries to be updated.</param>
            <param name="modificationTimeStamp">The modificationTimeStamp to be set for the entry.</param>
            <param name="modificationType">The modificationType to be set for the entry.</param>
            <param name="operatorName">The operatorName to be set for the entry.</param>
            <param name="statusCode">The statusCode to be set for the entry.</param>
            <param name="timeStamp">The timeStamp to be set for the entry.</param>
            <param name="value">The long value to be set for the entry.</param>
        </member>
        <member name="M:Xi.Contracts.Data.ModificationAttributesList.SetObject(System.Int32,System.DateTime,Xi.Contracts.Data.ModificationType,System.String,System.UInt32,System.DateTime,System.Object)">
            <summary>
            This method is used to set the entries at a specific index in the 
            ObjectModificationTimeStamps, ObjectModificationTypes, and the 
            ObjectOperatorNames arrays.
            </summary>
            <param name="idx">The index of the entries to be updated.</param>
            <param name="modificationTimeStamp">The modificationTimeStamp to be set for the entry.</param>
            <param name="modificationType">The modificationType to be set for the entry.</param>
            <param name="operatorName">The operatorName to be set for the entry.</param>
            <param name="statusCode">The statusCode to be set for the entry.</param>
            <param name="timeStamp">The timeStamp to be set for the entry.</param>
            <param name="value">The object value to be set for the entry.</param>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.DoubleModificationTimeStamps">
            <summary>
            The time that the modification was performed.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.DoubleModificationTypes">
            <summary>
            The type of modification performed. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.DoubleOperatorNames">
            <summary>
            The name or other system-specific identifier of the 
            operator who performed the modification. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.LongModificationTimeStamps">
            <summary>
            The time that the modification was performed.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.LongModificationTypes">
            <summary>
            The type of modification performed. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.LongOperatorNames">
            <summary>
            The name or other system-specific identifier of the 
            operator who performed the modification. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.ObjectModificationTimeStamps">
            <summary>
            The time that the modification was performed.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.ObjectModificationTypes">
            <summary>
            The type of modification performed. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.ObjectOperatorNames">
            <summary>
            The name or other system-specific identifier of the 
            operator who performed the modification. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.EndpointDefinition">
            <summary>
            <para>This class is used to return the definition of an endpoint  
            exposed by the server.</para>
            <para>Heritage: Endpoints represent Application Service 
            Elements (ASEs) defined for the Application Layer by ISO 
            7498-1 Information technology -- Open Systems Interconnection 
            -- Basic Reference Model: The Basic Model.  The are 
            implemented by Microsoft Windows Communication Foundation 
            (WCF) endpoints.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EndpointDefinition.EndpointDescription">
            <summary>
            This member is used locally by the server
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.EndpointDefinition.ToString">
            <summary>
            This method represents the endpoint as a string using 
            its URL.
            </summary>
            <returns>
            The URL of the endpoint.
            </returns>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointDefinition.EndpointId">
            <summary>
            The endpoint Identification is used to uniquely identify 
            this endpoint definition.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointDefinition.EndpointInterfaceType">
            <summary>
            The type of the Xi interface supported by the endpoint.  Standard values 
            are defined in the Xi.Contracts.Constants.EndpointInterfaceType enumeration.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointDefinition.BindingName">
            <summary>
            <para>The type of the binding (WSHttpBinding, NetTcpBinding, etc.) 
            as defined in the config.app file.  For standard bindings,
            this is the endpoint binding attribute:</para>
            <para>  endpoint binding="wsHttpBinding"</para> 
            For custom bindings, this is the name attribute of the binding 
            element of the custom binding:
            <para>  binding name="binaryHttpBinding" </para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointDefinition.Url">
            <summary>
            The URL used to access the endpoint
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.StringTableEntry">
            <summary>
            This class defines an element of a string table.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StringTableEntry.Index">
            <summary>
            The index of the element.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StringTableEntry.StringValue">
            <summary>
            The string associated with the index.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ServerStatus">
            <summary>
            This class contains dynamic information about the server.   
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerStatus.ServerType">
            <summary>
            The server for which the status is being reported.
            The ServerType enumeration is used to identify 
            the server. If the enumeration indicates multiple 
            server types, then this is the status of the entire 
            server. For example, if the Xi server wraps an 
            OPC DA and OPC AE server, then if this ServerType 
            indicates both, the status is for the Xi server, and 
            not for an individual wrapped server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerStatus.CurrentTime">
            <summary>
            The current time in the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerStatus.ServerState">
            <summary>
            The current state of the server.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AliasUpdate">
            <summary>
            This class is used to update an existing alias.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.AliasUpdate.#ctor(System.UInt32,System.UInt32)">
            <summary>
            This constructor creates an AliasUpdate from 
            an existing alias and its new alias.
            </summary>
            <param name="existingServerAlias">
            The existing server alias.
            </param>
            <param name="newClientAlias">
            The new client alias.
            </param>
        </member>
        <member name="P:Xi.Contracts.Data.AliasUpdate.ExistingServerAlias">
            <summary>
            The existing server alias (identifier) that is to be updated.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AliasUpdate.NewClientAlias">
            <summary>
            The new client alias for the existing server alias.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ListAttributes">
            <summary>
            Attributes for a list - includes data, journal, event and history lists.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data contract 
            class by recording versioning information about it.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.ResultCode">
            <summary>
            Result Code from the list being defined or condition of list for list attributes.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.ClientId">
            <summary>
            The client-defined identifier used to access the list
            This value is used as the listId for responses from the server.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.ServerId">
            <summary>
            The server-defined identifier used to access the list
            This value is used as the listId for requests made to 
            the server.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.ListType">
            <summary>
            Indicates the type of list to be created.
            The standard list types are defined by the StandardListType enumeration. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.Enabled">
            <summary>
            When a list is Enabled read, write and poll operations may be 
            performed on the list elements.  Also only enabled lists will 
            report data by way of callbacks.  Note that polling and callbacks 
            are generally mutually exclusive.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.UpdateRate">
            <summary>
            The rate, expressed in milliseconds, at which the server 
            updates the elements of a list with values from the 
            underlying system.  A value of 0 indicates that updating 
            is exception-based.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.BufferingRate">
            <summary>
            <para>An optional-use member that indicates that the server is 
            to buffer data updates, rather than overwriting them, until either 
            the time span defined by the buffering rate expires or the values 
            are transmitted to the client in a callback or poll response. If 
            the time span expires, then the oldest value for a data object is 
            discarded when a new value is received from the underlying system.</para>
            <para>The value of the bufferingRate is set to 0 to indicate 
            that it is not to be used and that new values overwrite (replace) existing 
            cached values.  </para>
            <para>When used, this parameter contains the client-requested buffering 
            rate, which the server may negotiate up or down, or to 0 if the 
            server does not support the buffering rate. </para>
            <para>The FeaturesSupported member of the StandardMib is used to indicate 
            server support for the buffering rate.</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.CurrentCount">
            <summary>
            The current number of the elements in the list.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.HowSorted">
            <summary>
            Specifies if and how the list is sorted.
            Standard values are defined by the SortType enumeration.
            The high-order 8 bits are used to define non-standard sort 
            orders. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.SortKeys">
            <summary>
            <para>Specifies the sort keys for the list.  The sort keys 
            are identified by their names or their ObjectIds.</para>
            <para>For example, if the list is a list of EventMessages that 
            is sorted on the OccurrenceTime and then on the 
            SourceId, this list will contain "OccurrenceTime" and 
            "SourceId".</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.FilterSet">
            <summary>
            The current Filter Set for this list.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AlarmCondition">
            <summary>
            <para>This class is used to define a condition for which an 
            alarm can be detected.</para>
            <para>The concepts for alarm conditions accessible through 
            this interface are defined in EEMUA Publication 191 "Alarm 
            Systems: A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            <para>EEMUA Publication 191 describes conditions as the  
            "initiating event" that "can cause" an alarm.  Further, it 
            states "An alarm is raised or initiated when the condition 
            creating the alarm has occurred.  </para>  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmCondition.Name">
            <summary>
            The name of the alarm condition.  The name of the alarm 
            conditino must be unique for its event source (two alarms 
            generated by the same event source cannot have the same name.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmCondition.TypeId">
            <summary>
            The namespace qualified name of the alarm condition.  
            Examples include HI_HI, HI, LO, and LO_LO.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmCondition.IsActive">
            <summary>
            Indicates, when TRUE, that the condition is active.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmCondition.TriggeringCriteria">
            <summary>
            The localized definition of the triggering criteria for the 
            Condition. Triggering criteria define the conditions that 
            cause the the alarm to transition to the active state. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmCondition.Priority">
            <summary>
            The priority of the Condition.    
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmCondition.TextMessage">
            <summary>
            The localized text message for the Condition. This text message 
            is included in the TextMessage field of Event Messages that 
            report the Condition (see the Event Message class definition).  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AlarmCondition.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data contract 
            class by recording versioning information about it.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ErrorInfo">
            <summary>
            <para>Objects of this class are used to associate additional error 
            information with a data value transferred in the DataValueArrays. 
            It is related to the value by the ClientAlias.  Only one ErrorInfo 
            object for a given ClientAlias may be present in the DataValuesArray.</para>
            <para>The presence of this object for a data value is indicated by the 
            value of the AdditionalDetailDesc property of the StatusCode FlagsByte.  
            When the value of the AdditionalDetailDesc property is set to 7, an 
            ErrorInfo object with an HResult must be present in the ErrorInfo list 
            of the DataValueArrays.</para>
            <para>Alternatively, if the Context has been opened with ContextOptions 
            set to DebugErrorMessages using the Initiate() or ReInitiate() methods, then 
            the server may enter ErrorInfo objects with an ErrorMessage string into the 
            ErrorInfo list of the DataValueArrays. In this case, the AdditionalDetailDesc 
            property does not have to indicate that the ErrorInfo object is present.  
            Further, the ErrorMessage string cannot be used unless ContextOptions is 
            set to DebugErrorMessages.</para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ErrorInfo.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            This constructor initializes an ErrorInfo object with 
            the ClientAlias and HResult.  
            </summary>
            <param name="hResult">A valid non-zero HResult value. </param>
            <param name="clientAlias">The Client Alias of the associated value.</param>
            <param name="serverAlias">The Server Alias of the associated value.</param>
        </member>
        <member name="M:Xi.Contracts.Data.ErrorInfo.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            This constructor initializes an ErrorInfo object with 
            the ClientAlias and ErrorMessage.  This constructor
            may only be used when when the Context has been opened with 
            ContextOptions set to DebugErrorMessages using either the 
            Initiate() or ReInitiate() method.
            </summary>
            <param name="errorMessage">A non-empty text description of the error.</param>
            <param name="clientAlias">The Client Alias of the associated value.</param>
            <param name="serverAlias">The Server Alias of the associated value.</param>
        </member>
        <member name="M:Xi.Contracts.Data.ErrorInfo.#ctor(System.UInt32,System.String,System.UInt32,System.UInt32)">
            <summary>
            This constructor initializes an ErrorInfo object with the 
            ClientAlias, HResult, and ErrorMessage.  This constructor may 
            only be used with a non-empty ErrorMessage when the Context 
            was opened with ContextOptions set to DebugErrorMessages.
            </summary>
            <param name="hResult">A valid non-zero HResult value.</param>
            <param name="errorMessage">The text description of the error.</param>
            <param name="clientAlias">The Client Alias of the associated value.</param>
            <param name="serverAlias">The Server Alias of the associated value.</param>
        </member>
        <member name="P:Xi.Contracts.Data.ErrorInfo.ClientAlias">
            <summary>
            The ClientAlias of a value transferred in the DataValueArrays.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ErrorInfo.ServerAlias">
            <summary>
            The ServerAlias of the value transfered in the DataValueArrays.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ErrorInfo.HResult">
            <summary>
            <para>The HResult associated with the value. This capability is provided 
            to support additional HResult Facility Codes not defined by the
            XiStatusCodeAdditionalDetailType enumeration.  </para>
            <para>When present, and ContextOptions is not set to DebugErrorMessages 
            for the Context, the presence of an ErrorInfo object with a valid HResult 
            is specified using the AdditionalDetailDesc property (value = 7) of the 
            StatusCode FlagsByte.  In this case,this HResult must have a valid non-zero 
            HResult value.</para>
            <para>When the presence of the ErrorInfo object is not specified 
            by the AdditionalDetailDesc property, this HResult may be zero.  This 
            case may exist when ContextOptions is set to DebugErrorMessages for 
            the Context.</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ErrorInfo.ErrorMessage">
            <summary>
            The description of the error. ErrorMessage may only be used when 
            the Context has been opened with ContextOptions set to DebugErrorMessages 
            using either the Initiate() or ReInitiate() method.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.PassthroughMessage">
            <summary>
            This class defines the attributes of passthrough messages.  
            Passthrough messages are messages sent by the client to the 
            server, who forwards them unchanged to the recipient. The 
            recipient represents the entity responsible for processing 
            or otherwise consuming the message.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughMessage.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data contract 
            class by recording versioning information about it.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughMessage.Name">
            <summary>
            The name of the Passthrough as known by the Recipient.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughMessage.Description">
            <summary>
            The text description of the Passthrough.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughMessage.Asynch">
            <summary>
            Indicates, when TRUE, that the Passthrough returns its response 
            asynchrononously via the callback or poll interface.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughMessage.InParameters">
            <summary>
            The definition of the Passthrough's input message parameters.  
            The server is responsible for passing these parameters to the 
            recipient.  It is possible that the entire input passthrough 
            message is defined by a single data type.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughMessage.OutParameters">
            <summary>
            The definition of the Passthrough's output message parameters.
            The server is responsible for passing these parameters from the 
            recipient.  It is possible that the entire output passthrough 
            message is defined by a single data type. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.DataJournalOptions">
            <summary>
            This class contains the options supported by the server 
            for history data accessible through Journal reads and 
            writes.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataJournalOptions.Properties">
            <summary>
            The standard and non-standard Historical Data Properties 
            supported by the server, and an indicator of which can 
            be used for filtering.    
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataJournalOptions.MathLibrary">
            <summary>
            Historical Data Math Library supported by the server. Each 
            math/statistical function in the library is identified 
            using an InstanceId.  The namespace element of the InstanceId 
            identifies the party responsible for defining the function.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ListInstanceId">
            <summary>
            This class identifies a data object to be added 
            to a list. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ListInstanceId.ObjectElementId">
            <summary>
            The Object LocalId for the object, typically obtained 
            using the FindObjects() method, plus an optional 
            element identifier for elements of a constructed 
            data type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ListInstanceId.ClientAlias">
            <summary>
            The client-assigned alias for the data object.
            This alias is used to refer to the data object 
            within the context of the list to which it is 
            added.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.XiMethods">
            <summary>
            This enumeration assigns a flag value to each of the Xi 
            methods and then defines standard sets of methods required  
            for all data, event, data journal, and event journal servers.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IServerDiscovery_DiscoverServers">
            <summary>
            The server supports the IServerDiscovery.DiscoverServers() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IServerDiscovery_DiscoverServerInfo">
            <summary>
            The server supports the IServerDiscovery.DiscoverServerInfo() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_Initiate">
            <summary>
            The server supports the IResourceManagement.Initiate() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_ReInitiate">
            <summary>
            The server supports the IResourceManagement.ReInitiate() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_Conclude">
            <summary>
            The server supports the IResourceManagement.Initiate() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_ClientKeepAlive">
            <summary>
            The server supports the IResourceManagement.Initiate() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_Identify">
            <summary>
            The server supports the IResourceManagement.Identify() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_Status">
            <summary>
            The server supports the IResourceManagement.Status() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_LookupResultCodes">
            <summary>
            The server supports the IResourceManagement.LookupResultCodes() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_FindObjects">
            <summary>
            The server supports the IResourceManagement.FindObjects() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_FindTypes">
            <summary>
            The server supports the IResourceManagement.FindTypes() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_FindRootPaths">
            <summary>
            The server supports the IResourceManagement.FindRootPaths() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_GetStandardMib">
            <summary>
            The server supports the IResourceManagement.GetStandardMib() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_GetVendorMib">
            <summary>
            The server supports the IResourceManagement.GetVendorMib() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_OpenEndpoint">
            <summary>
            The server supports the IResourceManagement.OpenEndpoint() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_AddListToEndpoint">
            <summary>
            The server supports the IResourceManagement.AddListToEndpoint() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_RemoveListsFromEndpoint">
            <summary>
            The server supports the IResourceManagement.RemoveListsFromEndpoint() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_CloseEndpoint">
            <summary>
            The server supports the IResourceManagement.CloseEndpoint() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_DefineList">
            <summary>
            The server supports the IResourceManagement.DefineList() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_GetListAttributes">
            <summary>
            The server supports the IResourceManagement.GetListAttributes() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_RenewAliases">
            <summary>
            The server supports the IResourceManagement.RenewAliases() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_DeleteLists">
            <summary>
            The server supports the IResourceManagement.DeleteLists() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_AddDataObjectsToList">
            <summary>
            The server supports the IResourceManagement.AddDataObjectsToList() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_RemoveDataObjectsFromList">
            <summary>
            The server supports the IResourceManagement.RemoveDataObjectsFromList() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_ModifyListAttributes">
            <summary>
            The server supports the IResourceManagement.ModifyListAttributes() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_EnableListUpdating">
            <summary>
            The server supports the IResourceManagement.EnableListUpdating() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_AddEventMessageFields">
            <summary>
            The server supports the IResourceManagement.AddEventMessageFields() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_TouchDataObjects">
            <summary>
            The server supports the IResourceManagement.TouchDataObjects() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_TouchList">
            <summary>
            The server supports the IResourceManagement.TouchList() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_GetAlarmSummary">
            <summary>
            The server supports the IResourceManagement.GetAlarmSummary() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadData">
            <summary>
            The server supports the IRead.ReadData() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalDataForTimeInterval">
            <summary>
            The server supports the IRead.ReadJournalData() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalDataAtSpecificTimes">
            <summary>
            The server supports the IRead.ReadJournalData() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalDataChanges">
            <summary>
            The server supports the IRead.ReadJournalData() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadCalculatedJournalData">
            <summary>
            The server supports the IRead.ReadJournalData() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalDataProperties">
            <summary>
            The server supports the IRead.ReadJournalData() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadEvents">
            <summary>
            The server supports the IRead.ReadEvents() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalEvents">
            <summary>
            The server supports the IRead.ReadJournalEvents() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IWrite_WriteValues">
            <summary>
            The server supports the IWrite.WriteValues() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IWrite_WriteVST">
            <summary>
            
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IWrite_WriteJournalData">
            <summary>
            The server supports the IWrite.WriteJournalData() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IWrite_WriteJournalEvents">
            <summary>
            The server supports the IWrite.WriteJournalEvents() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IWrite_AcknowledgeAlarms">
            <summary>
            The server supports the IWrite.AcknowledgeAlarms() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IWrite_Passthrough">
            <summary>
            The server supports the IWrite.Passthrough() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.ICallback_Abort">
            <summary>
            The server supports the ICallback.Abort() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.ICallback_InformationReport">
            <summary>
            The server supports the ICallback.InformationReport() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.ICallback_EventNotification">
            <summary>
            The server supports the ICallback.EventNotification() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRegisterForCallback_SetCallback">
            <summary>
            The server supports the IRegisterForCallback.Register() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IPoll_PollDataChanges">
            <summary>
            The server supports the IPoll.PollDataChanges() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IPoll_PollEventChanges">
            <summary>
            The server supports the IPoll.PollEventChanges() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRestRead_ReadData">
            <summary>
            The server supports the IRestRead.RestReadData() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.ServerCommonMethods">
            <summary>
            The methods required of all servers except for server discovery servers.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.BasicDataServerMethodProfile">
            <summary>
            The methods required of all data servers.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.PolledDataServerMethodProfile">
            <summary>
            The methods required of all data servers that support polling.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.CallbackDataServerMethodProfile">
            <summary>
            The methods required of all data servers that support callbacks.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.FullDataServerMethodProfile">
            <summary>
            The methods required of all data servers that support polling and callbacks.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.BasicEventServerMethodProfile">
            <summary>
            The methods required of all event servers.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.PolledEventServerMethodProfile">
            <summary>
            The methods required of all event servers that support polling.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.CallbackEventServerMethodProfile">
            <summary>
            The methods required of all event servers that support callbacks.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.FullEventServerMethodProfile">
            <summary>
            The methods required of all event servers that support polling and callbacks.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.DataJournalMethodProfile">
            <summary>
            The methods required of all data journals.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.EventJournalMethodProfile">
            <summary>
            The methods required of all event journals.
            </summary>
        </member>
    </members>
</doc>
