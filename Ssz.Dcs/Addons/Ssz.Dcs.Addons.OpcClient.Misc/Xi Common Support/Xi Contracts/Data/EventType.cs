/**********************************************************************
 * Copyright Â© 2009, 2010, 2011, 2012 OPC Foundation, Inc. 
 *
 * The source code and all binaries built with the OPC .NET 3.0 source
 * code are subject to the terms of the Express Interface Public
 * License (Xi-PL).  See http://www.opcfoundation.org/License/Xi-PL/
 *
 * The source code may be distributed from an OPC member company in
 * its original or modified form to its customers and to any others who
 * have software that needs to interoperate with the OPC member's OPC
* .NET 3.0 products. No other redistribution is permitted.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *********************************************************************/

using System.Runtime.Serialization;

namespace Xi.Contracts.Data
{
	/// <summary>
	/// <para>This enumeration defines types of events that can be 
	/// conveyed by this interface.</para> 
	/// <para>The concepts for alarms and events accessible through 
	/// this interface are defined in EEMUA Publication 191 "Alarm 
	/// Systems: A Guide to Design, Management and Procurement".
	/// See http://www.eemua.org</para>
	/// <para>EEMUA Publication 191 defines events as "a change in 
	/// plant or equipment condition." It further differentiates 
	/// alarms and events describing as "signals without a defined 
	/// operator response" and alarms as events that have a "defined 
	/// response."</para>
	/// <para>This generic definition provides the basis for defining 
	/// the types of events of this EventType enumeration.</para>  
	/// </summary>
	[DataContract(Namespace = "urn:xi/data")]
	public enum EventType
	{
		/// <summary>
		/// An event generated by a condition within the system 
		/// that does not require operator attention.
		/// See EEMUA Publication 191, 2.4.1.
		/// </summary>
		[EnumMember] SystemEvent         = 1,

		/// <summary>
		/// An event generated as the result of an operator action. 
		/// See EEMUA Publication 191, 2.4.1.
		/// </summary>
		[EnumMember] OperatorActionEvent = 2,

		/// <summary>
		/// The general case of an alarm as defined by See EEMUA Publication 191.  
		/// A simple alarm is represented by a single condition.
		/// </summary>
		[EnumMember] SimpleAlarm         = 3,

		/// <summary>
		/// An alarm that is composed of a set of conditions that are 
		/// all related to the same monitored data object, but where 
		/// only the one with the highest operational significance 
		/// can be active at a time. See EEMUA Publication 191, A8.3.2. 
		/// </summary>
		[EnumMember] EclipsedAlarm       = 4,

		/// <summary>
		/// An alarm that is represented by multiple conditions, 
		/// any number of which can be active at the same time.  
		/// For alarms of this type, the alarm is active when at 
		/// least one of its conditions is active, and is inactive 
		/// when none of its conditions are active. See EEMUA 
		/// Publication 191, A8.2.
		/// </summary>
		[EnumMember] GroupedAlarm        = 5,

		/// <summary>
		/// An event similar to an alarm, but that is a lower 
		/// priority and has no significant consequences if missed. 
		/// Alerts are often referred to as warnings or prompts.  
		/// See EEMUA Publication 191, Appendix 7. 
		/// </summary>
		[EnumMember] Alert               = 6,

		/// <summary>
		/// An event that indicates that the server has discarded 
		/// one or more queued messages from its poll queue. This 
		/// event type is only used when event polling is in use. 
		/// </summary>
		[EnumMember] DiscardedMessage    = 7,

	}
}