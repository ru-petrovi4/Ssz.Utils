<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic">
    <DrawingBrush x:Key="CheckerBrush" Viewport="0,0,15,15" ViewportUnits="Absolute" TileMode="Tile">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing Brush="#FFF6F6F6">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0 100,100" />
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="#FFF0F0F0">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="0,0 50,50" />
                            <RectangleGeometry Rect="50,50 50,50" />
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>

    <Style x:Key="ClassicButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="4"
                                   StrokeThickness="1"
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ClassicButtonStyle"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ClassicButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderBrush" Value="{x:Static themes:ClassicBorderDecorator.ClassicBorderBrush}" />
        <Setter Property="BorderThickness" Value="3" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0,0,1,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <themes:ClassicBorderDecorator x:Name="ContentContainer"
                                                   BorderStyle="Raised"
                                                   BorderThickness="{TemplateBinding BorderThickness}"
                                                   BorderBrush="{TemplateBinding BorderBrush}"
                                                   Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </themes:ClassicBorderDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderStyle" Value="RaisedFocused" TargetName="ContentContainer" />
                        </Trigger>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderStyle" Value="RaisedFocused" TargetName="ContentContainer" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderStyle" Value="RaisedPressed" TargetName="ContentContainer" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter Property="BorderStyle" Value="RaisedPressed" TargetName="ContentContainer" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ClassicToggleButtonStyle"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderBrush" Value="{x:Static themes:ClassicBorderDecorator.ClassicBorderBrush}" />
        <Setter Property="BorderThickness" Value="3" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0,0,1,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <themes:ClassicBorderDecorator x:Name="ContentContainer"
                                                   BorderStyle="Raised"
                                                   BorderThickness="3"
                                                   BorderBrush="{TemplateBinding BorderBrush}"
                                                   Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </themes:ClassicBorderDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderStyle" Value="RaisedFocused" TargetName="ContentContainer" />
                        </Trigger>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderStyle" Value="RaisedFocused" TargetName="ContentContainer" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderStyle" Value="RaisedPressed" TargetName="ContentContainer" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter Property="BorderStyle" Value="RaisedPressed" TargetName="ContentContainer" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SliderButtonStyle"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TouchScreenSliderThumbStyle"
           TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <!--
        <Setter Property="Height"
          Value="14" />-->
        <Setter Property="Width"
                Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=ActualHeight, Mode=OneWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Ellipse x:Name="Ellipse"
                             StrokeThickness="1">
                        <Ellipse.Stroke>
                            <LinearGradientBrush StartPoint="0,0"
                                                 EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#FFCCCCCC"
                                                      Offset="0.0" />
                                        <GradientStop Color="#FF444444"
                                                      Offset="1.0" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Ellipse.Stroke>
                        <Ellipse.Fill>
                            <LinearGradientBrush EndPoint="0.5,1"
                                                 StartPoint="0.5,0">
                                <GradientStop Color="#FF7381F9"
                                              Offset="1" />
                                <GradientStop Color="White" />
                            </LinearGradientBrush>
                        </Ellipse.Fill>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(Shape.Fill).
                    (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                            Storyboard.TargetName="Ellipse">
                                            <EasingColorKeyFrame KeyTime="0"
                                                                 Value="#FF3843C4" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(Shape.Fill).
                    (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                            Storyboard.TargetName="Ellipse">
                                            <EasingColorKeyFrame KeyTime="0"
                                                                 Value="#FF211AA9" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(Shape.Fill).
                    (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                            Storyboard.TargetName="Ellipse">
                                            <EasingColorKeyFrame KeyTime="0"
                                                                 Value="#FFC5CBF9" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Ellipse>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ZoomSliderButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ZoomSliderRepeatButtonControlTemplate" TargetType="{x:Type RepeatButton}">
        <Grid>
            <ContentPresenter Width="14" Height="14" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ZoomSliderControlTemplate" TargetType="{x:Type Slider}">
        <Grid Width="133" Height="16">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="16" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="16" />
            </Grid.ColumnDefinitions>
            <Rectangle Grid.Column="1" Grid.ColumnSpan="1" Height="1" Margin="0 -1 0 0" VerticalAlignment="Center" Stroke="{TemplateBinding Foreground}" />
            <!--<Rectangle Grid.ColumnSpan="1" Margin="-1,0,0,0" Stroke="{DynamicResource SliderShadowBrush}" VerticalAlignment="Center" Height="7" Grid.Column="1" Width="1" HorizontalAlignment="Center"/>-->
            <Rectangle Grid.Column="1" Grid.ColumnSpan="1" Height="1" Margin="0 1 0 0" VerticalAlignment="Center" Stroke="{TemplateBinding Foreground}" />
            <Rectangle Grid.Column="1" Grid.ColumnSpan="1" Width="1" Height="7" Margin="0 1 0 1" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{TemplateBinding Foreground}" />
            <Rectangle x:Name="rectangle" Grid.Column="1" Grid.ColumnSpan="1" Margin="0" Fill="Transparent" Stroke="{x:Null}" StrokeThickness="0" />
            <Track x:Name="PART_Track" Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="1" Height="16">
                <Track.DecreaseRepeatButton>
                    <RepeatButton x:Name="leftButton" Command="Slider.DecreaseLarge" Style="{DynamicResource ZoomSliderButtonStyle}" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb x:Name="thumb" Style="{DynamicResource SliderThumbStyle}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton x:Name="rightButton" Command="Slider.IncreaseLarge" Style="{DynamicResource ZoomSliderButtonStyle}" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton x:Name="repeatButton" Command="Slider.DecreaseLarge" Style="{DynamicResource ZoomSliderRepeatButtonStyle}">
                <Grid Margin="0" Background="Transparent" IsHitTestVisible="True">
                    <Path Width="10" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,0" Fill="{x:Null}" Stretch="Fill" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" />
                </Grid>
            </RepeatButton>
            <RepeatButton x:Name="repeatButton_Copy" Grid.Column="2" Command="Slider.IncreaseLarge" Style="{DynamicResource ZoomSliderRepeatButtonStyle}">
                <Grid Margin="0" Background="Transparent" IsHitTestVisible="True">
                    <Path Width="2" Height="10" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L0,1" Stretch="Fill" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" />
                    <Path Width="10" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,0" Stretch="Fill" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" />
                </Grid>
            </RepeatButton>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="leftButton" Property="IsMouseOver" Value="True">
                <Setter TargetName="thumb" Property="Background" Value="Red" />
            </Trigger>
            <Trigger SourceName="rightButton" Property="IsMouseOver" Value="True">
                <Setter TargetName="thumb" Property="Background" Value="Red" />
            </Trigger>
            <Trigger SourceName="thumb" Property="IsMouseOver" Value="True">
                <Setter TargetName="thumb" Property="Background" Value="Red" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ZoomSliderStyle" TargetType="{x:Type Slider}">
        <Setter Property="Height" Value="16" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="LargeChange" Value="10" />
        <Setter Property="Maximum" Value="500" />
        <Setter Property="Minimum" Value="10" />
        <Setter Property="SmallChange" Value="1" />
        <Setter Property="Template" Value="{DynamicResource ZoomSliderControlTemplate}" />
        <Setter Property="Value" Value="100" />
        <Setter Property="Width" Value="133" />
    </Style>
</ResourceDictionary>