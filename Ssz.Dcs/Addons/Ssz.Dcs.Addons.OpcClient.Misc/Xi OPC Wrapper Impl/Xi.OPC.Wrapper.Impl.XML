<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xi.OPC.Wrapper.Impl</name>
    </assembly>
    <members>
        <member name="T:Xi.OPC.Wrapper.Impl.OpcDa_BrowseFilters">
            <summary>
            The Browse filters used by the OpcDaBrowser. Although the DA and AE Browsers 
            use a new filter for each browse request, the HDA Browser uses the same 
            filter for all browse requests. Therefore, if the HDA browse filter changes, 
            a new HDA Browser must be instantiated. As a result, the Browse Filters are 
            not included in the CurrentBrowseContext because the CurrentBrowseContext is 
            newly instantiated for each new browse request (but not for continuation 
            requests).
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcDa_BrowseFilters.OriginalFilterSet">
            <summary>
            The original filter criteria. 
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcDa_BrowseFilters.DataTypeFilter">
            <summary>
            The OPC DA data type filter. 
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcDa_BrowseFilters.cliDataTypeFilter">
            <summary>
            The CLI data type filter. 
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcDa_BrowseFilters.AccessRightsFilter">
            <summary>
            The access rights filter. 
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcDa_BrowseFilters.VendorFilter">
            <summary>
            The vendor-specific filter. 
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcDa_BrowseFilters.#ctor(Xi.Contracts.Data.FilterSet,Xi.OPC.Wrapper.Impl.CurrentBrowseContext)">
            <summary>
            This constructor parses the list of filter criteria and converts it into OPC DA Browse 
            filter criteria.  The current browse context is passed in as a parameter because the 
            BrowseType can be included in the filter, and is defaulted if it is not. 
            </summary>
            <param name="filterSet">
            The FilterSet that contains the filter parameters.
            </param>
            <param name="currentBrowseContext">
            The current context for the browse.
            </param>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcDa_CurrentBrowseInfo.ItemID">
            <summary>
            The OPC DA ItemID for the starting object.
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcDa_CurrentBrowseInfo.Properties">
            <summary>
            The list of OPC DA Properties of the starting object.
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcBrowser.CurrentBrowseContext">
            <summary>
            The browse info used in the FindObjects() call.  It is instantiated 
            for each new FindObjects call, but not for continuation calls (those 
            whose FindCriteria is null).
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcBrowser.BrowserType">
            <summary>
            The type of browser server called. The type is uint to allow for 
            future expansion.
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcBrowser.ChangeBrowsePosition(Xi.Contracts.Data.ObjectPath)">
            <summary>
            This method calls the OPC DA ChangeBrowsePosition method to set the 
            starting position.
            </summary>
            <param name="startingPath">
            The new Browse position.
            </param>
            <returns>
            Returns 0 if the browse down succeeded. Positive if the browse down failed for 
            the leaf of the starting path. Otherwise negative.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcDaBrowser.GetObjectAttributes(Xi.Contracts.Data.ObjectAttributes@)">
            <summary>
            This method gets the DataTypeId, IsWritable, and FastestScanRate attributes of an object 
            from the corresponding OPC DA Properties.  Null if the object is not a data object.
            </summary>
            <param name="objectAttrs">
            This ref parameter contains the name of the object, supplied by the caller, 
            and the attributes whose value is to be provided by the method.
            </param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcDaBrowser.ChangeBrowsePositionDown(System.Int32,Xi.Contracts.Data.ObjectPath)">
            <summary>
            This method calls the OPC DA ChangeBrowsePosition method repetitively starting from the   
            specified element in the starting path to reach the object identified by the starting path.
            It also sets the ObjectId in the CurrentDaBrowseInfo.
            </summary>
            <param name="startingPathOffset">
            The index of the element in the start path to begin browsing down.
            </param>
            <param name="startingPath">
            The new Browse position.
            </param>
            <returns>
            <para>Returns CurrentBrowseContext.ChangeBrowsePositionSuccess if the browse down succeeded. </para>
            <para>Returns CurrentBrowseContext.ChangeBrowsePositionLeafFail if the browse failed on the leaf of 
            the ObjectPath. </para>
            <para>Returns CurrentBrowseContext.ChangeBrowsePositionInstanceIdFail if the browse down failed on 
            the InstanceId. </para>
            <para>Otherwise, returns CurrentBrowseContext.ChangeBrowsePositionAbsoluteFail. </para>
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcDaBrowser.GetItemID(System.String)">
            <summary>
            This method gets the OPC DA Item LocalId and converts it to an ObjectId.
            </summary>
            <param name="objectName">
            The name of the object for which the ObjectId is to be provided.
            </param>
            <returns>
            The Object LocalId converted from the DA ItemId of the object. Null if the 
            object does not have an ItemId. </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcDaBrowser.QueryCustomProperties(System.String,System.UInt16)">
            <summary>
            This method returns the list of ObjectAttributes for the custom (server-specific) 
            OPC DA Properties supported by an object.
            </summary>
            <param name="itemID">
            The itemID of the item for which properties are requested.
            </param>
            <param name="DataTypeFilter">
            The Data Type Filter to be used to filter properties.
            </param>
            <returns>
            The list of ObjectAttributes created from the properties of the object.
            </returns>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.CurrentBrowseContext">
            <summary>
            The browse info used for a new browse request, and reused for continuations.  
            For each new browse request, a new CurrentBrowseContext is instantiated.
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.CurrentBrowseContext.StartingObjectAttributesFilterOperand">
            <summary>
            The StartingObjectAttributes FilterOperand. See the FilterOperand class 
            for the definition of StartingObjectAttributes.
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.CurrentBrowseContext.IsRootPath">
            <summary>
            When true, the StartingPath is a relative path. 
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.CurrentBrowseContext.SomethingToReturn">
            <summary>
            The browser found something to return. 
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.CurrentBrowseContext.ChangeBrowsePositionResults">
            <summary>
            The results of the attempt to change the browse position while setting 
            the browse context. 
            0 if the starting path is the new browse position. 
            1 if the parent of the leaf of the starting path is the new browse position 
            	=>the browse failed when moving to the leaf, 
            -1 for all other cases (the change browse position failed).
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.CurrentBrowseContext.BrowseTypesRequested">
            <summary>
            The browse types requested. 
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.CurrentBrowseContext.BrowseTypeUsed">
            <summary>
            The browse type used. 
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.CurrentBrowseContext.EnumString">
            <summary>
            The EnumString enumerator returned by any of the wrapped OPC servers.
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.CurrentBrowseContext.ListOfObjectAttributes">
            <summary>
            The EnumString enumerator returned by any of the wrapped OPC servers or if 
            the client requests the attributes of the starting object.
            </summary>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.ContextImpl">
            <summary>
            This partial class defines the Discovery Methods of the server 
            implementation that override the virtual methods defined in the 
            Context folder of the ServerBase project.
            </summary>
            <typeparam name="TList">
            The type of the lists managed by the context.
            </typeparam>
            <summary>
            This partial class defines the Context Management methods of the server 
            implementation that override the virtual methods defined in the 
            Context folder of the ServerBase project.
            </summary>
            <summary>
            Each client is represented by an instance of a this class.
            </summary>
            <summary>
            This partial class defines the Discovery Methods of the server 
            implementation that override the virtual methods defined in the 
            Context folder of the ServerBase project.
            </summary>
            <typeparam name="TList">
            The type of the lists managed by the context.
            </typeparam>
            <summary>
            This partial class defines the Context Management methods of the server 
            implementation that override the virtual methods defined in the 
            Context folder of the ServerBase project.
            </summary>
            <typeparam name="TList">
            The type of the lists managed by the context.
            </typeparam>
            <summary>
            This partial class defines the Alarms and Events methods of the server 
            implementation that override the virtual methods defined in the 
            Context folder of the ServerBase project.
            </summary>
            <typeparam name="TList">
            The type of the lists managed by the context.
            </typeparam>
            <summary>
            Each client is represented by an instance of a this class.
            </summary>
            <summary>
            This partial class defines the Callback methods of the server 
            implementation that override the virtual methods defined in the 
            Context folder of the ServerBase project.
            </summary>
            <typeparam name="TList">
            The type of the lists managed by the context.
            </typeparam>
            <summary>
            
            </summary>
            <summary>
            Managed OPC Servers.
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.ContextImpl.OpcBrowser">
            <summary>
            The OPC browser.  This object is used to for an instance of a browse, 
            including continuations that call the wrapped server IEnumString.
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.ContextImpl.OpcDaBrowser">
            <summary>
            The OPC DA browser.  This object should be instantiated once per 
            Client Context and used for all browses to the wrapped DA server.
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.ContextImpl.OpcAeBrowser">
            <summary>
            The OPC AE browser.  This object should be instantiated once per 
            Client Context and used for all browses to the wrapped HDA server.
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.ContextImpl.OpcHdaBrowser">
            <summary>
            The OPC HDA browser.  This object should be instantiated once per 
            Client Context and used for all browses to the wrapped HDA server.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Xi.OPC.Wrapper.Impl.ContextImpl.IsStartingPathTheRoot(Xi.Contracts.Data.ObjectPath)" -->
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.PrepareToBrowse(Xi.Contracts.Data.FindCriteria)">
            <summary>
            This method prepares the server to browse. It strips the top-level elements from the 
            path, changes the browse position, and converts the filter strings for use by the 
            server to be called. 
            </summary>
            <param name="findCriteria">
            The starting path and filter strings.
            </param>
            <returns>
            The results of attempting to change the browse position.
            Returns 0 if the browse down succeeded. 
            Returns positive if the browse down failed for 
            the leaf of the starting path. Otherwise negative.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.GetEnumerations(System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.ObjectAttributes})">
            <summary>
            This method gets the requested number of enumerations returned from the 
            browse and converts each into an ObjectAttributes object.
            </summary>
            <param name="numberToReturn">
            The number of enumerations to get.
            </param>
            <param name="objectAttributesList">
            The list of object attributes to which the new object attributes will be appended.
            </param>
            <returns>
            The list of ObjectAttributes created from the enumerations.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnValidateOpenEndpointSecurity(Xi.Server.Base.EndpointEntry{Xi.Server.Base.ListRoot})">
            <summary>
            The server implementation override used to validate the security for the 
            IResourceManagement.OpenEndpoint() method.  This method throws an exception 
            if the validation fails.
            <param name="endpointEntry">
            The endpoint to be validated.
            </param>
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnStatus">
            <summary>
            This method implements the server-specific behavior of the corresponding 
            Xi interface method.  It overrides its virtual method in the ContextBase 
            class of the ServerBase project.
            </summary>
            <returns>
            The status of the Xi server and the status of wrapped servers. 
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnLookupResultCodes(System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method implements the server-specific behavior of the corresponding 
            Xi interface method.  It overrides its virtual method in the ContextBase 
            class of the ServerBase project.
            </summary>
            <param name="resultCodes">
            The result codes for which text descriptions are being requested.
            </param>
            <returns>
            The list of result codes and if a result code indicates success, 
            the requested text descriptions. The size and order of this 
            list matches the size and order of the resultCodes parameter.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnGetErrorString(System.UInt32,System.UInt32)">
            <summary>
            This override gets the locale ids supported by a single server type of the server. 
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <param name="serverType">
            The server type for which the error string is being requested.
            Only one server type may be specified by this parameter.
            </param>
            <param name="errorCode">
            The error code for which the error string is being requested.
            </param>
            <returns>
            The result code and, if the result code indicates success, the 
            error string that describes the the error code.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnFindTypes(Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            This method implements the server-specific behavior of the corresponding 
            Xi interface method.  It overrides its virtual method in the ContextBase 
            class of the ServerBase project.
            </summary>
            <param name="findCriteria">
            The criteria used by the server to find types.  If this 
            parameter is null, then this call is a continuation of the 
            previous find.
            </param>
            <param name="numberToReturn">
            The maximum number of objects to return in a single response.
            </param>
            <returns>
            The list of requested type attributes.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnFindRootPaths(Xi.Contracts.Data.ObjectPath)">
            <summary>
            This method implements the server-specific behavior of the corresponding 
            Xi interface method.  It overrides its virtual method in the ContextBase 
            class of the ServerBase project.
            </summary>
            <param name="objectPath">
            The root path that identifies the object for which alternate 
            root paths are being requested. 
            </param>
            <returns>
            The list of additional root paths to the specified object.  
            Null if specified objectPath is the only root path to the 
            object. An exception is thrown if the specified objectPath is 
            invalid.  
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnGetStandardMib">
            <summary>
            This method implements the server-specific behavior of the corresponding 
            Xi interface method.  It overrides its virtual method in the ContextBase 
            class of the ServerBase project.
            </summary>
            <returns>
            The standard MIB is returned.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnGetVendorMib(System.Collections.Generic.List{Xi.Contracts.Data.InstanceId})">
            <summary>
            This method implements the server-specific behavior of the corresponding 
            Xi interface method.  It overrides its virtual method in the ContextBase 
            class of the ServerBase project.
            </summary>
            <param name="vendorMibObjectIds">
            The list of identifiers for the vendor MIB objects to be returned.
            </param>
            <returns>
            The requested vendor-specific MIB objects.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnReInitiate(System.UInt32@,System.String@)">
            <summary>
            This method implements the server-specific behavior of the corresponding 
            Xi interface method.  It overrides its virtual method in the ContextBase 
            class of the ServerBase project.
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnConclude">
            <summary>
            This method implements the server-specific behavior of the corresponding 
            Xi interface method.  It overrides its virtual method in the ContextBase 
            class of the ServerBase project.
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnClientKeepAlive">
            <summary>
            This method implements the server-specific behavior of the corresponding 
            Xi interface method.  It overrides its virtual method in the ContextBase 
            class of the ServerBase project.
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnGetAlarmSummary(Xi.Contracts.Data.InstanceId)">
            <summary>
            This method implements the server-specific behavior of the corresponding 
            Xi interface method.  It overrides its virtual method in the ContextBase 
            class of the ServerBase project.
            </summary>
            <param name="eventSourceId">
            The InstanceId for the event source for which alarm summaries are 
            being requested.
            </param>
            <returns>
            The summaries of the alarms that can be generated by the specified 
            event source.  
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Xi.OPC.Wrapper.Impl.ContextImpl.OnNegotiateCallbackParams(System.UInt32,System.TimeSpan)" -->
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OnDataChange(System.UInt32,System.UInt32,Xi.OPC.COM.API.cliHRESULT,Xi.OPC.COM.API.cliHRESULT,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            This method will be invoked as a result of the OPC DA COM
            server issuing a call back to update data.
            </summary>
            <param name="dwTransid"></param>
            <param name="hGroup"></param>
            <param name="hrMasterquality"></param>
            <param name="hrMastererror"></param>
            <param name="hClientItems"></param>
            <param name="vDataValues"></param>
            <param name="uStatusCode"></param>
            <param name="dtTimeStamps"></param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OpcCreateInstance(System.UInt32@,Xi.Contracts.Data.ServerDescription)">
            <summary>
            This method is invoked to create the underlying COM servers.
            Each of these servers implements its coresponding methods as
            defined in XiOPCWrapper.Interfaces.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.ContextImpl.OpcRelease">
            <summary>
            By setting the refereces to null the C++ destructor 
            runs which then Release the COM server.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xi.OPC.Wrapper.Impl.ContextImpl.IOPCServer">
            <summary>
            Managed version of the OPC DA Server.
            </summary>
        </member>
        <member name="P:Xi.OPC.Wrapper.Impl.ContextImpl.IOPCHDA_Server">
            <summary>
            Managed version of the OPC HDA Server.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Xi.OPC.Wrapper.Impl.ContextImpl.IOPCEventServer" -->
        <member name="P:Xi.OPC.Wrapper.Impl.ContextImpl.IOPCCommonDA">
            <summary>
            Managed version of the OPC Common interface for the DA Server.
            </summary>
        </member>
        <member name="P:Xi.OPC.Wrapper.Impl.ContextImpl.IOPCCommonHDA">
            <summary>
            Managed version of the OPC Common interface for the HDA Server.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Xi.OPC.Wrapper.Impl.ContextImpl.IOPCCommonAE" -->
        <member name="P:Xi.OPC.Wrapper.Impl.ContextImpl.IOPCBrowseServerAddressSpace">
            <summary>
            Managed interface for the OPC DA Server browser.
            </summary>
        </member>
        <member name="P:Xi.OPC.Wrapper.Impl.ContextImpl.IOPCItemProperties">
            <summary>
            Managed interface for the OPC DA Server properties.
            </summary>
        </member>
        <member name="P:Xi.OPC.Wrapper.Impl.ContextImpl.IOPCHDA_SyncRead">
            <summary>
            Managed interface for the OPC DA Server synchronous read.
            </summary>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.EventsList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.EventsList.OnAddEventMessageFields(System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
            This method is used to request that category-specific fields be 
            included in event messages generated for alarms and events of 
            the category for this Event/Alarm List.
            </summary>
            <param name="categoryId">
            The category for which event message fields are being added.
            </param>
            <param name="fieldObjectTypeIds">
            The list of category-specific fields to be included in the event 
            messages generated for alarms and events of the category.  Each field 
            is identified by its ObjectType LocalId obtained from the EventMessageFields 
            contained in the EventCategoryConfigurations Standard MIB element.
            </param>
            <returns>
            The client alias and result codes for the fields that could not be  
            added to the event message. Returns null if all succeeded.  
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.EventsList.OnEnableListUpdating(System.Boolean)">
            <summary>
            
            </summary>
            <param name="enableUpdating"></param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.EventsList.OnTouchList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.EventsList.OnEvent(System.UInt32,System.Boolean,System.Boolean,Xi.Contracts.Data.EventMessage[])">
            <summary>
            This method is invoked from the OPC Wrapper code to notify of event messages.
            </summary>
            <param name="hClientSubscription"></param>
            <param name="bRefresh"></param>
            <param name="bLastRefresh"></param>
            <param name="Events"></param>
            <returns></returns>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.XiServiceMain">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiServiceMain.#ctor(Xi.OPC.Wrapper.Impl.XiServiceMain.MainProgramType)">
            <summary>
            
            </summary>
            <param name="mainType"></param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiServiceMain.WriteLine(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiServiceMain.ConsoleWriteLine(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiServiceMain.OnStartDataServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiServiceMain.OnStopDataServer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Xi.OPC.Wrapper.Impl.XiServiceMain.EventLog">
            <summary>
            
            </summary>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.XiServiceMain.MainProgramType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.#cctor">
            <summary>
            The static XiOPCWrapper Constructor reads the App.Config file to
            determine the types of OPC Servers being wrapped.
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.CreateTypeId(System.UInt16)">
            <summary>
            This method creates a TypeId from a COM Variant type
            </summary>
            <param name="comType">
            The COM Variant type.
            </param>
            <returns>TypeId object or null</returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnGetServerDetails(Xi.OPC.Wrapper.Impl.ContextImpl)">
            <summary>
            This override gets the XiOPCWrapper Details that are part of the ServerDescription.
            </summary>
            <param name="context">
            The context identifier.
            </param>
            <returns>
            The ServerDetails.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnSetServerRoles(Xi.OPC.Wrapper.Impl.ContextImpl)">
            <summary>
            This override adds the server-specific methods and features to the 
            standard methods and features required by the server types supported 
            by the server. 
            interface method.
            </summary>
            <param name="context">
            The context identifier.
            </param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnSetServerMethodsAndFeatures(Xi.OPC.Wrapper.Impl.ContextImpl)">
            <summary>
            This override adds the server-specific methods and features to the 
            standard methods and features required by the server types supported 
            by the server. 
            interface method.
            </summary>
            <param name="context">
            The context identifier.
            </param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnSetVendorMib(Xi.OPC.Wrapper.Impl.ContextImpl)">
            <summary>
            This override adds the server-specific methods and features to the 
            standard methods and features required by the server types supported 
            by the server. 
            interface method.
            </summary>
            <param name="context">
            The context identifier.
            </param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnGetLocaleIds(Xi.OPC.Wrapper.Impl.ContextImpl,System.UInt32)">
            <summary>
            This override gets the locale ids supported by a single server type of the server. 
            interface method.
            </summary>
            <param name="context">
            The context identifier.
            </param>
            <param name="serverType">
            The server type for which locale ids are being requested.
            Only one server type may be specified by this parameter.
            </param>
            <returns>The list of locale ids supported by the specified server type.</returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnGetEventFilters(Xi.OPC.Wrapper.Impl.ContextImpl)">
            <summary>
            This override gets the ids of the standard event message fields that can be 
            used for filtering by alarms and events servers.
            </summary>
            <param name="context">
            The context identifier.
            </param>
            <returns>The list of ids for the supported filters.</returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnGetCategoryConfiguration(Xi.OPC.Wrapper.Impl.ContextImpl)">
            <summary>
            This override gets the CategoryConfigurations supported by the server.
            </summary>
            <param name="context">
            The context identifier.
            </param>
            <returns>
            The list of CategoryConfigurations supported by the server.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnGetDataJournalOptions(Xi.OPC.Wrapper.Impl.ContextImpl)">
            <summary>
            This override gets the DataJournalOptions supported by a data journal server.
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <returns>
            The Data Journal Options supported by the data journal.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnGetEventJournalFilters(Xi.OPC.Wrapper.Impl.ContextImpl)">
            <summary>
            This override gets the ids of the standard event message fields that can be 
            used for filtering by event journal servers.
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <returns>
            The list of event message fields that can be used for filtering the 
            event journal.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnGetEventJournalCategoryConfiguration(Xi.OPC.Wrapper.Impl.ContextImpl)">
            <summary>
            This override gets the CategoryConfigurations supported by an event journal server.
            </summary>
            <param name="context">
            The context for this method invocation
            </param>
            <returns>
            The list of categories supported by the event journal.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnValidateContextSecurity(System.String,System.String,System.ServiceModel.OperationContext)">
            <summary>
            The server implementation override used to validate the security for the 
            IResourceManagement.Initiate() method.
            </summary>
            <param name="applicationName">The client application name to authorize.</param>
            <param name="workstationName">The client workstation name to authorize</param>
            <param name="workstationName">The Operation Context to authorize</param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnGetPrimaryIdentity(System.ServiceModel.OperationContext)">
            <summary>
            The server implementation override used to support the 
            IResourceManagement.Initiate() method.
            </summary>
            <param name="ctx">The Operation Context that identifies the calling user.</param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.XiOPCWrapper.OnInitiate(System.String,System.String,System.UInt32@,System.UInt32@,Xi.Contracts.Constants.ContextOptions,System.ServiceModel.OperationContext,System.Security.Principal.IIdentity,System.Collections.Generic.List{Xi.Contracts.Data.EndpointDefinition},System.String@)">
            <summary>
            The server implementation override used to support the 
            IResourceManagement.Initiate() method.
            </summary>
            <param name="applicationName"></param>
            <param name="workstationName"></param>
            <param name="localeId"></param>
            <param name="contextTimeout"></param>
            <param name="contextOptions"></param>
            <param name="ctx"></param>
            <param name="listEndpointDefinitions"></param>
            <param name="reInitiateKey"></param>
            <returns>An instance of a context to be used by this client.</returns>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.OpcHdaTime">
            <summary>
            This internal class is used to take a Xi Filter Criterion 
            and convert it into an OPC HDA Time.
            </summary>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.DataJournalList">
            <summary>
            This implementation of a Data Journal List is used to maintain 
            a collection of historical data value collections.  Each value 
            maintained by a Data Journal List consists of collection of 
            data values where each value is associated with a specific time.
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataJournalList.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isDisposing"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataJournalList.OnAddDataObjectsToList(System.Collections.Generic.List{Xi.Server.Base.ValueRoot})">
            <summary>
            
            </summary>
            <param name="dataListEntries"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataJournalList.OnNewDataListValue(System.UInt32,System.UInt32,Xi.Contracts.Data.InstanceId)">
            <summary>
            This method is used to obtain an instance of a DataListValue which 
            is the class used by the OPC HDA wrapper as its data value.
            </summary>
            <param name="clientAlias"></param>
            <param name="serverAlias"></param>
            <param name="instanceId"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataJournalList.OnRemoveDataObjectsFromList(System.Collections.Generic.List{Xi.Contracts.Data.AliasResult},System.Collections.Generic.List{Xi.Server.Base.ValueRoot})">
            <summary>
            
            </summary>
            <param name="listAliasResult"></param>
            <param name="dataListEntries"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataJournalList.OnReadJournalDataForTimeInterval(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            
            </summary>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="numValuesPerAlias"></param>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataJournalList.OnReadJournalDataAtSpecificTimes(System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{System.UInt32})">
            <summary>
            
            </summary>
            <param name="timestamps"></param>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataJournalList.OnReadJournalDataChanges(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            
            </summary>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="numValuesPerAlias"></param>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataJournalList.OnReadCalculatedJournalData(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Xi.Contracts.Data.AliasAndCalculation})">
            <summary>
            
            </summary>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="calculationPeriod"></param>
            <param name="serverAliasesAndCalculations"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataJournalList.OnReadJournalDataProperties(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
            
            </summary>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="serverAlias"></param>
            <param name="propertiesToRead"></param>
            <returns></returns>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.DataListValue">
            <summary>
            The ReadListDataValue class is used to hold the actual OPC DA Data Value.
            </summary>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.DataList">
            <summary>
            The Data List class is used to represent a list of current process data values.  
            The data values held by this list represents current process values with a status 
            and a time stamp.
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.#ctor(Xi.OPC.Wrapper.Impl.ContextImpl,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet,Xi.Contracts.Data.StandardMib)">
            <summary>
            This constructor is used to create a Data List and creates a corresponding OPC DA Group.
            </summary>
            <param name="context"></param>
            <param name="clientId"></param>
            <param name="updateRate"></param>
            <param name="bufferingRate"></param>
            <param name="listType"></param>
            <param name="listKey"></param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.Dispose(System.Boolean)">
            <summary>
            Invoke the Dispose to make sure all clean up is done.
            </summary>
            <param name="isDisposing"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.OnAddDataObjectsToList(System.Collections.Generic.List{Xi.Server.Base.ValueRoot})">
            <summary>
            This method is invoked to Add Items to the OPC DA group 
            associated with this Xi Data List.
            </summary>
            <param name="dataListEntries"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.OnNewDataListValue(System.UInt32,System.UInt32,Xi.Contracts.Data.InstanceId)">
            <summary>
            This method is used to obtain an instance of a DataListValue which 
            is the class used by the OPC DA wrapper to cache a data value.
            </summary>
            <param name="clientAlias"></param>
            <param name="serverAlias"></param>
            <param name="instanceId"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.OnRemoveDataObjectsFromList(System.Collections.Generic.List{Xi.Contracts.Data.AliasResult},System.Collections.Generic.List{Xi.Server.Base.ValueRoot})">
            <summary>
            
            </summary>
            <param name="listUintIdRes"></param>
            <param name="dataListEntries"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.OnModifyListAttributes(System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet)">
            <summary>
            
            </summary>
            <param name="updateRate"></param>
            <param name="filterSet"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.OnEnableListUpdating(System.Boolean)">
            <summary>
            
            </summary>
            <param name="enableUpdating"></param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.OnEnableListElementUpdating(System.Boolean,System.Collections.Generic.List{System.UInt32})">
            <summary>
            
            </summary>
            <param name="enableUpdating"></param>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.OnTouchList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.OnTouchDataObjects(System.Collections.Generic.List{System.UInt32})">
            <summary>
            
            </summary>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.OnReadData(System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method is invoked to perform a OPC DA server synchronous read.
            </summary>
            <param name="serverAliases">
            It is expected that this method will update both the Xi Servers cached 
            data value and the data value to be returned for this read request.
            </param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.OnAsyncReadData(System.Collections.Generic.List{System.UInt32})">
            <summary>
            
            </summary>
            <param name="serverAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.OnWriteValues(Xi.Contracts.Data.WriteValueArrays)">
            <summary>
            
            </summary>
            <param name="writeValueArrays"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.DataList.OnDataChange(Xi.OPC.COM.API.cliHRESULT,Xi.OPC.COM.API.cliHRESULT,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            This method will be invoked as a result of the OPC DA COM
            server issuing a call back to update data.
            </summary>
            <param name="hrMasterquality"></param>
            <param name="hrMastererror"></param>
            <param name="valueArrays"></param>
            <returns></returns>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.DataJournalListValue">
            <summary>
            The DataJournalListValue class is used to hold the actual OPC HDA Data Value.
            </summary>
        </member>
        <member name="P:Xi.OPC.Wrapper.Impl.DataJournalListValue.ItemId">
            <summary>
            The OPC HDA Item Id for this data value.
            </summary>
        </member>
        <member name="P:Xi.OPC.Wrapper.Impl.DataJournalListValue.StatusCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Xi.OPC.Wrapper.Impl.DataJournalListValue.ValueTransportTypeKey">
            <summary>
            The Data Value Type property is used to determine this instance value type.
            </summary>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.OpcAe_BrowseFilters">
            <summary>
            The Browse filters used by the OpcDaBrowser. Although the DA and AE Browsers 
            use a new filter for each browse request, the HDA Browser uses the same 
            filter for all browse requests. Therefore, if the HDA browse filter changes, 
            a new HDA Browser must be instantiated. As a result, the Browse Filters are 
            not included in the CurrentBrowseContext because the CurrentBrowseContext is 
            newly instantiated for each new browse request (but not for continuation 
            requests).
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcAe_BrowseFilters.OriginalFilterSet">
            <summary>
            The original filter criteria. 
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcAe_BrowseFilters.FilterString">
            <summary>
            The AE server-specific filter. 
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcAe_BrowseFilters.#ctor(Xi.Contracts.Data.FilterSet,Xi.OPC.Wrapper.Impl.CurrentBrowseContext)">
            <summary>
            This constructor parses the list of filter criteria and converts it into OPC DA Browse 
            filter criteria.  The current browse context is passed in as a parameter because the 
            BrowseType can be included in the filter, and is defaulted if it is not. 
            </summary>
            <param name="filterSet">
            The FilterSet that contains the filter parameters.
            </param>
            <param name="currentBrowseContext">
            The current context for the browse.
            </param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcAeBrowser.#ctor(Xi.OPC.COM.API.IOPCEventServerCli)">
            The host name and server name qualifier for the wrapped server 
            to be used in InstanceIds for items accessed from the wrapped server.
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcAeBrowser.ChangeBrowsePositionDown(System.Int32,Xi.Contracts.Data.ObjectPath)">
            <summary>
            This method calls the OPC AE ChangeBrowsePosition method repetitively starting from the   
            specified element in the starting path to reach the object identified by the starting path.
            It also sets the ObjectId in the CurrentDaBrowseInfo.
            </summary>
            <param name="startingPathOffset">
            The index of the element in the start path to begin browsing down.
            </param>
            <param name="startingPath">
            The new Browse position.
            </param>
            <returns>
            Returns 0 if the browse down succeeded. Positive if the browse down failed for 
            the leaf of the starting path. Otherwise negative.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcAeBrowser.GetObjectAttributes(Xi.Contracts.Data.ObjectAttributes@)">
            <summary>
            This method parses the list of filter criteria and converts it into 
            an OPC AE Browse filter string.
            </summary>
            <param name="criteria">
            The list of filter criteria.
            </param>
            <returns>
            The AE filter string.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcAeBrowser.GetQualifiedName(System.Boolean,System.String)">
            <summary>
            This method gets the OPC AE Qualified Area Name or Source Name from the AE 
            server and converts it to an ObjectId.
            </summary>
            <param name="bGetAreaName">
            Indicates, when TRUE, that the Qualified Area Name is to be retrieved.
            When FALSE, the Qualified Source Name is to be retrieved. 
            </param>
            <param name="name">
            The name of the Area or the Event Source for which the ObjectId is to be provided.
            </param>
            <returns>
            The Object LocalId converted from the AE Qualified Area or Source Name. </returns>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.OpcServerInfo">
            <summary>
            This class keeps some details with regard to an underlying OPC COM XiOPCWrapper.
            </summary>
        </member>
        <member name="T:Xi.OPC.Wrapper.Impl.OpcHda_BrowseFilters">
            <summary>
            The Browse filters used by the OpcHdaBrowser. Although the DA and AE Browsers 
            use a new filter for each browse request, the HDA Browser uses the same 
            filter for all browse requests. Therefore, if the HDA browse filter changes, 
            a new HDA Browser must be instantiated. As a result, the Browse Filters are 
            not included in the CurrentBrowseContext because the CurrentBrowseContext is 
            newly instantiated for each new browse request (but not for continuation 
            requests).
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcHda_BrowseFilters.OriginalFilterSet">
            <summary>
            The original filter criteria. 
            </summary>
        </member>
        <member name="F:Xi.OPC.Wrapper.Impl.OpcHda_BrowseFilters.HdaFilterList">
            <summary>
            The HDA filter 
            </summary>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcHda_BrowseFilters.#ctor(Xi.Contracts.Data.FilterSet,Xi.OPC.Wrapper.Impl.CurrentBrowseContext)">
            <summary>
            This constructor validates the list of filter criteria and adds each 
            valid FilterCriterion to HdaFilterList.  The current 
            browse context is passed in as a parameter because the BrowseType can be 
            included in the filter, and is defaulted if it is not. 
            </summary>
            <param name="filterSet">
            The FilterSet that contains the filter parameters.
            </param>
            <param name="currentBrowseContext">
            The current context for the browse.
            </param>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcHdaBrowser.ChangeBrowsePositionDown(System.Int32,Xi.Contracts.Data.ObjectPath)">
            <summary>
            This method calls the OPC HDA ChangeBrowsePosition method repetitively starting from the   
            specified element in the starting path to reach the object identified by the starting path.
            It also sets the ObjectId in the CurrentDaBrowseInfo.
            </summary>
            <param name="startingPathOffset">
            The index of the element in the start path to begin browsing down.
            </param>
            <param name="startingPath">
            The new Browse position.
            </param>
            <returns>
            Returns 0 if the browse down succeeded. Positive if the browse down failed for 
            the leaf of the starting path. Otherwise negative.
            </returns>
        </member>
        <member name="M:Xi.OPC.Wrapper.Impl.OpcHdaBrowser.GetItemID(System.String)">
            <summary>
            This method gets the OPC DA Item LocalId and converts it to an ObjectId.
            </summary>
            <param name="objectName">
            The name of the object for which the ObjectId is to be provided.
            </param>
            <returns>
            The Object LocalId converted from the DA ItemId of the object. Null if the 
            object does not have an ItemId. </returns>
        </member>
    </members>
</doc>
