<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Fluent="clr-namespace:Fluent"
                    xmlns:converters="clr-namespace:Fluent.Converters"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d">

    <ControlTemplate x:Key="Fluent.Ribbon.Templates.WindowCommands.CaptionButton"
                     TargetType="{x:Type Button}">
        <Grid Background="{TemplateBinding Background}">
            <ContentPresenter x:Name="contentPresenter"
                              Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter TargetName="contentPresenter" Property="Opacity" Value="0.75" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.WhiteBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="Fluent.Ribbon.Styles.WindowCommands.CaptionButton"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Foreground}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.WindowCommands.CaptionButton}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="46" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.MouseOver.Background}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Pressed.Background}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="RibbonButtonControlTemplate"
                     TargetType="{x:Type Fluent:Button}">
        <Border x:Name="border"
                Height="Auto"
                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <StackPanel x:Name="stackPanel"
                        Width="Auto"
                        Margin="{TemplateBinding Padding}"
                        Orientation="Vertical">
                <Fluent:IconPresenter x:Name="iconImage"
                                      Margin="0 2 0 0"
                                      IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                      LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}"
                                      MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}"
                                      SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />

                <Fluent:TwoLineLabel x:Name="controlLabel"
                                     Margin="2 0 2 0"
                                     HorizontalAlignment="Stretch"
                                     VerticalAlignment="Center"
                                     Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
            </StackPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Size" Value="Small">
                <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
                <Setter TargetName="controlLabel" Property="Margin" Value="2 0 2 0" />
                <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="iconImage" Property="Margin" Value="2 0 2 0" />
                <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter TargetName="border" Property="VerticalAlignment" Value="Stretch" />
                <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
                <Setter TargetName="controlLabel" Property="Margin" Value="2 0 2 0" />
                <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
                <Setter TargetName="iconImage" Property="Margin" Value="2 0 2 0" />
                <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
                <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
                <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsPressed" Value="False" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Fluent.Ribbon.Templates.Button.Simplified"
                     TargetType="{x:Type Fluent:Button}">
        <Border x:Name="border"
                Height="Auto"
                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <StackPanel x:Name="stackPanel"
                        Width="Auto"
                        Height="Auto"
                        Margin="{TemplateBinding Padding}"
                        VerticalAlignment="Stretch"
                        Orientation="Horizontal">
                <Grid x:Name="iconImageGrid"
                      Margin="0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center">
                    <Fluent:IconPresenter x:Name="iconImage"
                                          IconSize="{Binding (Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                          LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}"
                                          MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}"
                                          SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
                    <Border x:Name="iconImageBorder"
                            Width="{Binding ActualWidth, ElementName=iconImage}"
                            Height="{Binding ActualHeight, ElementName=iconImage}"
                            BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}"
                            BorderThickness="1"
                            Visibility="Collapsed" />
                </Grid>
                <Fluent:TwoLineLabel x:Name="controlLabel"
                                     Margin="2 0 0 0"
                                     HorizontalAlignment="Stretch"
                                     VerticalAlignment="Center"
                                     HasTwoLines="False"
                                     Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
            </StackPanel>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Size" Value="Small" />
                    <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Size" Value="Middle" />
                    <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Size" Value="Large" />
                    <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter TargetName="controlLabel" Property="Margin" Value="0" />
                <Setter TargetName="iconImageGrid" Property="Visibility" Value="Collapsed" />
            </MultiTrigger>

            <Trigger Property="Size" Value="Small">
                <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="stackPanel" Property="Margin" Value="4 0" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
                <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsPressed" Value="False" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="RibbonButtonStyle"
           TargetType="{x:Type Fluent:Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Large" />
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
        <Setter Property="Height" Value="68" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="Template" Value="{DynamicResource RibbonButtonControlTemplate}" />
        <Setter Property="Width" Value="Auto" />
        <Style.Triggers>
            <Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="68" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
                <Setter Property="Height" Value="22" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
                <Setter Property="Height" Value="22" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="Width" Value="22" />
            </Trigger>
            <Trigger Property="IsSimplified" Value="True">
                <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="MinHeight" Value="30" />
                <Setter Property="Padding" Value="6 2" />
                <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.Button.Simplified}" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSimplified" Value="True" />
                    <Condition Property="Size" Value="Small" />
                </MultiTrigger.Conditions>
                <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>