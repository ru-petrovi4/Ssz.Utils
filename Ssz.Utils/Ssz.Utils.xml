<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ssz.Utils</name>
    </assembly>
    <members>
        <member name="T:Ssz.Utils.Any">
            <summary>     ///     If func param stringIsLocalized = false, InvariantCulture is used.     ///     If func param stringIsLocalized = true, CultureHelper.SystemCultureInfo is used, which is corresponds operating system culture (see CultureHelper class).     /// </summary> 
        </member>
        <member name="T:Ssz.Utils.Any.StorageType">
            <summary>                 /// </summary> 
        </member>
        <member name="F:Ssz.Utils.Any.StorageType.Object">
            <summary>             ///     The data value is / was transported as an object.             /// </summary> 
        </member>
        <member name="F:Ssz.Utils.Any.StorageType.Double">
            <summary>             ///     The data value is / was transported as a double (64 Bits).             /// </summary> 
        </member>
        <member name="F:Ssz.Utils.Any.StorageType.UInt32">
            <summary>             ///     The data value is / was transported as a uint (32 Bits).             /// </summary> 
        </member>
        <member name="M:Ssz.Utils.Any.#ctor(System.Object)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.#ctor(Ssz.Utils.Any)">
            <summary>         ///          /// </summary>         /// <param name="that"></param> 
        </member>
        <member name="P:Ssz.Utils.Any.StorageUInt32">
            <summary>         ///          /// </summary> 
        </member>
        <member name="P:Ssz.Utils.Any.StorageDouble">
            <summary>         ///          /// </summary> 
        </member>
        <member name="P:Ssz.Utils.Any.StorageObject">
            <summary>         ///          /// </summary> 
        </member>
        <member name="P:Ssz.Utils.Any.ValueTypeCode">
            <summary>         ///          /// </summary> 
        </member>
        <member name="P:Ssz.Utils.Any.ValueType">
            <summary>                 /// </summary> 
        </member>
        <member name="P:Ssz.Utils.Any.ValueStorageType">
            <summary>         ///          /// </summary> 
        </member>
        <member name="M:Ssz.Utils.Any.ConvertToBestType(System.String,System.Boolean)">
            <summary>                 /// </summary>         /// <param name="sValue"></param>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.op_Equality(Ssz.Utils.Any,Ssz.Utils.Any)">
            <summary>                 /// </summary>         /// <param name="left"></param>         /// <param name="right"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.op_Inequality(Ssz.Utils.Any,Ssz.Utils.Any)">
            <summary>                 /// </summary>         /// <param name="left"></param>         /// <param name="right"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Compare(Ssz.Utils.Any,System.Double)">
            <summary>         ///     Uses ValueAsDouble(false), ValueAsInt32(false), ValueAsString(false) depending of ValueStorageType.         ///     Returns true if diff is less than or equal deadband.         /// </summary>         /// <param name="that"></param>         /// <param name="deadband"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Equals(System.Object)">
            <summary>         ///     Strictly copare, no conversions         /// </summary>         /// <param name="obj"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Equals(Ssz.Utils.Any)">
            <summary>         ///     Strictly copare, no conversions         /// </summary>         /// <param name="that"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.GetHashCode">
            <summary>                 /// </summary>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ToString">
            <summary>                 /// </summary>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.UInt32,System.TypeCode,System.Boolean)">
            <summary>         ///          /// </summary>         /// <param name="storageUInt32"></param>         /// <param name="valueTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Double,System.TypeCode,System.Boolean)">
            <summary>         ///          /// </summary>         /// <param name="storageDouble"></param>         /// <param name="valueTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(Ssz.Utils.Any)">
            <summary>         /// </summary> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Object)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.SByte)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Byte)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Int16)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.UInt16)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Int32)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.UInt32)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Boolean)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Single)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Double)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Decimal)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Int64)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.UInt64)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.DateTime)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.DBNull)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Char)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.String)">
            <summary>         ///          /// </summary>         /// <param name="value"></param> 
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsObject">
            <summary>         ///          /// </summary>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsString(System.Boolean,System.String)">
            <summary>                 /// </summary>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsInt32(System.Boolean)">
            <summary>         ///          /// </summary>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsUInt32(System.Boolean)">
            <summary>         ///          /// </summary>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsDouble(System.Boolean)">
            <summary>         ///          /// </summary>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsBoolean(System.Boolean)">
            <summary>         ///          /// </summary>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ValueAs``1(System.Boolean,System.String)">
            <summary>         ///          /// </summary>         /// <typeparam name="T"></typeparam>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ValueAs(System.Type,System.Boolean,System.String)">
            <summary>         ///     Returns requested type or null.          /// </summary>         /// <param name="asType"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ObjectValueAs(System.Object,System.Type,System.Boolean)">
            <summary>         ///     storageObject.ValueTypeCode == TypeCode.Object         /// </summary>         /// <param name="storageObject"></param>         /// <param name="asType"></param>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ConvertToString(System.Object,System.Boolean)">
            <summary>                 /// </summary>         /// <param name="value"></param>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ConvertToBoolean(System.String,System.Boolean)">
            <summary>         ///     Returns false, if String.IsNullOrWhiteSpace(value) || value.ToUpperInvariant() == "FALSE" || value == "0",         ///     otherwise true.         /// </summary>         /// <param name="value"></param>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ConvertToDouble(System.String,System.Boolean)">
            <summary>         ///     Returns Double 0.0 if String.IsNullOrWhiteSpace(value) or value is not correct number.         /// </summary>         /// <param name="value"></param>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,Ssz.Utils.Any,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     Returns true, if succeeded.         ///     if conversion fails, destination doesn't change.         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object, source.ValueTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"> </param>         /// <param name="source"> </param>         /// <param name="toTypeCode"> </param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns> true if succeded, false otherwise </returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.SByte,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Byte,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Int16,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.UInt16,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Int32,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.UInt32,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Char,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Int64,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.UInt64,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Boolean,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.DateTime,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Single,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Double,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Decimal,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ConvertFromNullOrDBNull(Ssz.Utils.Any@,System.TypeCode)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="toTypeCode"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.String,System.TypeCode,System.Boolean,System.String)">
            <summary>         ///     toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object         /// </summary>         /// <param name="destination"></param>         /// <param name="source"></param>         /// <param name="toTypeCode"></param>         /// <param name="stringIsLocalized"></param>         /// <param name="stringFormat"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsIsEnum(System.Type,System.Boolean)">
            <summary>            ///     asType is Enum         /// </summary>         /// <param name="asType"></param>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsObject(System.Type,System.Boolean)">
            <summary>         ///     asType has TypeCode.Object, _typeCode != TypeCode.Object         /// </summary>         /// <param name="asType"></param>         /// <param name="stringIsLocalized"></param>         /// <returns></returns> 
        </member>
        <member name="T:Ssz.Utils.BytesArrayEqualityComparer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ssz.Utils.BytesArrayEqualityComparer.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.BytesArrayEqualityComparer.Equals(System.Byte[],System.Byte[])">
            <summary>        
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.BytesArrayEqualityComparer.GetHashCode(System.Byte[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.CaseInsensitiveDictionary`1">
            <summary>
                Case Insensitive Dictionary
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ssz.Utils.CaseInsensitiveDictionary`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.CaseInsensitiveDictionary`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Ssz.Utils.CaseInsensitiveDictionary`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Ssz.Utils.CaseInsensitiveDictionary`1.TryGetValue(System.String)">
            <summary>
                Returns null, if not found.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ConfigurationHelper.GetValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,``0)">
            <summary>
                Returns defaultValue if key value is null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configuration"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvDb.#ctor(Microsoft.Extensions.Logging.ILogger{Ssz.Utils.CsvDb},Microsoft.Extensions.Logging.ILogger,System.IO.DirectoryInfo,Ssz.Utils.IDispatcher)">
            <summary>
                userFriendlyLogger: Messages are localized. Priority is Information, Error, Warning.    
                If csvDbDirectoryInfo is null, directory is not used.
                If !csvDbDirectoryInfo.Exists, directory is created.
                If dispatcher is not null monitors csvDbDirectoryInfo
                File names must be valid.
            </summary>
            <param name="logger"></param>
            <param name="userFriendlyLogger"></param>
            <param name="csvDbDirectoryInfo"></param>
            <param name="dispatcher"></param>
        </member>
        <member name="P:Ssz.Utils.CsvDb.UserFriendlyLogger">
            <summary>
                Messages are localized. Priority is Information, Error, Warning.
            </summary>
        </member>
        <member name="E:Ssz.Utils.CsvDb.CsvFileChanged">
            <summary>
                FileName in Upper-Case.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CsvDb.LoadData">
            <summary>
                Loads data from .csv files on disk.        
                Data is loaded in constructor.
                Data is loaded when directory changes, if dispatcher in consructor is not null.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CsvDb.FileCreate(System.String)">
            <summary>
                Clears existing file, if any.
                Returns true, if succeeded.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvDb.FileClear(System.String)">
            <summary>
                Returns true, if succeeded.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvDb.GetFileNames">
            <summary>
                Files names in Upper-Case.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvDb.GetValues(System.String)">
            <summary>
                List.Count >= 1, List[0] is not null
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvDb.GetNewKey(System.String)">
            <summary>
                Returns new uint key, starting from 1.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvDb.GetValues(System.String,System.String)">
            <summary>
                null or List.Count >= 1, List[0] is not null
            </summary>
            <param name="fileName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvDb.SaveData">
            <summary>
                Saves changed data to .csv files on disk.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CsvDb.SaveData(System.String)">
            <summary>
                Saves changed data to .csv file on disk.
            </summary>
        </member>
        <member name="F:Ssz.Utils.CsvDb._csvFilesCollection">
            <summary>
                [File name with .CSV extension in Upper-Case, CsvFile]
            </summary>
        </member>
        <member name="F:Ssz.Utils.CsvDb.CsvFile.IncludeFileNamesCollection">
            <summary>            
                File names in Upper-Case
            </summary>
        </member>
        <member name="T:Ssz.Utils.CsvHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.FormatForCsv(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="separator"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.FormatForCsv(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>        
                values converted using Any.ConvertTo String (obj, false).
            </summary>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.FormatValueForCsv(System.String,System.String)">
            <summary>        
            </summary>
            <param name="sourceString"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.ParseCsvLine(System.String,System.String)">
            <summary>        
                If empty field, value in array is null.
                # parsed as ordinary symbol. All field values are trimmed.
                Only first char is used as separator in separator param.
                result.Length > 0
            </summary>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.ParseCsv(System.String,System.String)">
            <summary>   
                Child list.Count > 0
                No #include, #define, comments.
            </summary>
            <param name="separator"></param>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.LoadCsvFile(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,System.String},Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.List{System.String})">
            <summary>
                First column in file is Key and must be unique.
                Can contain include directives, defines and comments.
                If file does not exist, returns empty result.
                userFriendlyLogger: Messages are localized. Priority is Information, Error, Warning.
                includeFileNames: File names in Upper-Case.
                Result: List.Count >= 1, List[0] is not null
            </summary>
            <param name="fileFullName"></param>
            <param name="includeFiles"></param>
            <param name="defines"></param>
            <param name="userFriendlyLogger"></param>
            <param name="includeFileNames"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.SaveCsvFile(System.String,Ssz.Utils.CaseInsensitiveDictionary{System.Collections.Generic.List{System.String}})">
            <summary>
                Saves data to file.
            </summary>
            <param name="fileFullName"></param>
            <param name="fileData"></param>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.SaveCsvFile(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            
            </summary>
            <param name="fileFullName"></param>
            <param name="fileData"></param>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.ReplaceDefines(System.String,System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,System.String})">
            <summary>
                sourceString is not null, defines is not null, result is not null
            </summary>
            <param name="sourceString"></param>
            <param name="defines"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.ParseCsvLineInternal(System.String,System.String,System.Boolean@)">
            <summary>
                Preconditions: separator.Length == 1, sourceString != String.Empty
                Returns whether last quote is not closed, so new line must be appended to this.
                result.Length > 0
            </summary>
            <param name="separator"></param>
            <param name="sourceString"></param>
            <param name="openEnded"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Ssz.Utils.CultureHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ssz.Utils.CultureHelper.SystemCultureInfo">
            <summary>
                By default contains CultureInfo.InvariantCulture.
                If CultureHelper.InitializeCulture() is called, contains CultureInfo that corresponds operating system culture.
                SystemCultureInfo field is used in Utils.Any class when func param stringIsLocalized = True.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CultureHelper.Initialize(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                If configuration is unknown, use new ConfigurationBuilder().AddJsonFile(@"appSettings.json", optional: true, reloadOnChange: true).Build() 
                Initializes SystemCultureInfo field to operating system culture.        
                Sets CurrentUICulture from configuration -> UICulture for all threads, if setting exists.
                Otherwise, CurrentUICulture remains unchanged.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Ssz.Utils.CultureHelper.GetCultureInfo(System.String)">
            <summary>
                Returns invariant culture for null or empty  or invalid cultureName.
                Uses Windows-user overrides, if any.
                No throws.
            </summary>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.#ctor(Ssz.Utils.DataAccess.AlarmInfoViewModelBase)">
            <summary>
                Copy constructor       
            </summary>
            <param name="that"></param>
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.ElementId">
            <summary>
                Calculated propery. When set, assumes dot as parameter separator.
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.Tag">
            <summary>
                The tag part of the ElementId. E.g. 'FIC3310' 
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.ParameterPath">
            <summary>
                The parameter part of the ElementId. E.g. '.PV' 
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.AlarmConditionType">
            <summary>
            The alarm type (i.e. Level, Deviation, RateOfChange etc)
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.CategoryId">
            <summary>
                0 - No Alarm (Green); 1 - Warning Alarm (Yellow); 2 - Blocking Alarm (Red)
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.Priority">
            <summary>
            An integer value representing the severity, or priority, of the alarm
            0 - No Action, 1 - Low, 2 - High, 3 - Emergency
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.TextMessage">
            <summary>
            A message to display to the user regarding this alarm.  This message is generated by the alarm OPC server
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.CurrentValueText">
            <summary>
            The <see cref="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.CurrentValue"/> as a string
            </summary>
            <remarks>        
            This property is mostly intended for use with digital alarms.  While the value may be "1" or "0",
            the alarm text should be "On/Off", or "Start/Stop", or "High/Low"  So if required, the text
            can be displayed rather than the actual numeric value.
            </remarks>
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.TripValue">
            <summary>
            The value at which the alarm occurs
            </summary>        
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.TripValueText">
            <summary>
            The trip value as a string
            </summary>
            <remarks>        
            This property is mostly intended for use with digital alarms.  While the value may be "1" or "0",
            the alarm text should be "On/Off", or "Start/Stop", or "High/Low"  So if required, the text
            can be displayed rather than the actual numeric value.
            </remarks>
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.EventId">
            <summary>
            The EventId associated with the alarm.
            Used for acknowledging the alarms.
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.OriginalEventMessage">
            <summary>
            The EventMessage object that was used to generate this AlarmInfoViewModelBase
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.EU">
            <summary>
            The engineering units for the current alarm
            </summary>        
        </member>
        <member name="P:Ssz.Utils.DataAccess.AlarmInfoViewModelBase.IsDigital">
            <summary>
            A quick reference to determine if the value is a digital value.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventId.MultiplexedAlarmContainer">
            <summary>
            The TypeId of the container for alarms with multiple conditions, 
            such as grouped or eclipsed alarms. The EventType enumeration defines 
            these types of alarms. 
            Null if the event is not a grouped or eclipsed alarm. 
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventId.Conditions">
            <summary>
            <para>For system events, operator action events, simple alarms, 
            and complex alarms, the TypeId of the condition 
            that is being reported in the event message.</para>
            <para>For grouped or eclipsed alarms, the name of 
            one or more conditions that are active.</para>
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventId.OccurrenceId">
            <summary>
            A server-specific id that identifies an individual occurrence of the 
            alarm/event.  This identifier can be constructed by the server to meet 
            the server's needs for identifying alarms.  For example, if the server 
            wraps an OPC AE server, the OccurrenceId may be constructed from the 
            ActiveTime and Cookie parameters of the IOPCEventServer::AckCondition() 
            method.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventId.TimeLastActive">
            <summary>
            This element is mandatory when acknowledging an alarm using the AcknowledgeAlarms() method. 
            It is set to null in all other uses.  Its value is copied from the AlarmMessageData object 
            contained in the EventMessage used to report the alarm being acknowledged.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventMessage.OccurrenceTime">
            <summary>
            The time of the event/alarm occurrence.  
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventMessage.EventType">
            <summary>
            The type of the event/alarm that is being reported by this 
            event message.  
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventMessage.EventId">
            <summary>
            The identifier for the event/alarm occurrence.  
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventMessage.TextMessage">
            <summary>
            Text that describes the event occurrence.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventMessage.CategoryId">
            <summary>
            The category to which the event is assigned.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventMessage.Priority">
            <summary>
            The priority of the event.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventMessage.OperatorName">
            <summary>
            <para>For event messages that report operator action events, 
            the name of the operator who caused an operator action event 
            to be generated.</para>
            <para>For event messages that report the acknowledgement of 
            an alarm, the name of the operator who acknowledged the 
            alarm.</para>
            <para>Null for all other event messages.</para>  
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventMessage.AlarmMessageData">
            <summary>
            Data to be included in the event message for alarms.  Null 
            if the event message is not reporting an alarm.  
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventMessage.ClientRequestedFields">
            <summary>
            The fields selected by the client to be included in Event Messages 
            for the indicated Event Category.  The fields that can be selected 
            by the client to be returned in Event Messages for a given Category 
            are specified in the EventCategories member of the Event Capabilities 
            MIB Element.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmMessageData.AlarmState">
            <summary>
            The current state of the alarm.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmMessageData.AlarmStateChange">
            <summary>
            The state change(s) that caused the alarm message to sent.
            The AlarmStateChangeCodes class defines 
            the values for this member.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmMessageData.TimeLastActive">
            <summary>
            The time that the alarm last transitioned to the active state.  
            This time is independent of the current state of the alarm.  
            Null if the alarm has never been active. 
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventType.SystemEvent">
            <summary>
            An event generated by a condition within the system 
            that does not require operator attention.
            See EEMUA Publication 191, 2.4.1.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventType.OperatorActionEvent">
            <summary>
            An event generated as the result of an operator action. 
            See EEMUA Publication 191, 2.4.1.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventType.SimpleAlarm">
            <summary>
            The general case of an alarm as defined by See EEMUA Publication 191.  
            A simple alarm is represented by a single condition.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventType.EclipsedAlarm">
            <summary>
            An alarm that is composed of a set of conditions that are 
            all related to the same monitored data object, but where 
            only the one with the highest operational significance 
            can be active at a time. See EEMUA Publication 191, A8.3.2. 
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventType.GroupedAlarm">
            <summary>
            An alarm that is represented by multiple conditions, 
            any number of which can be active at the same time.  
            For alarms of this type, the alarm is active when at 
            least one of its conditions is active, and is inactive 
            when none of its conditions are active. See EEMUA 
            Publication 191, A8.2.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventType.Alert">
            <summary>
            An event similar to an alarm, but that is a lower 
            priority and has no significant consequences if missed. 
            Alerts are often referred to as warnings or prompts.  
            See EEMUA Publication 191, Appendix 7. 
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.EventType.DiscardedMessage">
            <summary>
            An event that indicates that the server has discarded 
            one or more queued messages from its poll queue. This 
            event type is only used when event polling is in use. 
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmState.Initial">
            <summary>
            The default value of 0 is the starting state, 
            which is inactive (cleared), acknowledged, enabled, 
            and unsuppressed.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmState.Disabled">
            <summary>
            The generation/detection of the alarm is disabled 
            even though the base condition may be active.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmState.Active">
            <summary>
            The Alarm has been detected and its condition 
            continues to persist. This state is also referred 
            to as "raised" or "standing".  The inactive state 
            is indicated by not setting the Alarm to active.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmState.Unacked">
            <summary>
            The Alarm has not been acknowledged.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmState.Suppressed">
            <summary>
            Automatic generation/detection of the alarm is 
            disabled, even though the base condition may be active.  
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmStateChangeCodes.Active">
            <summary>
            The Active State has changed
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmStateChangeCodes.Acknowledge">
            <summary>
            The Acknowledge State has changed. 
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmStateChangeCodes.Disable">
            <summary>
            The Disable State has changed.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmStateChangeCodes.Priority">
            <summary>
            The Priority has changed.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmStateChangeCodes.Subcondition">
            <summary>
            The Subcondition has changed.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmStateChangeCodes.Message">
            <summary>
            The Message has changed.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.AlarmStateChangeCodes.RequestedField">
            <summary>
            One or more of the Requested Fields has changed.
            </summary>
        </member>
        <member name="M:Ssz.Utils.DataAccess.ExperionHelper.ProcessEventMessage(Ssz.Utils.EventSourceModel.EventSourceModel,Ssz.Utils.DataAccess.EventMessage,Microsoft.Extensions.Logging.ILogger)">
            <summary>
                Returns new AlarmInfoViewModels or null.
            </summary>
            <param name="eventSourceModel"></param>
            <param name="eventMessage"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.DataAccess.IDataAccessProvider">
            <summary>
                Must notify changes in IsConnected and IsDisconnected properties.
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.IDataAccessProvider.DataGuid">
            <summary>
                If guid the same, the data is guaranteed not changed.
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.IDataAccessProvider.Obj">
            <summary>
                You can use this property as temp storage.
            </summary>
        </member>
        <member name="M:Ssz.Utils.DataAccess.IDataAccessProvider.ReInitialize">
            <summary>
                Re-initializes this object with same settings.
                Items must be added again.
                If not initialized then does nothing.
            </summary>
        </member>
        <member name="M:Ssz.Utils.DataAccess.IDataAccessProvider.Close">
            <summary>
                Tou can call Dispose() instead of this method.
                Closes without waiting working thread exit.
            </summary>
        </member>
        <member name="M:Ssz.Utils.DataAccess.IDataAccessProvider.CloseAsync">
            <summary>
                Tou can call DisposeAsync() instead of this method.
                Closes WITH waiting working thread exit.
            </summary>
        </member>
        <member name="M:Ssz.Utils.DataAccess.IDataAccessProvider.PollElementValuesChangesAsync">
            <summary>                
                If call to server failed returns null, otherwise returns changed ValueSubscriptions.        
            </summary>
        </member>
        <member name="M:Ssz.Utils.DataAccess.IDataAccessProvider.WriteAsync(Ssz.Utils.DataAccess.IValueSubscription[],Ssz.Utils.DataAccess.ValueStatusTimestamp[])">
            <summary>     
                No values mapping and conversion.       
                returns failed ValueSubscriptions.
                If connection error, failed ValueSubscriptions is all clientObjs.        
            </summary>
            <param name="valueSubscriptions"></param>
            <param name="valueStatusTimestamps"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.DataAccess.IDataAccessProvider.PassthroughAsync(System.String,System.String,System.Byte[])">
            <summary>
                Returns null if any errors.
            </summary>
            <param name="recipientId"></param>
            <param name="passthroughName"></param>
            <param name="dataToSend"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.DataAccess.IDataAccessProvider.LongrunningPassthroughAsync(System.String,System.String,System.Byte[],System.Action{Ssz.Utils.DataAccess.LongrunningPassthroughCallback})">
            <summary>
                Returns true if succeeded.
            </summary>
            <param name="recipientId"></param>
            <param name="passthroughName"></param>
            <param name="dataToSend"></param>
            <param name="progressCallbackAction"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.DataAccess.PlatInstructorHelper.ProcessEventMessage(Ssz.Utils.EventSourceModel.EventSourceModel,Ssz.Utils.DataAccess.EventMessage,Microsoft.Extensions.Logging.ILogger)">
            <summary>
                Returns new AlarmInfoViewModels or null.
            </summary>
            <param name="eventSourceModel"></param>
            <param name="eventMessage"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.DataAccess.ReadOnceValueSubscription.#ctor(Ssz.Utils.DataAccess.IDataAccessProvider,System.String,System.Action{Ssz.Utils.DataAccess.ValueStatusTimestamp})">
            <summary>
                Is used to one-time read value.
                Callback is invoked when valueStatusTimestamp.ValueStatusCode != StatusCodes.Unknown       
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.ReadOnceValueSubscription.MappedElementIdOrConst">
            <summary>
                ElementId actually used for subscription.
            </summary>
        </member>
        <member name="M:Ssz.Utils.DataAccess.ReadOnceValueSubscription.Ssz#Utils#DataAccess#IValueSubscription#Update(Ssz.Utils.DataAccess.ValueStatusTimestamp)">
            <summary>
            
            </summary>
            <param name="valueStatusTimestamp"></param>
        </member>
        <member name="T:Ssz.Utils.DataAccess.StandardListType">
            <summary>
                This enumeration specifies the standard types of lists.
                The enumerated values between 0 and 4095 inclusive are reserved
                for standard types.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.StandardListType.ElementValueList">
            <summary>
                The type of list that contains data objects.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.StandardListType.ElementValueJournalList">
            <summary>
                The type of list that contains historical data objects.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.StandardListType.EventList">
            <summary>
                The type of list that contains alarms and events.
            </summary>
        </member>
        <member name="F:Ssz.Utils.DataAccess.StandardListType.EventJournalList">
            <summary>
                The type of list that contains historical alarms and events.
            </summary>
        </member>
        <member name="M:Ssz.Utils.DataAccess.TypeId.#ctor(System.Type)">
            <summary>
                Construct a Type LocalId given a .NET / CLI Type.
            </summary>
            <param name="type">
                The .NET / CLI Type for which the TypeId is being constructed.
            </param>
        </member>
        <member name="P:Ssz.Utils.DataAccess.ValueJournalSubscription.Id">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.DataAccess.ValueStatusTimestamp.ToString">
            <summary>
                Provides an simple overload for the ToString() method that combines the
                data type, timestamp, status code, and value into a single string.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Ssz.Utils.DataAccess.ValueStatusTimestamp.op_Equality(Ssz.Utils.DataAccess.ValueStatusTimestamp,Ssz.Utils.DataAccess.ValueStatusTimestamp)">
            <summary>        
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.DataAccess.ValueStatusTimestamp.op_Inequality(Ssz.Utils.DataAccess.ValueStatusTimestamp,Ssz.Utils.DataAccess.ValueStatusTimestamp)">
            <summary>        
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.DataAccess.ValueStatusTimestamp.Compare(Ssz.Utils.DataAccess.ValueStatusTimestamp,System.Double)">
            <summary>
                Uses ValueAsDouble(false), ValueAsInt32(false), ValueAsString(false) depending of ValueStorageType.
                Returns true if diff is less than or equal deadband.
                TimestampUtc is NOT compared.
            </summary>
            <param name="that"></param>
            <param name="deadband"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.DataAccess.ValueSubscription.#ctor(Ssz.Utils.DataAccess.IDataAccessProvider,System.String,System.Action{Ssz.Utils.DataAccess.ValueStatusTimestamp,Ssz.Utils.DataAccess.ValueStatusTimestamp})">
            <summary>
                Is used to subscribe for value updating and to write values.
                valueUpdated(oldValue, newValue) is invoked when Value property Updated. Initial Value property is new ValueStatusTimestamp(), Any(null) and Unknown status.        
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.ValueSubscription.MappedElementIdOrConst">
            <summary>
                Id actually used for subscription. Initialized after constructor.       
            </summary>
        </member>
        <member name="M:Ssz.Utils.DataAccess.ValueSubscription.Ssz#Utils#DataAccess#IValueSubscription#Update(Ssz.Utils.DataAccess.ValueStatusTimestamp)">
            <summary>
            
            </summary>
            <param name="valueStatusTimestamp"></param>
        </member>
        <member name="P:Ssz.Utils.DataAccess.ValueSubscription.ElementId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ssz.Utils.DataAccess.ValueSubscription.ValueStatusTimestamp">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.DataAccess.ValueSubscription.Write(Ssz.Utils.DataAccess.ValueStatusTimestamp)">
            <summary>
            
            </summary>
            <param name="valueStatusTimestamp"></param>
        </member>
        <member name="P:Ssz.Utils.EventSourceModel.ConditionState.Obj">
            <summary>
                You can use this property as temp storage.
            </summary>
        </member>
        <member name="P:Ssz.Utils.EventSourceModel.EventSourceArea.Obj">
            <summary>
                You can use this property as temp storage.
            </summary>
        </member>
        <member name="P:Ssz.Utils.EventSourceModel.EventSourceArea.ActiveAlarmsCategories">
            <summary>
                [AlarmCategory, Count]
            </summary>
        </member>
        <member name="M:Ssz.Utils.EventSourceModel.EventSourceModel.Dispose">
            <summary>
                This is the implementation of the IDisposable.Dispose method.  The client
                application should invoke this method when this instance is no longer needed.
            </summary>
        </member>
        <member name="M:Ssz.Utils.EventSourceModel.EventSourceModel.Dispose(System.Boolean)">
            <summary>
                This method is invoked when the IDisposable.Dispose or Finalize actions are
                requested.
            </summary>
        </member>
        <member name="M:Ssz.Utils.EventSourceModel.EventSourceModel.Finalize">
            <summary>
                Invoked by the .NET Framework while doing heap managment (Finalize).
            </summary>
        </member>
        <member name="M:Ssz.Utils.EventSourceModel.EventSourceModel.ProcessEventSourceObject(Ssz.Utils.EventSourceModel.EventSourceObject,Ssz.Utils.DataAccess.AlarmCondition,System.UInt32,System.Boolean,System.Boolean,System.DateTime,System.Boolean@,System.Boolean@)">
            <summary>
                condition != Normal
                Returns true if active or unacked state of any condition changed.
            </summary>
            <returns>
                true if active or unacked state of any condition changed
                false if the alarm state remains the same
            </returns>
        </member>
        <member name="M:Ssz.Utils.EventSourceModel.EventSourceModel.GetOrCreateEventSourceArea(System.String)">
            <summary>        
                Empty area is for root Area.
            </summary>
            <param name="area"></param>
            <returns></returns>        
        </member>
        <member name="M:Ssz.Utils.EventSourceModel.EventSourceModel.GetOrCreateEventSourceObject(System.String,System.String)">
            <summary>        
                area can contain '/' chars. 
                Adds all necessary areas to a new object: 
                area=String.Empty - root area, 
                all parent areas,
                leaf area.        
            </summary>
            <param name="tag"></param>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.EventSourceModel.EventSourceObject">
            <summary>
            A class to handle Alarm and Event notifications
            </summary>
        </member>
        <member name="P:Ssz.Utils.EventSourceModel.EventSourceObject.Obj">
            <summary>
                You can use this property as temp storage.
            </summary>
        </member>
        <member name="M:Ssz.Utils.EventSourceModel.EventSourceObject.AnyUnacked">
            <summary>
            Indicates if any alarms on this EventSource are unacknowledged.
            </summary>
            <returns>
            true if any alarms are in the Unack state
            false if all the alarms have been acknowledged
            </returns>
        </member>
        <member name="M:Ssz.Utils.EventSourceModel.EventSourceObject.AnyActive">
            <summary>
            Indicates if any alarms on this EventSource are active.
            </summary>
            <returns>
            true if any alarms are in the Active state
            false if all the alarms are not in the Active state
            </returns>
        </member>
        <member name="T:Ssz.Utils.IDispatcher">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.IDispatcher.BeginInvoke(System.Action{System.Threading.CancellationToken})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Ssz.Utils.ThreadSafeDispatcher.InvokeActionsInQueue(System.Threading.CancellationToken)">
            <summary>
                Returns Actions count
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.DisposableViewModelBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.DisposableViewModelBase.Dispose">
            <summary>
                This is the implementation of the IDisposable.Dispose method.  The client
                application should invoke this method when this instance is no longer needed.
            </summary>
        </member>
        <member name="M:Ssz.Utils.DisposableViewModelBase.Dispose(System.Boolean)">
            <summary>
                This method is invoked when the IDisposable.Dispose or Finalize actions are
                requested.
            </summary>
        </member>
        <member name="M:Ssz.Utils.DisposableViewModelBase.Finalize">
            <summary>
                Invoked by the .NET Framework while doing heap managment (Finalize).
            </summary>
        </member>
        <member name="P:Ssz.Utils.DisposableViewModelBase.Disposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.ElementIdsMap.#ctor(Microsoft.Extensions.Logging.ILogger{Ssz.Utils.ElementIdsMap})">
            <summary>
                Must be initialized before first use.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="P:Ssz.Utils.ElementIdsMap.GenericTag">
            <summary>
                Can be configured in map, 'GenericTag' key
            </summary>
        </member>
        <member name="P:Ssz.Utils.ElementIdsMap.TagTypeSeparator">
            <summary>
                Can be configured in map, 'TagTypeSeparator' key
            </summary>
        </member>
        <member name="P:Ssz.Utils.ElementIdsMap.TagAndPropertySeparator">
            <summary>
                Can be configured in map, 'TagAndPropertySeparator' key
            </summary>
        </member>
        <member name="M:Ssz.Utils.ElementIdsMap.Initialize(Ssz.Utils.CaseInsensitiveDictionary{System.Collections.Generic.List{System.String}},Ssz.Utils.CaseInsensitiveDictionary{System.Collections.Generic.List{System.String}})">
            <summary>
                Can be called multiple times. Other methods calls must be after this itinialization.
            </summary>
            <param name="map"></param>
            <param name="tags"></param>
        </member>
        <member name="M:Ssz.Utils.ElementIdsMap.GetFromMap(System.String,Ssz.Utils.CsvDb)">
            <summary>
                result.Count > 1
            </summary>
            <param name="elementId"></param>
            <param name="csvDb"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ElementIdsMap.GetFromMap(System.String,System.String,System.String,Ssz.Utils.CsvDb)">
            <summary>
                result.Count > 1
            </summary>
            <param name="tag"></param>
            <param name="propertyPath"></param>
            <param name="tagType"></param>
            <param name="csvDb"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.FileSystemHelper">
            <summary>    
                Use Directory.CreateDirectory(path) to create all directories and subdirectories in the specified path unless they already exist.
            </summary>
        </member>
        <member name="M:Ssz.Utils.FileSystemHelper.FileSystemTimeIsEquals(System.DateTime,System.DateTime)">
            <summary>
                Compares with tolerance 2 seconds.
            </summary>
            <param name="dateTimeUtcLeft"></param>
            <param name="dateTimeRight"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.FileSystemHelper.FileSystemTimeIsLess(System.DateTime,System.DateTime)">
            <summary>
                Compares with tolerance 2 seconds.
            </summary>
            <param name="dateTimeUtcLeft"></param>
            <param name="dateTimeRight"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.FileSystemHelper.IsDirectoryEmpty(System.String)">
            <summary>
                Preconditions: directory must exist. 
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.FileSystemHelper.MoveDirectory(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourcePath"></param>
            <param name="targetPath"></param>
        </member>
        <member name="M:Ssz.Utils.FileSystemHelper.ReplaceInvalidChars(System.String)">
            <summary>
            
            </summary>
            <param name="fileOrDirectoryName"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.FileSystemHelper.IsFileNameIsValid(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fileOrDirectoryName"></param>
            <param name="throwIfFails"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.FileSystemHelper.IsSubPathOf(System.String,System.String)">
            <summary>
            Returns true if <paramref name="path"/> starts with the path <paramref name="baseDirPath"/>.
            The comparison is case-insensitive, handles / and \ slashes as folder separators and
            only matches if the base dir folder name is matched exactly ("c:\foobar\file.txt" is not a sub path of "c:\foo").
            </summary>
        </member>
        <member name="M:Ssz.Utils.FileSystemHelper.Compare(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="pathLeft"></param>
            <param name="pathRight"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.FileSystemHelper.GetFilesByExtensions(System.IO.DirectoryInfo,System.IO.SearchOption,System.String[])">
            <summary>
            
            </summary>
            <param name="dir"></param>
            <param name="searchOption"></param>
            <param name="extensions"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.FileSystemHelper.IsDirectoryWritable(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="directoryPath"></param>
            <param name="throwIfFails"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.HistoryValues.#ctor(Microsoft.Extensions.Logging.ILogger{Ssz.Utils.HistoryValues})">
            <summary>
                Must be initialized before first use.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="T:Ssz.Utils.Logging.LogFileTextWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.#ctor(Ssz.Utils.Logging.SszLoggerOptions)">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Ssz.Utils.Logging.LogFileTextWriter.LogFileFullName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Char[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Char[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Ssz.Utils.Logging.LogFileTextWriter.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.Logging.SszLoggerBase.Finalize">
            <summary>
                The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Logging.SszLoggerOptions.LogDirectory">
            <summary>
                If empty (default) logs to current directory.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Logging.SszLoggerOptions.LogFileName">
            <summary>
                If empty (default) .exe and process Id is used.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Logging.SszLoggerOptions.LogFileMaxSizeInBytes">
            <summary>
                Log lines are appended to file. If size exeeds this limit, file is deleted.
                If 0, file is always recreated for new logger instance.
                Default is 50 MB.
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.ChangeKey`2">
            <summary>
                Used to uniquely identify a change that has a 2-part "key".
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.ChangeKey`3">
            <summary>
                Used to uniquely identify a change that has a 3-part "key".
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.ChangeSet">
            <summary>
                A set of changes that represent a single "unit of change".
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.ChangeSet.#ctor(Ssz.Utils.MonitoredUndo.UndoRoot,System.String,Ssz.Utils.MonitoredUndo.Changes.Change)">
            <summary>
                Create a ChangeSet for the specified UndoRoot.
            </summary>
            <param name="undoRoot">The UndoRoot that this ChangeSet belongs to.</param>
            <param name="description">A description of the change.</param>
            <param name="change">The Change instance that can perform the undo / redo as needed.</param>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.ChangeSet.UndoRoot">
            <summary>
                The associated UndoRoot.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.ChangeSet.Description">
            <summary>
                A description of this set of changes.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.ChangeSet.Undone">
            <summary>
                Has this ChangeSet been undone.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.ChangeSet.Changes">
            <summary>
                The changes that are part of this ChangeSet
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.ChangeSet.AddChange(Ssz.Utils.MonitoredUndo.Changes.Change)">
            <summary>
                Add a change to this ChangeSet.
            </summary>
            <param name="change"></param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.ChangeSet.Undo">
            <summary>
                Undo all Changes in this ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.ChangeSet.Redo">
            <summary>
                Redo all Changes in this ChangeSet.
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.Changes.Change">
            <summary>
                Represents an individual change, with the commands to undo / redo the change as needed.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.#ctor(System.Object)">
            <summary>
                Create a new change item.
            </summary>
            <param name="target">The object that this change affects.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.#ctor(System.Object,System.Object)">
            <summary>
                Create a new change item.
            </summary>
            <param name="target">The object that this change affects.</param>
            <param name="changeKey">
                An object, that will be used to detect changes that affect the same "field".
                This object should implement or override object.Equals() and return true if the changes are for the same field.
                This is used when the undo UndoRoot has started a batch, or when the UndoRoot.ConsolidateChangesForSameInstance is
                true.
                A string will work, but should be sufficiently unique within the scope of changes that affect this Target instance.
                Another good option is to use the Tuple class to uniquely identify the change. The Tuple could contain
                the object, and a string representing the property name. For a collection change, you might include the
                instance, the property name, and the item added/removed from the collection.
            </param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.MergeWith(Ssz.Utils.MonitoredUndo.Changes.Change)">
            <summary>
                When consolidating events, we want to keep the original (first) "Undo"
                but use the most recent Redo. This will pull the Redo from the
                specified Change and apply it to this instance.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.Changes.Change.Target">
            <summary>
                A reference to the object that this change is for.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.Changes.Change.ChangeKey">
            <summary>
                The change "key" that uniquely identifies this instance. (see commends on the constructor.)
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.Changes.Change.Undone">
            <summary>
                Has this change been undone.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.Undo">
            <summary>
                Apply the undo logic from this instance, and raise the ISupportsUndoNotification.UndoHappened event.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.Redo">
            <summary>
                Apply the redo logic from this instance, and raise the ISupportsUndoNotification.RedoHappened event.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.PerformUndo">
            <summary>
                Overridden in derived classes to contain the actual Undo logic.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.PerformRedo">
            <summary>
                Overridden in derived classes to contain the actual Redo logic.
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.Changes.DelegateChange">
            <summary>
                Represents an individual change, with the commands to undo / redo the change as needed.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.DelegateChange.#ctor(System.Object,System.Action,System.Action,System.Object)">
            <summary>
                Create a new change item.
            </summary>
            <param name="target">The object that this change affects.</param>
            <param name="undoAction">The delegate that will do the Undo logic</param>
            <param name="redoAction">The delegate that will do the Redo logic</param>
            <param name="changeKey">
                An object, that will be used to detect changes that affect the same "field".
                This object should implement or override object.Equals() and return true if the changes are for the same field.
                This is used when the undo UndoRoot has started a batch, or when the UndoRoot.ConsolidateChangesForSameInstance is
                true.
                A string will work, but should be sufficiently unique within the scope of changes that affect this Target instance.
                Another good option is to use the Tuple class to uniquely identify the change. The Tuple could contain
                the object, and a string representing the property name. For a collection change, you might include the
                instance, the property name, and the item added/removed from the collection.
            </param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.DelegateChange.MergeWith(Ssz.Utils.MonitoredUndo.Changes.Change)">
            <summary>
                When consolidating events, we want to keep the original "Undo"
                but use the most recent Redo. This will pull the Redo from the
                specified Change and apply it to this instance.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.PropertyChange.MergeWith(Ssz.Utils.MonitoredUndo.Changes.Change)">
            <summary>
                When consolidating events, we want to keep the original "Undo"
                but use the most recent Redo. This will pull the Redo from the
                specified Change and apply it to this instance.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.DefaultChangeFactory.GetChange(System.Object,System.String,System.Object,System.Object)">
            <summary>
                Construct a Change instance with actions for undo / redo.
            </summary>
            <param name="instance">The instance that changed.</param>
            <param name="propertyName">The property name that changed. (Case sensitive, used by reflection.)</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <returns>A Change that can be added to the UndoRoot's undo stack.</returns>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.DefaultChangeFactory.OnChanging(System.Object,System.String,System.Object,System.Object)">
            <summary>
                Construct a Change instance with actions for undo / redo.
            </summary>
            <param name="instance">The instance that changed.</param>
            <param name="propertyName">The property name that changed. (Case sensitive, used by reflection.)</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.DefaultChangeFactory.OnChanging(System.Object,System.String,System.Object,System.Object,System.String)">
            <summary>
                Construct a Change instance with actions for undo / redo.
            </summary>
            <param name="instance">The instance that changed.</param>
            <param name="propertyName">The property name that changed. (Case sensitive, used by reflection.)</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <param name="descriptionOfChange">A description of this change.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.DefaultChangeFactory.GetCollectionChange(System.Object,System.String,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Construct a Change instance with actions for undo / redo.
            </summary>
            <param name="instance">The instance that changed.</param>
            <param name="propertyName">
                The property name that exposes the collection that changed. (Case sensitive, used by
                reflection.)
            </param>
            <param name="collection">The collection that had an item added / removed.</param>
            <param name="e">The NotifyCollectionChangedEventArgs event args parameter, with info about the collection change.</param>
            <returns>A Change that can be added to the UndoRoot's undo stack.</returns>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.DefaultChangeFactory.OnCollectionChanged(System.Object,System.String,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Construct a Change instance with actions for undo / redo.
                Returns True, if is Undoing or Redoing, otherwise False.
            </summary>
            <param name="instance">The instance that changed.</param>
            <param name="propertyName">
                The property name that exposes the collection that changed. (Case sensitive, used by
                reflection.)
            </param>
            <param name="collection">The collection that had an item added / removed.</param>
            <param name="e">The NotifyCollectionChangedEventArgs event args parameter, with info about the collection change.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.DefaultChangeFactory.OnCollectionChanged(System.Object,System.String,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.String)">
            <summary>     
                Construct a Change instance with actions for undo / redo.
                Returns True, if is Undoing or Redoing, otherwise False.
            </summary>
            <param name="instance">The instance that changed.</param>
            <param name="propertyName">
                The property name that exposes the collection that changed. (Case sensitive, used by
                reflection.)
            </param>
            <param name="collection">The collection that had an item added / removed.</param>
            <param name="e">The NotifyCollectionChangedEventArgs event args parameter, with info about the collection change.</param>
            <param name="descriptionOfChange">A description of the change.</param>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.ISupportsUndo">
            <summary>
                Implement on objects that support undo.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.ISupportsUndo.GetUndoRoot">
            <summary>
                Gets the "root document" or "root object" that this instance is part of.
                Returning null from this method effectively disables undo support.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.ISupportUndoNotification">
            <summary>
                Implement on objects that want to be notified when something is undone or redone.
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.IUndoMetadata">
            <summary>
                Can be used by undo services to determine whether the specified field or
                collection item should be tracked for undo.
                Useful when the undo changes are created by a consolidated helper class.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.IUndoMetadata.CanUndoProperty(System.String,System.Object,System.Object)">
            <summary>
                Can be used by undo services to determine whether the specified field can be undone.
                Useful when the undo changes are created by a consolidated helper class.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
            <param name="oldValue">The original value of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <returns>A boolean, indicating whether the field should be tracked for undo / redo.</returns>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.IUndoMetadata.CanUndoCollectionChange(System.String,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Can be used by undo services to determine whether the specified field can be undone.
                Useful when the undo changes are created by a consolidated helper class.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
            <param name="collection">The instance of the collection that had items added or removed.</param>
            <param name="args">
                The INotifyCollectionChanged event args that include details on the type
                of collection operation.
            </param>
            <returns>A boolean, indicating whether the collection item should be tracked for undo / redo.</returns>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.UndoBatch">
            <summary>
                Provides a simplified way to start and end a batch via a "using" block.
                When the UndoBatch is disposed (at the end of the using block) it will end the batch.
                NOTE: Nested blocks _are_ supported.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoBatch.#ctor(Ssz.Utils.MonitoredUndo.ISupportsUndo,System.String,System.Boolean)">
            <summary>
                Starts an undo batch, which is ended when this instance is disposed. Designed for use in a using statement.
            </summary>
            <param name="instance">An object that implements ISupportsUndo. The batch will call GetUndoRoot() to get the root.</param>
            <param name="description">The description of this batch of changes.</param>
            <param name="consolidateChangesForSameInstance">Should the batch consolidate changes.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoBatch.#ctor(Ssz.Utils.MonitoredUndo.UndoRoot,System.String,System.Boolean)">
            <summary>
                Starts an undo batch, which is ended when this instance is disposed. Designed for use in a using statement.
            </summary>
            <param name="root">The UndoRoot related to this instance.</param>
            <param name="description">The description of this batch of changes.</param>
            <param name="consolidateChangesForSameInstance">Should the batch consolidate changes.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoBatch.Dispose">
            <summary>
                Disposing this instance will end the associated Undo batch.
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.UndoRoot">
            <summary>
                Tracks the ChangeSets and behavior for a single root object (or document).
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.#ctor(System.Object)">
            <summary>
                Create a new UndoRoot to track undo / redo actions for a given instance / document.
            </summary>
            <param name="root">
                The "root" instance of the object hierarchy. All changesets will
                need to passs a reference to this instance when they track changes.
            </param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.BeginChangeSetBatch(System.String,System.Boolean)">
            <summary>
                Tells the UndoRoot that all subsequent changes should be part of a single ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.EndChangeSetBatch">
            <summary>
                Tells the UndoRoot that it can stop collecting Changes into a single ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.Undo">
            <summary>
                Undo the first available ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.Undo(Ssz.Utils.MonitoredUndo.ChangeSet)">
            <summary>
                Undo all changesets up to and including the lastChangeToUndo.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.Redo">
            <summary>
                Redo the first available ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.Redo(Ssz.Utils.MonitoredUndo.ChangeSet)">
            <summary>
                Redo ChangeSets up to and including the lastChangeToRedo.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.AddChange(Ssz.Utils.MonitoredUndo.Changes.Change,System.String)">
            <summary>
                Add a change to the Undo history. The change will be added to the existing batch, if in a batch.
                Otherwise, a new ChangeSet will be created.
            </summary>
            <param name="change">The change to add to the history.</param>
            <param name="description">The description of this change.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.AddChange(Ssz.Utils.MonitoredUndo.ChangeSet)">
            <summary>
                Adds a new changeset to the undo history. The change set will be added to the existing batch, if in a batch.
            </summary>
            <param name="changeSet">The ChangeSet to add.</param>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.UndoRoot.Root">
            <summary>
                The instance that represents the root (or document) for this set of changes.
            </summary>
            <remarks>
                This is needed so that a single instance of the application can track undo histories
                for multiple "root" or "document" instances at the same time. These histories should not
                overlap or show in the same undo history.
            </remarks>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.UndoRoot.IsInBatch">
            <summary>
                Is this UndoRoot currently collecting changes as part of a batch.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.UndoRoot.IsUndoingOrRedoing">
            <summary>
                Is this UndoRoot currently undoing or redoing a change set.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.UndoRoot.ConsolidateChangesForSameInstance">
            <summary>
                Should changes to the same property be consolidated (de-duped).
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoService.GetCurrentDocumentInstance``1">
            <summary>
                Stores the "Current Instance" of a given object or document so that the rest of the model can access it.
            </summary>
            <typeparam name="T">The type of the root instance to store.</typeparam>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoService.SetCurrentDocumentInstance``1(``0)">
            <summary>
                Stores the "Current Instance" of a given object or document so that the rest of the model can access it.
            </summary>
            <typeparam name="T">The type of the root instance to store.</typeparam>
            <param name="instance">The document or object instance that is the "currently active" instance.</param>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.UndoService.Current">
            <summary>
                Get (or create) the singleton instance of the UndoService.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoService.BeginChangeSetBatch(System.String,System.Boolean)">
            <summary>
                Tells all UndoRoots that all subsequent changes should be part of a single ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoService.EndChangeSetBatch">
            <summary>
                Tells all UndoRoots that it can stop collecting Changes into a single ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoService.Clear">
            <summary>
                Clear the cached UndoRoots.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.UndoService.Item(System.Object)">
            <summary>
                Get (or create) an UndoRoot for the specified object or document instance.
            </summary>
            <param name="root">The object that represents the root of the document or object hierarchy.</param>
            <returns>An UndoRoot instance for this object.</returns>
        </member>
        <member name="T:Ssz.Utils.NameValueCollectionHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="nameValueCollectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.GetNameValueCollectionString(Ssz.Utils.CaseInsensitiveDictionary{System.String})">
            <summary>        
            </summary>
            <param name="nameValueCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.CanGetNameValueCollection(System.Object)">
            <summary>        
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.GetNameValueCollection(System.Object)">
            <summary>        
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.SetNameValueCollection(System.Object@,Ssz.Utils.CaseInsensitiveDictionary{System.String})">
            <summary>        
            </summary>
            <param name="obj"></param>
            <param name="nameValueCollection"></param>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.UrlEncode(System.String)">
            <summary>        
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.UrlDecode(System.String)">
            <summary>        
            </summary>
        </member>
        <member name="T:Ssz.Utils.ObjectHelper">
            <summary>     ///      /// </summary> 
        </member>
        <member name="M:Ssz.Utils.ObjectHelper.GetAllFields(System.Object)">
            <summary>         ///     Returns all fields except that with Searchable(false) attribute.                 /// </summary>         /// <param name="obj"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.ObjectHelper.GetValue(System.Object,System.String)">
            <summary>         ///     Returns value of 'obj' concatenated with expression.         ///     If ivalid expression returns null.         ///     expression examples: ".Name", ".SubObjects[0].Name"                 /// </summary>         /// <param name="obj"></param>         /// <param name="expression"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.ObjectHelper.SetValue(System.Object,System.String,System.Object)">
            <summary>         ///     Sets value of 'obj' concatenated with expression.         ///     Returns True if succeeded.         ///     expression examples: ".Name", ".SubObjects[0].Name"                 /// </summary>         /// <param name="obj"></param>         /// <param name="expression"></param>         /// <param name="value"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.ObjectHelper.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>         ///     Returns True if succeeded.         /// </summary>         /// <param name="obj"></param>         /// <param name="propertyName"></param>         /// <param name="value"></param>         /// <returns></returns> 
        </member>
        <member name="M:Ssz.Utils.ObjectHelper.FindInStringBrowsableProperties(System.Object,System.Text.RegularExpressions.Regex)">
            <summary>         ///     Searches in properties with [Searchable(true)] or [Browsable(true)] attributes.         ///     [Searchable(true)] attribute has higher priority.         ///     If regex is null matches all properties.                 /// </summary> 
        </member>
        <member name="M:Ssz.Utils.ObjectHelper.ReplaceInStringBrowsableProperties(System.Object,System.Text.RegularExpressions.Regex,System.String)">
            <summary>         ///     Replaces in properties with [Searchable(true)] or [Browsable(true)] attributes.         ///     [Searchable(true)] attribute has higher priority.                 /// </summary> 
        </member>
        <member name="M:Ssz.Utils.ObjectHelper.GetProperties(System.Object)">
            <summary>         ///     Returns all Browsable properties of object.         ///     SearchableAttribute can explicitly set whether to return or not the property.                 /// </summary> 
        </member>
        <member name="T:Ssz.Utils.StringPropertyInfo">
            <summary>     ///      /// </summary> 
        </member>
        <member name="F:Ssz.Utils.StringPropertyInfo.PropertyPath">
            <summary>         ///     Without '.' at the beginning.         /// </summary> 
        </member>
        <member name="F:Ssz.Utils.StringPropertyInfo.PropertyValue">
            <summary>         ///          /// </summary> 
        </member>
        <member name="T:Ssz.Utils.SearchableAttribute">
            <summary>     ///     For find and replace in string properties support.     /// </summary> 
        </member>
        <member name="M:Ssz.Utils.SearchableAttribute.#ctor(System.Boolean)">
            <summary>         ///          /// </summary>         /// <param name="searchable"></param> 
        </member>
        <member name="P:Ssz.Utils.SearchableAttribute.Searchable">
            <summary>         ///          /// </summary> 
        </member>
        <member name="T:Ssz.Utils.ObjectManager`1">
            <summary>
                Manage list of objects, allows access through handlers, designed for effective insertion and deletion
            </summary>    
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.Reserve(System.Int32)">
            <summary>
                Reserve space in the internal list of objects
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.TrimExcess">
            <summary>
                Sets the capacity to the actual number of elements in the internal list of objects,
                if that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.Contains(System.UInt32)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.TryGetValue(System.UInt32,`0@)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.Remove(System.UInt32)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.Assign(System.UInt32,`0)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.Clear">
            <summary>
                Releases all objects from objects from internal list. Its handlers become invalid
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.ToList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ssz.Utils.ObjectManager`1.Item(System.UInt32)">
            <summary>
            </summary>
        </member>
        <member name="P:Ssz.Utils.ObjectManager`1.Handles">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ssz.Utils.ObjectManager`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.IndexToHandle(System.Int32)">
            <summary>
                Makes instance-specific handler from index
                index must be valid
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.HandleToIndex(System.UInt32)">
            <summary>
                Verifyes that handle corresponds instance of object and returns index of object.
                Returns 0, if invalid handle.
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.AddInternal(`0)">
            <summary>
                Puts object in internal list and returns its index there.        
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.RemoveInternal(System.Int32)">
            <summary>
                Releases object from internal list. Its handle becomes invalid.
                index must be valid
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObservableCollectionExtensions.Update``1(System.Collections.ObjectModel.ObservableCollection{``0},``0[])">
            <summary>
                Preconditions: source and destination are ordered by Id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="T:Ssz.Utils.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Properties.Resources.CalculationLambdaExpressionError">
            <summary>
              Looks up a localized string similar to Calculation error.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Properties.Resources.CsvDb_CsvFileWritingError">
            <summary>
              Looks up a localized string similar to File writing error.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Properties.Resources.CsvHelper_CsvFileDoesNotExist">
            <summary>
              Looks up a localized string similar to File does not exist.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Properties.Resources.CsvHelper_CsvFileDuplicateKey">
            <summary>
              Looks up a localized string similar to File contains duplicate key.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Properties.Resources.CsvHelper_CsvFileReadingError">
            <summary>
              Looks up a localized string similar to File reading error.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Properties.Resources.PrepareLambdaExpressionError">
            <summary>
              Looks up a localized string similar to Expression error.
            </summary>
        </member>
        <member name="T:Ssz.Utils.ReferenceEqualityComparer`1">
            <summary>
                A generic object comparerer that would only use object's reference,
                ignoring any <see cref="T:System.IEquatable`1" /> or <see cref="M:System.Object.Equals(System.Object)" />  overrides.
            </summary>
        </member>
        <member name="T:Ssz.Utils.Serialization.IOwnedDataSerializable">
            <summary>
                Interface which allows a class to save/retrieve their internal data to/from an existing
                SerializationWriter/SerializationReader.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.IOwnedDataSerializable.SerializeOwnedData(Ssz.Utils.Serialization.SerializationWriter,System.Object)">
            <summary>
                Lets the implementing class store internal data directly into a SerializationWriter.
            </summary>
            <param name="writer"> The SerializationWriter to use </param>
            <param name="context"> Optional context to use as a hint as to what to store </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.IOwnedDataSerializable.DeserializeOwnedData(Ssz.Utils.Serialization.SerializationReader,System.Object)">
            <summary>
                Lets the implementing class retrieve internal data directly from a SerializationReader.
            </summary>
            <param name="reader"> The SerializationReader to use </param>
            <param name="context"> Optional context to use as a hint as to what to retrieve </param>
        </member>
        <member name="T:Ssz.Utils.Serialization.OwnedDataSerializable">
            <summary>
                Implementation of serialization, which uses JsonSerializer internally.
                Implemented Equal method which based of comparing serialized data.
                Implemented ICloneable interface which based on serialized data.  
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.OwnedDataSerializable.SerializeOwnedData(Ssz.Utils.Serialization.SerializationWriter,System.Object)">
            <summary>
                Implementation of serialization, which uses JsonSerializer internally.        
                You can specify JsonSerializerOptions as context.
            </summary>
            <param name="writer"> The SerializationWriter to use </param>
            <param name="context"> Optional context to use as a hint as to what to store (BitVector32 is useful) </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.OwnedDataSerializable.DeserializeOwnedData(Ssz.Utils.Serialization.SerializationReader,System.Object)">
            <summary>        
                Implementation of serialization, which uses JsonSerializer internally.
                You can specify JsonSerializerOptions as context.
            </summary>
            <param name="reader"> The SerializationReader to use </param>
            <param name="context"> Optional context to use as a hint as to what to retrieve (BitVector32 is useful) </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.OwnedDataSerializable.Clone">
            <summary>
                Creates a new object that is a copy of the current instance.
            </summary>
            <returns>a new object that is a copy of the current instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.OwnedDataSerializable.Equals(System.Object)">
            <summary>
                Compares objects.
            </summary>
            <returns>Returns true if both references is equal or both objects have equal serialized data</returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationHelper.CloneUsingSerialization``1(``0,System.Func{``0})">
            <summary>
                func is new object creator function, otherwise default constructor is used.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ownedDataSerializable"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationHelper.CreateFromOwnedData``1(System.Byte[],System.Func{``0})">
            <summary>
                func is new object creator function, otherwise default constructor is used.
                If ownedData is null, returns null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ownedData"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.Serialization.SerializationReader">
            <summary>
                A SerializationReader instance is used to read stored values and objects from a byte array.
                Once an instance is created, use the various methods to read the required data.
                The data read MUST be exactly the same type and in the same order as it was written.
                Disposing not disposes underlying stream.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.#ctor(System.Byte[])">
            <summary>
                Creates a SerializationReader using a byte[] previous created by SerializationWriter
                A MemoryStream is used to access the data without making a copy of it.
            </summary>
            <param name="data"> The byte[] containining serialized data. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.#ctor(System.IO.Stream)">
            <summary>
                Creates a SerializationReader around the specified stream.
                baseStream.CanSeek must be true.
            </summary>
            <param name="baseStream"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.Dispose">
            <summary>
                This is the implementation of the IDisposable.Dispose method.  The client
                application should invoke this method when this instance is no longer needed.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.Dispose(System.Boolean)">
            <summary>
                This method is invoked when the IDisposable.Dispose or Finalize actions are
                requested.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.Finalize">
            <summary>
                Invoked by the .NET Framework while doing heap managment (Finalize).
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.GetBlockVersionWithoutChangingStreamPosition">
            <summary>
                Use only with memory streams.
                Throws Exception, if not block beginning.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.BeginBlock">
            <summary>
                Use only with memory streams.
                Throws Exception, if not block beginning.
            </summary>
            <returns>Returns block Version.</returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.EndBlock">
            <summary>
                Use only with memory streams.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadToBlockEnding(System.Boolean)">
            <summary>
                Use only with memory streams.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.EnterBlock">
            <summary>
                Use only with memory streams.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadDateTime">
            <summary>
                Returns a DateTime value from the stream.
            </summary>
            <returns> A DateTime value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadGuid">
            <summary>
                Returns a Guid value from the stream.
            </summary>
            <returns> A DateTime value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOwnedData(Ssz.Utils.Serialization.IOwnedDataSerializable,System.Object)">
            <summary>
                Allows an existing object, implementing IOwnedDataSerializable, to
                retrieve its owned data from the stream.
            </summary>
            <param name="target"> Any IOwnedDataSerializable object. </param>
            <param name="context"> An optional, arbitrary object to allow context to be provided. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadObject">
            <summary>
                Returns an object based on the SerializedType read next from the stream.
            </summary>
            <returns> An object instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadObject``1">
            <summary>
                Throws if saved object not correct type;
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOwnedDataSerializableAndRecreatable``1(System.Object)">
            <summary>
                Throws if saved object not correct type;
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadString">
            <summary>
                Use Write(string value) for writing.
            </summary>
            <returns> A string value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadNullableString">
            <summary>
                Use WriteNullableString(string? value) for writing.
            </summary>
            <returns> A string value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadTimeSpan">
            <summary>
                Returns a TimeSpan value from the stream.
            </summary>
            <returns> A TimeSpan value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadNullableArray``1">
            <summary>
                Use WriteNullableArray T (...) for writing.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadNullableByteArray">
            <summary>
                Use WriteNullableByteArray(...) for writing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadList``1">
            <summary>
                Returns a generic List populated with values from the stream or null.
            </summary>
            <typeparam name="T"> The list Type. </typeparam>
            <returns> A new generic List or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadListOfOwnedDataSerializable``1(System.Func{``0},System.Object)">
            <summary>
                Reads list of same objects.
                func is constructor function.      
                Use WriteListOfOwnedDataSerializable for writing.
            </summary>        
            <param name="func"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadListOfStrings">
            <summary>
                Use WriteListOfStrings(...) for writing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadDictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
                Populates a pre-existing generic dictionary with keys and values from the stream.
                This allows a generic dictionary to be created without using the default constructor.
            </summary>
            <typeparam name="TK"> The key Type. </typeparam>
            <typeparam name="TV"> The value Type. </typeparam>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadBitArray">
            <summary>
                Returns a BitArray or null from the stream.
            </summary>
            <returns> A BitArray instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadUInt64Optimized">
            <summary>
                Returns a UInt64 value from the stream that was stored optimized.
            </summary>
            <returns> A UInt64 value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadInt64Optimized">
            <summary>
                Returns an Int64 value from the stream that was stored optimized.
            </summary>
            <returns> An Int64 value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadByteArray">
            <summary>
                Use Write(byte[] values) for writing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedBitArray">
            <summary>
                Returns a BitArray from the stream that was stored optimized.
            </summary>
            <returns> A BitArray instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedDateTime">
            <summary>
                Returns a DateTime value from the stream that was stored optimized.
            </summary>
            <returns> A DateTime value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedDecimal">
            <summary>
                Returns a Decimal value from the stream that was stored optimized.
            </summary>
            <returns> A Decimal value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedUInt16">
            <summary>
                Returns a UInt16 value from the stream that was stored optimized.
            </summary>
            <returns> A UInt16 value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedInt16">
            <summary>
                Returns an Int16 value from the stream that was stored optimized.
            </summary>
            <returns> An Int16 value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedUInt32">
            <summary>
                Returns a UInt32 value from the stream that was stored optimized.
            </summary>
            <returns> A UInt32 value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedInt32">
            <summary>
                Returns an Int32 value from the stream that was stored optimized.
            </summary>
            <returns> An Int32 value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadUInt32OptimizedOrNot">
            <summary>
                depends on _optimizedSize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadInt32OptimizedOrNot">
            <summary>
                depends on _optimizedSize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadDoubleOptimizedOrNot">
            <summary>
                depends on _optimizedSize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedObjectArray(System.Type)">
            <summary>        
                Returns an object[] from the stream that was stored optimized.
                The returned array will be typed according to the specified element type
                and the resulting array can be cast to the expected type.
                e.g.
                string[] myStrings = (string[]) reader.ReadOptimizedObjectArray(typeof(string));
                An exception will be thrown if any of the deserialized values cannot be
                cast to the specified elementType.
            </summary>
            <param name="elementType"> The Type of the expected array elements. null will return a plain object[]. </param>
            <returns> An object[] instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedString">
            <summary>
                Returns a string value from the stream that was stored optimized.
            </summary>
            <returns> A string value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedTimeSpan">
            <summary>
                Returns a TimeSpan value from the stream that was stored optimized.
            </summary>
            <returns> A TimeSpan value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedType">
            <summary>
                Returns a Type from the stream.
                Throws an exception if the Type cannot be found.
            </summary>
            <returns> A Type instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.DecodeTimeSpan(System.Byte)">
            <summary>
                Returns a TimeSpan decoded from packed data.
                This routine is called from ReadOptimizedDateTime() and ReadOptimizedTimeSpan().
                <remarks>
                    This routine uses a parameter to allow ReadOptimizedDateTime() to 'peek' at the
                    next byte and extract the DateTimeKind from bits one and two (IsNegative and HasDays)
                    which are never set for a Time portion of a DateTime.
                </remarks>
            </summary>
            <param name="initialByte"> The first of two always-present bytes. </param>
            <returns> A decoded TimeSpan </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadTypedArrayOptimizeFlags(Ssz.Utils.Serialization.SerializedType)">
            <summary>
                Creates a BitArray representing which elements of a typed array
                are serializable.
            </summary>
            <param name="serializedType"> The type of typed array. </param>
            <returns> A BitArray denoting which elements are serializable. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadObjectInternal(Ssz.Utils.Serialization.SerializedType)">
            <summary>
                Returns an object based on supplied SerializedType.
            </summary>
            <returns> An object instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadInt32Array">
            <summary>
                Returns an Int32[] from the stream.
            </summary>
            <returns> An Int32[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadInt64Array">
            <summary>
                Returns an Int64[] from the stream.
            </summary>
            <returns> An Int64[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadTimeSpanArray">
            <summary>
                Returns a TimeSpan[] from the stream.
            </summary>
            <returns> A TimeSpan[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadUInt32Array">
            <summary>
                Returns a UInt[] from the stream.
            </summary>
            <returns> A UInt[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadUInt64Array">
            <summary>
                Returns a UInt64[] from the stream.
            </summary>
            <returns> A UInt64[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadDateTimeArray">
            <summary>
                Returns a DateTime[] from the stream.
            </summary>
            <returns> A DateTime[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadUInt16Array">
            <summary>
                Returns a UInt16[] from the stream.
            </summary>
            <returns> A UInt16[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadInt16Array">
            <summary>
                Returns an Int16[] from the stream.
            </summary>
            <returns> An Int16[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadArrayInternal(Ssz.Utils.Serialization.SerializedType,System.Type)">
            <summary>
                Determine whether the passed-in type code refers to an array type
                and deserializes the array if it is.
                elementType is not null
                Returns null if not an array type.
            </summary>
            <param name="typeCode"> The SerializedType to check. </param>
            <param name="elementType"> The Type of array element; </param>
            <returns> </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadTypeCode">
            <summary>
                Returns the SerializedType read next from the stream.
            </summary>
            <returns> A SerializedType value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadBooleanArray">
            <summary>
                Internal implementation returning a Bool[].
            </summary>
            <returns> A Bool[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadByteArrayInternal">
            <summary>
                Internal implementation returning a Byte[].
            </summary>
            <returns> A Byte[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadCharArray">
            <summary>
                Internal implementation returning a Char[].
            </summary>
            <returns> A Char[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadDecimalArray">
            <summary>
                Internal implementation returning a Decimal[].
            </summary>
            <returns> A Decimal[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadDoubleArray">
            <summary>
                Internal implementation returning a Double[].
            </summary>
            <returns> A Double[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadGuidArray">
            <summary>
                Internal implementation returning a Guid[].
            </summary>
            <returns> A Guid[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadSByteArray">
            <summary>
                Internal implementation returning an SByte[].
            </summary>
            <returns> An SByte[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadSingleArray">
            <summary>
                Internal implementation returning a Single[].
            </summary>
            <returns> A Single[]. </returns>
        </member>
        <member name="T:Ssz.Utils.Serialization.Block">
            <summary>
                Reads to block ending when Disposing.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.Block.Dispose">
            <summary>
                Reads to block ending.
            </summary>
        </member>
        <member name="T:Ssz.Utils.Serialization.SerializationWriter">
            <summary>
                Class which defines the writer for serialized data using the fast serialization optimization.
                A SerializationWriter instance is used to store values and objects in a byte array.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
                Creates a SerializationWriter around the specified stream.
                baseStream.CanSeek must be true.
            </summary>
            <param name="baseStream"></param>
            <param name="optimizeSize"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Dispose">
            <summary>
                This is the implementation of the IDisposable.Dispose method.  The client
                application should invoke this method when this instance is no longer needed.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Dispose(System.Boolean)">
            <summary>
                This method is invoked when the IDisposable.Dispose or Finalize actions are
                requested.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Finalize">
            <summary>
                Invoked by the .NET Framework while doing heap managment (Finalize).
            </summary>
        </member>
        <member name="F:Ssz.Utils.Serialization.SerializationWriter.HighestOptimizable16BitValue">
            <summary>
                Holds the highest Int16 that can be optimized into less than the normal 2 bytes
            </summary>
        </member>
        <member name="F:Ssz.Utils.Serialization.SerializationWriter.HighestOptimizable32BitValue">
            <summary>
                Holds the highest Int32 that can be optimized into less than the normal 4 bytes
            </summary>
        </member>
        <member name="F:Ssz.Utils.Serialization.SerializationWriter.HighestOptimizable64BitValue">
            <summary>
                Holds the highest Int64 that can be optimized into less than the normal 8 bytes
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.BeginBlock(System.Int32)">
            <summary>
                Begins Block        
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.EndBlock">
            <summary>
                Ends Block
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.EnterBlock(System.Int32)">
            <summary>
                Enters Block
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Single)">
            <summary>
                Writes a four-byte floating-point value to the current stream and advances the
                stream position by four bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.UInt64)">
            <summary>
                Writes an eight-byte unsigned integer to the current stream and advances the
                stream position by eight bytes.
            </summary>
            <param name="value"></param>        
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Int64)">
            <summary>
                Writes an eight-byte signed integer to the current stream and advances the stream
                position by eight bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.UInt64)">
            <summary>
                Write a UInt64 value using the fewest number of bytes possible.
            </summary>
            <remarks>
                0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
                0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
                0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
                0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
                0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
                0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
                0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
                0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
                ------------------------------------------------------------------
                0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
                0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
                Only call this method if the value is known to be between 0 and
                72,057,594,037,927,935 otherwise use Write(UInt64 value)
            </remarks>
            <param name="value"> The UInt64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.Int64)">
            <summary>
                Write an Int64 value using the fewest number of bytes possible.
            </summary>
            <remarks>
                0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
                0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
                0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
                0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
                0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
                0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
                0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
                0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
                ------------------------------------------------------------------
                0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
                0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
                All negative numbers take 10 bytes
                Only call this method if the value is known to be between 0 and
                72,057,594,037,927,935 otherwise use Write(Int64 value)
            </remarks>
            <param name="value"> The Int64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.UInt32)">
            <summary>
                Writes a four-byte unsigned integer to the current stream and advances the stream
                position by four bytes.
            </summary>
            <param name="value"></param>        
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Int32)">
            <summary>
               Writes a four-byte signed integer to the current stream and advances the stream
                position by four bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.UInt16)">
            <summary>
                Writes a two-byte unsigned integer to the current stream and advances the stream
                position by two bytes.
            </summary>
            <param name="value"></param>        
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Int16)">
            <summary>
                Writes a two-byte signed integer to the current stream and advances the stream
                position by two bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteRaw(System.Char[])">
            <summary>
                Writes a character array to the current stream and advances the current position
                of the stream in accordance with the Encoding used and the specific characters
                being written to the stream.
                Use ReadRawChars(...) in SerializationReader.
            </summary>
            <param name="chars"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
                Writes a section of a character array to the current stream, and advances the
                current position of the stream in accordance with the Encoding used and perhaps
                the specific characters being written to the stream.
                Use ReadRawChars(...) in SerializationReader.
            </summary>
            <param name="chars"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteRaw(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes a region of a byte array to the current stream.
                Use ReadRawBytes(int count) in SerializationReader.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteRaw(System.Byte[])">
            <summary>
                Writes a byte array to the current stream.
                Use ReadRawBytes(int count) in SerializationReader.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Byte[])">
            <summary>
                Use ReadByteArray() for reading.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Double)">
            <summary>
                Writes an eight-byte floating-point value to the current stream and advances
                the stream position by eight bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Char)">
            <summary>
                Writes a Unicode character to the current stream and advances the current position
                of the stream in accordance with the Encoding used and the specific characters
                being written to the stream.
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.SByte)">
            <summary>
            
            </summary>
            <param name="value"></param>       
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Byte)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Decimal)">
            <summary>
                Writes a decimal value to the current stream and advances the stream position
                by sixteen bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.DateTime)">
            <summary>
                Writes a DateTime value into the stream.
                Stored Size: 8 bytes
            </summary>
            <param name="value"> The DateTime value to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Guid)">
            <summary>
                Writes a Guid into the stream.
                Stored Size: 16 bytes.
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOwnedData(Ssz.Utils.Serialization.IOwnedDataSerializable,System.Object)">
            <summary>
                Allows any object implementing IOwnedDataSerializable to serialize itself
                into this SerializationWriter.
                A context may also be used to give the object an indication of what data
                to store.        
            </summary>
            <param name="target"> The IOwnedDataSerializable object to ask for owned data </param>
            <param name="context"> An arbtritrary object </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteObject(System.Object)">
            <summary>
                Stores an object into the stream using the fewest number of bytes possible.
                Stored Size: 1 byte upwards depending on type and/or content.
                1 byte: null, DBNull.Value, Boolean
                1 to 2 bytes: Int16, UInt16, Byte, SByte, Char,
                1 to 4 bytes: Int32, UInt32, Single
                1 to 8 bytes: DateTime, TimeSpan, Double, Int64, UInt64
                1 or 16 bytes: Guid
                1 plus content: string, object[], byte[], char[], BitArray, Type, ArrayList
                Any other object be stored using a .Net Binary formatter but this should
                only be allowed as a last resort:
                Since this is effectively a different serialization session, there is a
                possibility of the same shared object being serialized twice or, if the
                object has a reference directly or indirectly back to the parent object,
                there is a risk of looping which will throw an exception.
                The type of object is checked with the most common types being checked first.
                Each 'section' can be reordered to provide optimum speed but the check for
                null should always be first and the default serialization always last.
                Once the type is identified, a SerializedType byte is stored in the stream
                followed by the data for the object (certain types/values may not require
                storage of data as the SerializedType may imply the value).
                For certain objects, if the value is within a certain range then optimized
                storage may be used. If the value doesn't meet the required optimization
                criteria then the value is stored directly.
                The checks for optimization may be disabled by setting the OptimizeForSize
                property to false in which case the value is stored directly. This could
                result in a slightly larger stream but there will be a speed increate to
                compensate.
            </summary>
            <param name="value"> The object to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOwnedDataSerializableAndRecreatable``1(``0,System.Object)">
            <summary>
                Use ReadOwnedDataSerializableAndRecreatable.T for read.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteObject``1(``0)">
            <summary>
                Use ReadObject.T for read.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.String)">
            <summary>
                Use ReadString() for reading.
            </summary>
            <param name="value"> The string to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteNullableString(System.String)">
            <summary>
                Use ReadNullableString() for reading.
            </summary>
            <param name="value"> The string to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.TimeSpan)">
            <summary>
                Writes a TimeSpan value into the stream.
                Stored Size: 8 bytes
            </summary>
            <param name="value"> The TimeSpan value to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteNullableArray``1(``0[])">
            <summary>        
                Use ReadNullableArray T () for reading.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteNullableByteArray(System.Byte[])">
            <summary>
                Use ReadNullableByteArray() for reading.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write``1(System.Collections.Generic.IList{``0})">
            <summary>
                Writes a nullable generic List into the stream.
                Objects can be of different types.
            </summary>
            <remarks>
                The list type itself is not stored - it must be supplied
                at deserialization time.
                <para />
                The list contents are stored as an array.
            </remarks>
            <typeparam name="T"> The list Type. </typeparam>
            <param name="value"> The generic List. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteListOfOwnedDataSerializable``1(System.Collections.Generic.ICollection{``0},System.Object)">
            <summary>
                Writes list of same type not null objects. 
                use ReadListOfOwnedDataSerializable(...) for reading.
            </summary>        
            <param name="values"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteListOfStrings(System.Collections.Generic.ICollection{System.String})">
            <summary>
                Writes list of strings. 
                use ReadListOfStrings() for reading.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
                Writes a generic Dictionary into the stream.
            </summary>
            <remarks>
                The key and value types themselves are not stored - they must be
                supplied at deserialization time.
                <para />
                An array of keys is stored followed by an array of values.
            </remarks>
            <typeparam name="TK"> The key Type. </typeparam>
            <typeparam name="TV"> The value Type. </typeparam>
            <param name="value"> The generic dictionary. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Collections.BitArray)">
            <summary>
                Writes a BitArray value into the stream using the fewest number of bytes possible.
                Stored Size: 1 byte upwards depending on data content
                Notes:
                A null BitArray takes 1 byte.
                An empty BitArray takes 2 bytes.
            </summary>
            <param name="value"> The BitArray value to store. </param>
        </member>
        <member name="F:Ssz.Utils.Serialization.SerializationWriter.DateYearMask">
            <summary>
                Section masks used for packing DateTime values
            </summary>
        </member>
        <member name="F:Ssz.Utils.Serialization.SerializationWriter.IsNegativeSection">
            <summary>
                Section masks used for packing TimeSpan values
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.IsOwnedDataSerializableAndRecreatable(System.Type)">
            <summary>
                Checks whether instances of a Type can be created.
            </summary>
            <remarks>
                A Value Type only needs to implement IOwnedDataSerializable.
                A Reference Type needs to implement IOwnedDataSerializableAndRecreatable and provide a default constructor.
            </remarks>
            <param name="type"> The Type to check </param>
            <returns> true if the Type is recreatable; false otherwise. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.Collections.BitArray)">
            <summary>
                Writes a BitArray into the stream using the fewest number of bytes possible.
                Stored Size: 1 byte upwards depending on data content
                Notes:
                An empty BitArray takes 1 byte.
                value is not null
            </summary>
            <param name="value"> The BitArray value to store. Must not be null. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.UInt16)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.Int16)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.UInt32)">
            <summary>
                Write a UInt32 value using the fewest number of bytes possible.
            </summary>
            <remarks>
                0x00000000 - 0x0000007f (0 to 127) takes 1 byte
                0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
                0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
                0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
                ----------------------------------------------------------------
                0x10000000 - 0xFFFFFFFF (268,435,456 and above) takes 5 bytes
                Only call this method if the value is known to  be between 0 and
                268,435,455 otherwise use Write(UInt32 value)
            </remarks>
            <param name="value"> The UInt32 to store. Must be between 0 and 268,435,455 inclusive. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.Int32)">
            <summary>
                Write an Int32 value using the fewest number of bytes possible.
            </summary>
            <remarks>
                0x00000000 - 0x0000007f (0 to 127) takes 1 byte
                0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
                0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
                0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
                ----------------------------------------------------------------
                0x10000000 - 0x07FFFFFF (268,435,456 and above) takes 5 bytes
                All negative numbers take 5 bytes
                Only call this method if the value is known to be between 0 and
                268,435,455 otherwise use Write(Int32 value)
            </remarks>
            <param name="value"> The Int32 to store. Must be between 0 and 268,435,455 inclusive. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.DateTime)">
            <summary>
                Writes a DateTime value into the stream using the fewest number of bytes possible.
                Stored Size: 3 bytes to 7 bytes (.Net is 8 bytes)
                Notes:
                A DateTime containing only a date takes 3 bytes
                (except a .NET 2.0 Date with a specified DateTimeKind which will take a minimum
                of 5 bytes - no further optimization for this situation felt necessary since it
                is unlikely that a DateTimeKind would be specified without hh:mm also)
                Date plus hh:mm takes 5 bytes.
                Date plus hh:mm:ss takes 6 bytes.
                Date plus hh:mm:ss.fff takes 7 bytes.
            </summary>
            <param name="value"> The DateTime value to store. Must not contain sub-millisecond data. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.Decimal)">
            <summary>
                Writes a Decimal value into the stream using the fewest number of bytes possible.
                Stored Size: 1 byte to 14 bytes (.Net is 16 bytes)
                Restrictions: None
            </summary>
            <param name="value"> The Decimal value to store </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.String)">
            <summary>
                Writes a string value into the stream using the fewest number of bytes possible.
                Stored Size: 1 byte upwards depending on string length
                Notes:
                Encodes null, Empty, 'Y', 'N', ' ' values as a single byte
                Any other single char string is stored as two bytes
                All other strings are stored in a string token list:
                The TypeCode representing the current string token list is written first (1 byte),
                followed by the string token itself (1-4 bytes)
                When the current string list has reached 128 values then a new string list
                is generated and that is used for generating future string tokens. This continues
                until the maximum number (128) of string lists is in use, after which the string
                lists are used in a round-robin fashion.
                By doing this, more lists are created with fewer items which allows a smaller
                token size to be used for more strings.
                The first 16,384 strings will use a 1 byte token.
                The next 2,097,152 strings will use a 2 byte token. (This should suffice for most uses!)
                The next 268,435,456 strings will use a 3 byte token. (My, that is a lot!!)
                The next 34,359,738,368 strings will use a 4 byte token. (only shown for completeness!!!)
            </summary>
            <param name="value"> The string to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.TimeSpan)">
            <summary>
                Writes a TimeSpan value into the stream using the fewest number of bytes possible.
                Stored Size: 2 bytes to 8 bytes (.Net is 8 bytes)
                Notes:
                hh:mm (time) are always stored together and take 2 bytes.
                If seconds are present then 3 bytes unless (time) is not present in which case 2 bytes
                since the seconds are stored in the minutes position.
                If milliseconds are present then 4 bytes.
                In addition, if days are present they will add 1 to 4 bytes to the above.
            </summary>
            <param name="value"> The TimeSpan value to store. Must not contain sub-millisecond data. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.Type)">
            <summary>
                Stores a non-null Type object into the stream.
                Stored Size: Depends on the length of the Type's name.
                If the type is a System type (mscorlib) then it is stored without assembly name information,
                otherwise the Type's AssemblyQualifiedName is used.
            </summary>
            <param name="value"> The Type to store. Must not be null. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.Int16[])">
            <summary>
                Writes an Int16[] into the stream using the fewest possible bytes.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.Int32[])">
            <summary>
                Writes an Int32[] into the stream using the fewest possible bytes.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.Int64[])">
            <summary>
                Writes an Int64[] into the stream using the fewest possible bytes.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.UInt16[])">
            <summary>
                Writes a UInt16[] into the stream using the fewest possible bytes.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.UInt32[])">
            <summary>
                Writes a UInt32[] into the stream using the fewest possible bytes.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.UInt64[])">
            <summary>
                Writes a UInt64[] into the stream using the fewest possible bytes.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Single[])">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Double[])">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Decimal[])">
            <summary>
                All elements are stored optimized.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.DateTime[])">
            <summary>
                Writes a DateTime[] into the stream using the fewest possible bytes.        
            </summary>
            <param name="values"> The DateTime[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.TimeSpan[])">
            <summary>
                Writes a TimeSpan[] into the stream using the fewest possible bytes.        
            </summary>
            <param name="values"> The TimeSpan[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Guid[])">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Boolean[])">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.SByte[])">
            <summary>
            /
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Byte[])">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Char[])">
            <summary>
                Internal implementation to store a non-null Char[].
            </summary>
            <param name="values"> The Char[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.EncodeTimeSpan(System.TimeSpan,System.Boolean,System.Int32)">
            <summary>
                Encodes a TimeSpan into the fewest number of bytes.
                Has been separated from the WriteOptimized(TimeSpan) method so that WriteOptimized(DateTime)
                can also use this for .NET 2.0 DateTimeKind information.
                By taking advantage of the fact that a DateTime's TimeOfDay portion will never use the IsNegative
                and HasDays flags, we can use these 2 bits to store the DateTimeKind and, since DateTimeKind is
                unlikely to be set without a Time, we need no additional bytes to support a .NET 2.0 DateTime.
            </summary>
            <param name="value"> The TimeSpan to store. </param>
            <param name="partOfDateTime"> True if the TimeSpan is the TimeOfDay from a DateTime; False if a real TimeSpan. </param>
            <param name="initialData"> The intial data for the BitVector32 - contains DateTimeKind or 0 </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.DateTime[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non, null DateTime[] using a BitArray to
                determine which elements are optimizable.
            </summary>
            <param name="values"> The DateTime[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.Int16[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non-null Int16[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values"> The Int16[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.Int32[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non-null Int32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values"> The Int32[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.Int64[],System.Collections.BitArray)">
            <summary>
                Internal implementation to writes a non-null Int64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values"> The Int64[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.TimeSpan[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non-null TimeSpan[] using a BitArray to determine which elements are
                optimizable.
            </summary>
            <param name="values"> The TimeSpan[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.UInt16[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non-null UInt16[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values"> The UInt16[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.UInt32[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non-null UInt32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values"> The UInt32[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.UInt64[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non-null UInt64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values"> The UInt64[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedObjectArray(System.Object[])">
            <summary>
                values is not null
                Sequences of null values and sequences of DBNull.Values are stored with a flag and optimized count.
                Other values are stored using WriteObject().
                This routine is called by the Write(object[]), WriteOptimized(object[]) and Write(object[], object[])) methods.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteSerializedType(Ssz.Utils.Serialization.SerializedType)">
            <summary>
                Stores the specified SerializedType code into the stream.
                By using a centralized method, it is possible to collect statistics for the
                type of data being stored in DEBUG mode.
                Use the DumpTypeUsage() method to show a list of used SerializedTypes and
                the number of times each has been used. This method and the collection code
                will be optimized out when compiling in Release mode.
            </summary>
            <param name="typeCode"> The SerializedType to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Array,System.Type)">
            <summary>
                Internal implementation to write a non-null array into the stream.
                value is not null, elementType is not null
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizeFlags(System.Collections.BitArray)">
            <summary>
                Writes the Optimize Flags.
            </summary>
        </member>
        <member name="T:Ssz.Utils.Serialization.SerializedType">
            <summary>
                Enum which is used for fast serialization. It stores information about a type or type/value.
            </summary>
        </member>
        <member name="M:Ssz.Utils.SszConverter.ConvertBack(System.Object,System.Int32,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.ILogger)">
            <summary>
                Writes to userFriendlyLogger with Information level.
            </summary>
            <param name="value"></param>
            <param name="resultCount"></param>
            <param name="logger"></param>
            <param name="userFriendlyLogger"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.SszExpression.Evaluate(System.Object[],System.Object,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.ILogger)">
            <summary>        
                Writes to logger with Debug level.
                Writes to userFriendlyLogger with Warning and Error levels.
            </summary>
            <param name="dataSourceValues"></param>
            <param name="userValue"></param>
            <param name="logger"></param>
            <param name="userFriendlyLogger"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.SszQueryHelper.FindFirstLevelSpecialText(System.String,System.Char,System.Boolean)">
            <summary>
                Searches special text like %(...) or $(...) in string.
            </summary>
            <param name="value"></param>
            <param name="symbol"></param>
            <param name="returnFirstOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.SszQueryHelper.ComputeValueOfSszQueries(System.String,System.Func{System.String,System.String},Ssz.Utils.CsvDb)">
            <summary>
                Compute SSZ queries in string.
                E.g. %(TAG), %(TAG => s[0].Substring(1)), %(tags.csv,%(TAG),1)
            </summary>
            <param name="originalString"></param>
            <param name="getConstantValue"></param>
            <param name="csvDb"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.StringHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.StringHelper.WithEnding(System.String,System.String)">
            <summary>
            Returns <paramref name="str"/> with the minimal concatenation of <paramref name="ending"/> (starting from end) that
            results in satisfying .EndsWith(ending).
            </summary>
            <example>"hel".WithEnding("llo") returns "hello", which is the result of "hel" + "lo".</example>
        </member>
        <member name="M:Ssz.Utils.StringHelper.Right(System.String,System.Int32)">
            <summary>Gets the rightmost <paramref name="length" /> characters from a string.</summary>
            <param name="value">The string to retrieve the substring from.</param>
            <param name="length">The number of characters to retrieve.</param>
            <returns>The substring.</returns>
        </member>
        <member name="M:Ssz.Utils.StringHelper.IsNullOrEmptyString(System.Object)">
            <summary>
                Object is null or String.Empty
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.StringHelper.ReplaceIgnoreCase(System.String@,System.String,System.String)">
            <summary>
                returns replaces count.
                oldValue != String.Empty
            </summary>
        </member>
        <member name="M:Ssz.Utils.StringHelper.ContainsIgnoreCase(System.String,System.String)">
            <summary>
                value != String.Empty
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.StringHelper.CompareIgnoreCase(System.String,System.String)">
            <summary>        
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.StringHelper.StartsWithIgnoreCase(System.String,System.String)">
            <summary>        
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.StringHelper.EndsWithIgnoreCase(System.String,System.String)">
            <summary>        
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.ViewModelBase">
            <summary>
            The ViewModelBase is a core class in the MVVM pattern to allow a ViewModel class
            to reuse the PropertyChanged methods/pattern associated with the INotifyPropertyChanged
            </summary>
            <remarks>
            Every Model and every ViewModel should implement the INotifyPropertyChanged interface in
            order to support data binding.  In the MVVM pattern, the Model (or ViewModel) communicates
            up to interested parties exclusively through the property changed notification.
            
            This base class provides some typical implementation for the PropertyChanged and SetValue
            methods.  This helps to reduce copy/paste code in the derived class.  The base class is
            expected to be used in the following manner in the Model or ViewModel
            <example><code>
            public class MyViewModel : ViewModelBase	//derive from INPC base class
            {
            	private string _firstName;
            	public string FirstName 
            	{ 
            		get { return _firstName; } 
            		set { SetValue(ref _firstName, value); }	//Call base.SetValue to set the value and raise the PropertyChanged event
            	}
            }
            </code></example>
            </remarks>	
        </member>
        <member name="E:Ssz.Utils.ViewModelBase.PropertyChanged">
            <summary>
                Notification that the value contained in a property has changed		
            </summary>		
        </member>
        <member name="M:Ssz.Utils.ViewModelBase.ClearPropertyChangedEvent">
            <summary>
                Clears PropertyChange event from subscribers. PropertyChanged becomes empty but not null.
            </summary>
        </member>
        <member name="M:Ssz.Utils.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            Causes the PropertyChanged event to fire for the specified property name
            </summary>
            <remarks>
            This method is provided so that a class can force a property changed event
            to be raised on a specific property.  This will typically be done if one property 
            is changed and it is related to a derived property.  An example would be the Height
            property value changing also affects the Size property (even though Size was not 
            directly changed)
            
            Note that using this method is error prone as demonstrated in the following example
            <example>
            //OnPropertyChanged("Size");		//Don't use - error prone - runtime validation only
            OnPropertyChanged(() => Size);		//Best practice - compile time validation
            </example>
            </remarks>
            <param name="propertyName">The property that needs to raise the PropertyChanged notification</param>		
        </member>
        <member name="M:Ssz.Utils.ViewModelBase.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Causes the PropertyChanged event to fire for the specified property
            </summary>
            <remarks>
            This method is provided so that a class can force a property changed event
            to be raised on a specific property.  This will typically be done if one property 
            is changed and it is related to a derived property.  An example would be the Height
            property value changing also affects the Size property (even though Size was not 
            directly changed)
            
            This method is the preferred way to raise a property changed notification.  This 
            allows the caller to directly use the property which then allows for compile time 
            validation.
            <example>
            //OnPropertyChanged("Size");		//Don't use - error prone - runtime validation only
            OnPropertyChanged(() => Size);		//Best practice - compile time validation
            </example>
            </remarks>
            <param name="propertyNameExpression">The property that needs to raise the PropertyChanged notification</param>        
        </member>
        <member name="M:Ssz.Utils.ViewModelBase.OnPropertyChangedAuto(System.String)">
            <summary>
            Causes the PropertyChanged event to fire for the current property
            </summary>
            <remarks>
            This method can be used when within a property to automatically raise its property changed event.
            <example>
            private string _firstName;
            public string FirstName
            {
            	get { return _firstName; }
            	set 
            	{
            		_firstName = value;
            		OnPropertyChangedAuto();	//No need to specify "FirstName" as the argument
            	}
            }
            </example>
            </remarks>
            <param name="propertyName">
            Automatically set via the [CallerMemberName] attribute.  If the property 
            calling this method is "FirstName", then propertyName is autmatically 
            populated with "FirstName".  This helps to avoid typos ... especially
            if the property name is changed or refactored.
            </param>        
        </member>
        <member name="M:Ssz.Utils.ViewModelBase.SetValue``1(``0@,``0,System.String)">
            <summary>
            Sets the value on the backing field and raises the ProperyChanged notification
            if the value has actually changed
            </summary>
            <remarks>
            This method is expected to be used in the following manner by the derived class
            <example><code>
            public class MyViewModel : ViewModelBase	//derive from INPC base class
            {
            	private string _firstName;
            	public string FirstName 
            	{ 
            		get { return _firstName; } 
            		set { SetValue(ref _firstName, value); }	//Call base.SetValue to set the value and raise the PropertyChanged event
            	}
            }
            </code></example></remarks>
            <typeparam name="T">The field's type - makes this method generic</typeparam>
            <param name="backingField">
            A reference to the local member variable in the derived class 
            which contains the current value of the field
            </param>
            <param name="value">The value that this field is being set to</param>
            <param name="propertyName">
            Automatically set via the [CallerMemberName] attribute.  If the property 
            calling this method is "FirstName", then propertyName is autmatically 
            populated with "FirstName".  This helps to avoid typos ... especially
            if the property name is changed or refactored.
            </param>
            <returns>
            true if the new value is different from the old value
            false if the new and old values are equal (and PropertyChanged notifcation was not sent)
            </returns>        
        </member>
        <member name="M:Ssz.Utils.ViewModelBase.VerifyPropertyName(System.String)">
            <summary>
            Verifies that the property name that is specified is a valid property on the object.
            </summary>
            <remarks>
            This is done because typos in the property name could cause problems
            or if the property name changes but the caller doesn't update the related
            string.  We use reflection to verify that a property of the specified 
            name is on this class.
            </remarks>
            <param name="propertyName">The name of the property to validate</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.AssemblyBuilderFactory.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
            <summary>
            Defines a dynamic assembly that has the specified name and access rights.
            </summary>
            <param name="name">The name of the assembly.</param>
            <param name="access">The access rights of the assembly.</param>
            <returns>An object that represents the new assembly.</returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicLinqTypeAttribute">
            <summary>
            Indicates to Dynamic Linq to consider the Type as a valid dynamic linq type.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.Core.ParsingConfig">
            <summary>
            Configuration class for System.Linq.Dynamic.Core.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.Default">
            <summary>
                Default ParsingConfig
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.IsCaseSensitive">
            <summary>
                Gets or sets if parameter, method, and properties resolution should be case sensitive or not.
                False by default
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.CustomTypeProvider">
            <summary>
            Gets or sets the <see cref="T:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinqCustomTypeProvider"/>.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.ExpressionPromoter">
            <summary>
            Gets or sets the <see cref="T:System.Linq.Dynamic.Core.Parser.IExpressionPromoter"/>.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.QueryableAnalyzer">
            <summary>
            Gets or sets the <see cref="T:System.Linq.Dynamic.Core.IQueryableAnalyzer"/>.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.AreContextKeywordsEnabled">
            <summary>
            Determines if the context keywords (it, parent, and root) are valid and usable inside a Dynamic Linq string expression.  
            Does not affect the usability of the equivalent context symbols ($, ^ and ~).
            
            Default value is true.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.EvaluateGroupByAtDatabase">
             <summary>
             Gets or sets a value indicating whether the EntityFramework version supports evaluating GroupBy at database level.
             See https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-2.1#linq-groupby-translation
             
             Remark: when this setting is set to 'true', make sure to supply this ParsingConfig as first parameter on the extension methods.
            
             Default value is false.
             </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.UseParameterizedNamesInDynamicQuery">
             <summary>
             Use Parameterized Names in generated dynamic SQL query.
             See https://github.com/graeme-hill/gblog/blob/master/source_content/articles/2014.139_entity-framework-dynamic-queries-and-parameterization.mkd
            
             Default value is false.
             </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.AllowNewToEvaluateAnyType">
             <summary>
             Allows the New() keyword to evaluate any available Type.
            
             Default value is false.
             </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.RenameParameterExpression">
             <summary>
             Renames the (Typed)ParameterExpression empty Name to a the correct supplied name from `it`.
            
             Default value is false.
             </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.RenameEmptyParameterExpressionNames">
            <summary>
            Prevents any System.Linq.Expressions.ParameterExpression.Name value from being empty by substituting a random 16 character word.
            
            Default value is false.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.DisableMemberAccessToIndexAccessorFallback">
             <summary>
             By default when a member is not found in a type and the type has a string based index accessor it will be parsed as an index accessor. Use
             this flag to disable this behaviour and have parsing fail when parsing an expression
             where a member access on a non existing member happens.
            
             Default value is false.
             </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.ResolveTypesBySimpleName">
            <summary>
            By default finding types by a simple name is not supported.
            Use this flag to use the CustomTypeProvider to resolve types by a simple name like "Employee" instead of "MyDatabase.Entities.Employee".
            Note that a first matching type is returned and this functionality needs to scan all types from all assemblies, so use with caution.
            
            Default value is false.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.SupportEnumerationsFromSystemNamespace">
            <summary>
            Support enumeration-types from the System namespace in mscorlib. An example could be "StringComparison".
            
            Default value is true.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.DateTimeIsParsedAsUTC">
             <summary>
             By default DateTime (like 'Fri, 10 May 2019 11:03:17 GMT') is parsed as local time.
             Use this flag to parse all DateTime strings as UTC.
            
             Default value is false.
             </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.NumberParseCulture">
             <summary>
             The number parsing culture.
            
             Default value is CultureInfo.InvariantCulture
             </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.TypeConverters">
            <summary>
            Additional TypeConverters
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.NullPropagatingUseDefaultValueForNonNullableValueTypes">
            <summary>
            When using the NullPropagating function np(...), use a "default value" for non-nullable value types instead of "null value".
            
            Default value is false.
            </summary>
        </member>
        <member name="F:System.Linq.Dynamic.Core.PredefinedTypesHelper.PredefinedTypes">
            <summary>
                Can be used by full or simple type name.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider">
             <summary>
             The default implementation for <see cref="T:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinqCustomTypeProvider"/>.
             
             Scans the current AppDomain for all types marked with <see cref="T:System.Linq.Dynamic.Core.DynamicLinqTypeAttribute"/>, and adds them as custom Dynamic Link types.
            
             Also provides functionality to resolve a Type in the current Application Domain.
            
             This class is used as default for full .NET Framework, so not for .NET Core
             </summary>
        </member>
        <member name="F:System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider._useCache">
            <summary>
                Defines whether to cache the CustomTypes (including extension methods) which are found in the Application Domain.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider"/> class.
            </summary>        
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.GetCustomTypes">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinqCustomTypeProvider.GetCustomTypes"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.GetExtensionMethodsFromCustomTypes">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinqCustomTypeProvider.GetExtensionMethodsFromCustomTypes"/>
        </member>
        <member name="T:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinqCustomTypeProvider">
            <summary>
            Interface for providing functionality to find custom types for or resolve any type.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinqCustomTypeProvider.GetCustomTypes">
            <summary>
            Returns a list of custom types that System.Linq.Dynamic.Core will understand.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.HashSet`1" /> list of custom types.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinqCustomTypeProvider.GetExtensionMethodsFromCustomTypes">
            <summary>
            Returns a list of custom extension methods that System.Linq.Dynamic.Core will understand.
            </summary>
            <returns>A list of custom extension methods that System.Linq.Dynamic.Core will understand.</returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DefaultQueryableAnalyzer">
            <summary>
            Default implementation.
            </summary>
            <seealso cref="T:System.Linq.Dynamic.Core.IQueryableAnalyzer" />
        </member>
        <member name="M:System.Linq.Dynamic.Core.DefaultQueryableAnalyzer.SupportsLinqToObjects(System.Linq.IQueryable,System.Linq.IQueryProvider)">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.IQueryableAnalyzer.SupportsLinqToObjects(System.Linq.IQueryable,System.Linq.IQueryProvider)"/>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicClass">
            <summary>
            Provides a base class for dynamic objects.
            
            In addition to the methods defined here, the following items are added using reflection:
            - default constructor
            - constructor with all the properties as parameters (if not linq-to-entities)
            - all properties (also with getter and setters)
            - ToString() method
            - Equals() method
            - GetHashCode() method
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.GetDynamicPropertyValue``1(System.String)">
            <summary>
            Gets the dynamic property by name.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns>T</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.GetDynamicPropertyValue(System.String)">
            <summary>
            Gets the dynamic property value by name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>value</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.SetDynamicPropertyValue``1(System.String,``0)">
            <summary>
            Sets the dynamic property value by name.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.SetDynamicPropertyValue(System.String,System.Object)">
            <summary>
            Sets the dynamic property value by name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:System.Linq.Dynamic.Core.DynamicClass.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified name.
            </summary>
            <value>The <see cref="T:System.Object"/>.</value>
            <param name="name">The name.</param>
            <returns>Value from the property.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicClassFactory">
            <summary>
            A factory to create dynamic classes, based on <see href="http://stackoverflow.com/questions/29413942/c-sharp-anonymous-object-with-properties-from-dictionary" />.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClassFactory.#cctor">
            <summary>
            Initializes the <see cref="T:System.Linq.Dynamic.Core.DynamicClassFactory"/> class.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClassFactory.CreateType(System.Collections.Generic.IList{System.Linq.Dynamic.Core.DynamicProperty},System.Boolean)">
            <summary>
            The CreateType method creates a new data class with a given set of public properties and returns the System.Type object for the newly created class. If a data class with an identical sequence of properties has already been created, the System.Type object for this class is returned.        
            Data classes implement private instance variables and read/write property accessors for the specified properties.Data classes also override the Equals and GetHashCode members to implement by-value equality.
            Data classes are created in an in-memory assembly in the current application domain. All data classes inherit from <see cref="T:System.Linq.Dynamic.Core.DynamicClass"/> and are given automatically generated names that should be considered private (the names will be unique within the application domain but not across multiple invocations of the application). Note that once created, a data class stays in memory for the lifetime of the current application domain. There is currently no way to unload a dynamically created data class.
            The dynamic expression parser uses the CreateClass methods to generate classes from data object initializers. This feature in turn is often used with the dynamic Select method to create projections.
            </summary>
            <param name="properties">The DynamicProperties</param>
            <param name="createParameterCtor">Create a constructor with parameters. Default set to true. Note that for Linq-to-Database objects, this needs to be set to false.</param>
            <returns>Type</returns>
            <example>
            <code>
            <![CDATA[
            DynamicProperty[] props = new DynamicProperty[] { new DynamicProperty("Name", typeof(string)), new DynamicProperty("Birthday", typeof(DateTime)) };
            Type type = DynamicClassFactory.CreateType(props);
            DynamicClass dynamicClass = Activator.CreateInstance(type) as DynamicClass;
            dynamicClass.SetDynamicProperty("Name", "Albert");
            dynamicClass.SetDynamicProperty("Birthday", new DateTime(1879, 3, 14));
            Console.WriteLine(dynamicClass);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClassFactory.GenerateKey(System.Collections.Generic.IEnumerable{System.Linq.Dynamic.Core.DynamicProperty},System.Boolean)">
            <summary>
            Generates the key.
            Anonymous classes are generics based. The generic classes are distinguished by number of parameters and name of parameters. The specific types of the parameters are the generic arguments.
            </summary>
            <param name="dynamicProperties">The dynamic propertys.</param>
            <param name="createParameterCtor">if set to <c>true</c> [create parameter ctor].</param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicEnumerableAsyncExtensions">
            <summary>
            Define async extensions on <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicEnumerableAsyncExtensions.ToDynamicArrayAsync(System.Collections.IEnumerable,System.Type)">
            <summary>
            Async creates an array of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <param name="type">A <see cref="T:System.Type"/> cast to.</param>
            <returns>An Array that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicEnumerableAsyncExtensions.ToDynamicArrayAsync(System.Collections.IEnumerable)">
            <summary>
            Async creates an array of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>An array that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicEnumerableAsyncExtensions.ToDynamicArrayAsync``1(System.Collections.IEnumerable)">
            <summary>
            Async creates an array of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>An Array{T} that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicEnumerableAsyncExtensions.ToDynamicListAsync(System.Collections.IEnumerable,System.Type)">
            <summary>
            Async creates a list of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <param name="type">A <see cref="T:System.Type"/> cast to.</param>
            <returns>An List that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicEnumerableAsyncExtensions.ToDynamicListAsync(System.Collections.IEnumerable)">
            <summary>
            Async creates a list of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>A List that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicEnumerableAsyncExtensions.ToDynamicListAsync``1(System.Collections.IEnumerable)">
            <summary>
            Async creates a list of dynamic objects from an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">Generic Type</typeparam>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>A List{T} that contains the elements from the input sequence.</returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicEnumerableExtensions">
            <summary>
            Define extensions on <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicEnumerableExtensions.ToDynamicArray(System.Collections.IEnumerable)">
            <summary>
            Creates an array of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>An array that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicEnumerableExtensions.ToDynamicArray``1(System.Collections.IEnumerable)">
            <summary>
            Creates an array of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>An Array{T} that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicEnumerableExtensions.ToDynamicArray(System.Collections.IEnumerable,System.Type)">
            <summary>
            Creates an array of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <param name="type">A <see cref="T:System.Type"/> cast to.</param>
            <returns>An Array that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicEnumerableExtensions.ToDynamicList(System.Collections.IEnumerable)">
            <summary>
            Creates a list of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>A List that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicEnumerableExtensions.ToDynamicList(System.Collections.IEnumerable,System.Type)">
            <summary>
            Creates a list of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <param name="type">A <see cref="T:System.Type"/> cast to.</param>
            <returns>A List that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicEnumerableExtensions.ToDynamicList``1(System.Collections.IEnumerable)">
            <summary>
            Creates a list of dynamic objects from a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">Generic Type</typeparam>
            <param name="source">A <see cref="T:System.Collections.IEnumerable"/> to create an array from.</param>
            <returns>A List{T} that contains the elements from the input sequence.</returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicExpressionParser">
            <summary>
            Helper class to convert an expression into an LambdaExpression
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Type,System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda``1(System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda``1(System.Type,System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Type,System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda``1(System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.Linq.Expressions.ParameterExpression[],System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda``1(System.Type,System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.Linq.Expressions.ParameterExpression[],System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Boolean,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda``2(System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="T">The `it`-Type.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda``2(System.Type,System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="T">The `it`-Type.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Dynamic.Core.ParsingConfig,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Type,System.Linq.Dynamic.Core.ParsingConfig,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Dynamic.Core.ParsingConfig,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Type,System.Linq.Dynamic.Core.ParsingConfig,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Type,System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Type,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Dynamic.Core.ParsingConfig,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Type,System.Linq.Dynamic.Core.ParsingConfig,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="delegateType">The delegate type.</param>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Boolean,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicGetMemberBinder">
            <summary>
            Code is based on SqlLinq by dkackman (https://github.com/dkackman/SqlLinq/blob/210b594e37f14061424397368ed750ce547c21e7/License.md) however it's modified to solve several issues.
            </summary>
            <seealso cref="T:System.Dynamic.GetMemberBinder" />
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicProperty">
            <summary>
            DynamicProperty
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicProperty.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.DynamicProperty"/> class.
            </summary>
            <param name="name">The name from the property.</param>
            <param name="type">The type from the property.</param>
        </member>
        <member name="P:System.Linq.Dynamic.Core.DynamicProperty.Name">
            <summary>
            Gets the name from the property.
            </summary>
            <value>
            The name from the property.
            </value>
        </member>
        <member name="P:System.Linq.Dynamic.Core.DynamicProperty.Type">
            <summary>
            Gets the type from the property.
            </summary>
            <value>
            The type from the property.
            </value>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicQueryableExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for querying data structures that implement <see cref="T:System.Linq.IQueryable"/>.
            It allows dynamic string based querying. Very handy when, at compile time, you don't know the type of queries that will be generated,
            or when downstream components only return column names to sort and filter by.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Aggregate(System.Linq.IQueryable,System.String,System.String)">
            <summary>
            Dynamically runs an aggregate function on the IQueryable.
            </summary>
            <param name="source">The IQueryable data source.</param>
            <param name="function">The name of the function to run. Can be Sum, Average, Min or Max.</param>
            <param name="member">The name of the property to aggregate over.</param>
            <returns>The value of the aggregate function run over the specified property.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.All(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that All asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to calculate the All of.
            </param>
            <param name="predicate">A projection function to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.All(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
                Determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that All asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to calculate the All of.
            </param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A projection function to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Any(System.Linq.IQueryable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">A sequence to check for being empty.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.Any();
            </code>
            </example>
            <returns>true if the source sequence contains any elements; otherwise, false.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Any(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">A sequence to check for being empty.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Any("Income > 50");
            var result2 = queryable.Any("Income > @0", 50);
            var result3 = queryable.Select("Roles.Any()");
            </code>
            </example>
            <returns>true if the source sequence contains any elements; otherwise, false.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Any(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Any(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Any(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">A sequence to check for being empty.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>true if the source sequence contains any elements; otherwise, false.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Average(System.Linq.IQueryable)">
            <summary>
            Computes the average of a sequence of numeric values.
            </summary>
            <param name="source">A sequence of numeric values to calculate the average of.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Average();
            var result2 = queryable.Select("Roles.Average()");
            </code>
            </example>
            <returns>The average of the values in the sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Average(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Computes the average of a sequence of numeric values.
            </summary>
            <param name="source">A sequence of numeric values to calculate the average of.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.Average("Income");
            </code>
            </example>
            <returns>The average of the values in the sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Average(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Average(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Average(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Computes the average of a sequence of numeric values.
            </summary>
            <param name="source">A sequence of numeric values to calculate the average of.</param>
            <param name="lambda">A Lambda Expression.</param>
            <returns>The average of the values in the sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.AsEnumerable(System.Linq.IQueryable)">
            <summary>
            Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1"/> of dynamic.
            </summary>
            <param name="source">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1"/> of dynamic.</param>
            <returns>The input typed as <see cref="T:System.Collections.Generic.IEnumerable`1"/> of dynamic.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Cast(System.Linq.IQueryable,System.Type)">
            <summary>
            Converts the elements of an <see cref="T:System.Linq.IQueryable"/> to the specified type.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be converted.</param>
            <param name="type">The type to convert the elements of source to.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains each element of the source sequence converted to the specified type.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Cast(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String)">
            <summary>
            Converts the elements of an <see cref="T:System.Linq.IQueryable"/> to the specified type.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be converted.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="typeName">The type to convert the elements of source to.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains each element of the source sequence converted to the specified type.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Cast(System.Linq.IQueryable,System.String)">
            <summary>
            Converts the elements of an <see cref="T:System.Linq.IQueryable"/> to the specified type.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be converted.</param>
            <param name="typeName">The type to convert the elements of source to.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains each element of the source sequence converted to the specified type.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Count(System.Linq.IQueryable)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.Count();
            </code>
            </example>
            <returns>The number of elements in the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Count(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Count("Income > 50");
            var result2 = queryable.Count("Income > @0", 50);
            var result3 = queryable.Select("Roles.Count()");
            </code>
            </example>
            <returns>The number of elements in the specified sequence that satisfies a condition.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Count(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Count(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Count(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The number of elements in the specified sequence that satisfies a condition.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.DefaultIfEmpty(System.Linq.IQueryable)">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return a default value for if empty.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.DefaultIfEmpty();
            </code>
            </example>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains default if source is empty; otherwise, source.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.DefaultIfEmpty(System.Linq.IQueryable,System.Object)">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return a default value for if empty.</param>
            <param name="defaultValue">The value to return if the sequence is empty.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.DefaultIfEmpty(new Employee());
            </code>
            </example>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains defaultValue if source is empty; otherwise, source.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Distinct(System.Linq.IQueryable)">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer to compare values.
            </summary>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Distinct();
            var result2 = queryable.Select("Roles.Distinct()");
            </code>
            </example>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains distinct elements from the source sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.First(System.Linq.IQueryable)">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <returns>The first element in source.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.First(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.First(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.First(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.First(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.FirstOrDefault(System.Linq.IQueryable)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <returns>default if source is empty; otherwise, the first element in source.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.FirstOrDefault(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>default if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.FirstOrDefault(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.FirstOrDefault(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.FirstOrDefault(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>default if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.String,System.Collections.IEqualityComparer,System.Object[])">
            <summary>
            Groups the elements of a sequence according to a specified key string function 
            and creates a result value from each group and its key.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> whose elements to group.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="keySelector">A string expression to specify the key for each element.</param>
            <param name="resultSelector">A string expression to specify a result value from each group.</param>
            <param name="equalityComparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> where each element represents a projection over a group and its key.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="resultSelector"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Collections.IEqualityComparer,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.String,System.Collections.IEqualityComparer,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.String)">
            <summary>
            Groups the elements of a sequence according to a specified key string function 
            and creates a result value from each group and its key.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> whose elements to group.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="keySelector">A string expression to specify the key for each element.</param>
            <param name="resultSelector">A string expression to specify a result value from each group.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> where each element represents a projection over a group and its key.</returns>
            <example>
            <code>
            var groupResult1 = queryable.GroupBy("NumberPropertyAsKey", "StringProperty");
            var groupResult2 = queryable.GroupBy("new (NumberPropertyAsKey, StringPropertyAsKey)", "new (StringProperty1, StringProperty2)");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String)">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.String)"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.String,System.Collections.IEqualityComparer)">
            <summary>
            Groups the elements of a sequence according to a specified key string function 
            and creates a result value from each group and its key.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> whose elements to group.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="keySelector">A string expression to specify the key for each element.</param>
            <param name="resultSelector">A string expression to specify a result value from each group.</param>
            <param name="equalityComparer">The comparer to use.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> where each element represents a projection over a group and its key.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Collections.IEqualityComparer)">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.String,System.Collections.IEqualityComparer)"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Groups the elements of a sequence according to a specified key string function 
            and creates a result value from each group and its key.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> whose elements to group.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="keySelector">A string expression to specify the key for each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> where each element represents a projection over a group and its key.</returns>
            <example>
            <code>
            var groupResult1 = queryable.GroupBy("NumberPropertyAsKey");
            var groupResult2 = queryable.GroupBy("new (NumberPropertyAsKey, StringPropertyAsKey)");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Collections.IEqualityComparer,System.Object[])">
            <summary>
            Groups the elements of a sequence according to a specified key string function 
            and creates a result value from each group and its key.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> whose elements to group.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="keySelector">A string expression to specify the key for each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="equalityComparer">The comparer to use.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> where each element represents a projection over a group and its key.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.Collections.IEqualityComparer,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Collections.IEqualityComparer,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Dynamic.Core.ParsingConfig,System.String[])">
            <summary>
            Groups the elements of a sequence according to multiple specified key string functions 
            and creates a result value from each group (and subgroups) and its key.
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="source">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="keySelectors"><see cref="T:System.String"/> expressions to specify the keys for each element.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.Linq.Dynamic.Core.GroupResult"/> where each element represents a projection over a group, its key, and its subgroups.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Dynamic.Core.ParsingConfig,System.String[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            Groups the elements of a sequence according to multiple specified key functions 
            and creates a result value from each group (and subgroups) and its key.
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="source">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.</param>
            <param name="keySelectors">Lambda expressions to specify the keys for each element.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.Linq.Dynamic.Core.GroupResult"/> where each element represents a projection over a group, its key, and its subgroups.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupJoin(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.Collections.IEnumerable,System.String,System.String,System.String,System.Object[])">
            <summary>
            Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.
            </summary>
            <param name="outer">The first sequence to join.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A dynamic function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A dynamic function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A dynamic function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicates as parameters. Similar to the way String.Format formats strings.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> obtained by performing a grouped join on two sequences.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupJoin(System.Linq.IQueryable,System.Collections.IEnumerable,System.String,System.String,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.GroupJoin(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.Collections.IEnumerable,System.String,System.String,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Join(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.Collections.IEnumerable,System.String,System.String,System.String,System.Object[])">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
            </summary>
            <param name="outer">The first sequence to join.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A dynamic function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A dynamic function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A dynamic function to create a result element from two matching elements.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicates as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> obtained by performing an inner join on two sequences.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Join(System.Linq.IQueryable,System.Collections.IEnumerable,System.String,System.String,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Join(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.Collections.IEnumerable,System.String,System.String,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Join``1(System.Linq.IQueryable{``0},System.Linq.Dynamic.Core.ParsingConfig,System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.Object[])">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
            </summary>
            <typeparam name="TElement">The type of the elements of both sequences, and the result.</typeparam>
            <param name="outer">The first sequence to join.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A dynamic function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A dynamic function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A dynamic function to create a result element from two matching elements.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicates as parameters.  Similar to the way String.Format formats strings.</param>
            <remarks>This overload only works on elements where both sequences and the resulting element match.</remarks>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> that has elements of type TResult obtained by performing an inner join on two sequences.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Join``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Join``1(System.Linq.IQueryable{``0},System.Linq.Dynamic.Core.ParsingConfig,System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Last(System.Linq.IQueryable)">
            <summary>
            Returns the last element of a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <returns>The last element in source.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Last(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Last(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Last(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Last(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.LastOrDefault(System.Linq.IQueryable)">
            <summary>
            Returns the last element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <returns>default if source is empty; otherwise, the last element in source.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.LastOrDefault(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition, or a default value if the sequence contains no elements.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.LastOrDefault(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.LastOrDefault(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.LastOrDefault(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition, or a default value if the sequence contains no elements.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.LongCount(System.Linq.IQueryable)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.LongCount();
            </code>
            </example>
            <returns>The number of elements in the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.LongCount(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.LongCount("Income > 50");
            var result2 = queryable.LongCount("Income > @0", 50);
            var result3 = queryable.Select("Roles.LongCount()");
            </code>
            </example>
            <returns>The number of elements in the specified sequence that satisfies a condition.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.LongCount(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.LongCount(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.LongCount(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The number of elements in the specified sequence that satisfies a condition.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Max(System.Linq.IQueryable)">
            <summary>
            Computes the max element of a sequence.
            </summary>
            <param name="source">A sequence of values to calculate find the max for.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Max();
            var result2 = queryable.Select("Roles.Max()");
            </code>
            </example>
            <returns>The max element in the sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Max(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Computes the max element of a sequence.
            </summary>
            <param name="source">A sequence of values to calculate find the max for.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.Max("Income");
            </code>
            </example>
            <returns>The max element in the sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Max(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Max(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Max(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Computes the max element of a sequence.
            </summary>
            <param name="source">A sequence of values to calculate find the max for.</param>
            <param name="lambda">A Lambda Expression.</param>
            <returns>The max element in the sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Min(System.Linq.IQueryable)">
            <summary>
            Computes the min element of a sequence.
            </summary>
            <param name="source">A sequence of values to calculate find the min for.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Min();
            var result2 = queryable.Select("Roles.Min()");
            </code>
            </example>
            <returns>The min element in the sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Min(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Computes the min element of a sequence.
            </summary>
            <param name="source">A sequence of values to calculate find the min for.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.Min("Income");
            </code>
            </example>
            <returns>The min element in the sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Min(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Min(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Min(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Computes the min element of a sequence.
            </summary>
            <param name="source">A sequence of values to calculate find the min for.</param>
            <param name="lambda">A Lambda Expression.</param>
            <returns>The min element in the sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OfType(System.Linq.IQueryable,System.Type)">
            <summary>
            Filters the elements of an <see cref="T:System.Linq.IQueryable"/> based on a specified type.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IQueryable"/> whose elements to filter.</param>
            <param name="type">The type to filter the elements of the sequence on.</param>
            <returns>A collection that contains the elements from source that have the type.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OfType(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String)">
            <summary>
            Filters the elements of an <see cref="T:System.Linq.IQueryable"/> based on a specified type.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IQueryable"/> whose elements to filter.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="typeName">The type to filter the elements of the sequence on.</param>
            <returns>A collection that contains the elements from source that have the type.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OfType(System.Linq.IQueryable,System.String)">
            <summary>
            Filters the elements of an <see cref="T:System.Linq.IQueryable"/> based on a specified type.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IQueryable"/> whose elements to filter.</param>
            <param name="typeName">The type to filter the elements of the sequence on.</param>
            <returns>A collection that contains the elements from source that have the type.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable`1"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
            <example>
            <code>
            <![CDATA[
            var resultSingle = queryable.OrderBy<User>("NumberProperty");
            var resultSingleDescending = queryable.OrderBy<User>("NumberProperty DESC");
            var resultMultiple = queryable.OrderBy<User>("NumberProperty, StringProperty");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Collections.IComparer,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable`1"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Collections.IComparer,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable`1"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OrderBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
            <example>
            <code>
            var resultSingle = queryable.OrderBy("NumberProperty");
            var resultSingleDescending = queryable.OrderBy("NumberProperty DESC");
            var resultMultiple = queryable.OrderBy("NumberProperty, StringProperty DESC");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OrderBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Collections.IComparer,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OrderBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Collections.IComparer,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.OrderBy(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Collections.IComparer,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Page(System.Linq.IQueryable,System.Int32,System.Int32)">
            <summary>
            Returns the elements as paged.
            </summary>
            <param name="source">The IQueryable to return elements from.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">The number of elements per page.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> that contains the paged elements.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Returns the elements as paged.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The IQueryable to return elements from.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">The number of elements per page.</param>
            <returns>A <see cref="T:System.Linq.IQueryable`1"/> that contains the paged elements.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.PageResult(System.Linq.IQueryable,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Returns the elements as paged and include the CurrentPage, PageCount, PageSize and RowCount.
            </summary>
            <param name="source">The IQueryable to return elements from.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">The number of elements per page.</param>
            <param name="rowCount">If this optional parameter has been defined, this value is used as the RowCount instead of executing a Linq `Count()`.</param>
            <returns>PagedResult</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.PageResult``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Returns the elements as paged and include the CurrentPage, PageCount, PageSize and RowCount.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The IQueryable to return elements from.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">The number of elements per page.</param>
            <param name="rowCount">If this optional parameter has been defined, this value is used as the RowCount instead of executing a Linq `Count()`.</param>
            <returns>PagedResult{TSource}</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Reverse(System.Linq.IQueryable)">
            <summary>
            Inverts the order of the elements in a sequence.
            </summary>
            <param name="source">A sequence of values to reverse.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> whose elements correspond to those of the input sequence in reverse order.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Select(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="selector">A projection string expression to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking a projection string on each element of source.</returns>
            <example>
            <code>
            var singleField = queryable.Select("StringProperty");
            var dynamicObject = queryable.Select("new (StringProperty1, StringProperty2 as OtherStringPropertyName)");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Select(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Select``1(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence into a new class of type TResult.
            Details see <see href="http://solutionizing.net/category/linq/"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="selector">A projection string expression to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> whose elements are the result of invoking a projection string on each element of source.</returns>
            <example>
            <code language="cs">
            <![CDATA[
            var users = queryable.Select<User>("new (Username, Pwd as Password)");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Select``1(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Select``1(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Select(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.Type,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence into a new class of type TResult.
            Details see http://solutionizing.net/category/linq/ 
            </summary>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="resultType">The result type.</param>
            <param name="selector">A projection string expression to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking a projection string on each element of source.</returns>
            <example>
            <code>
            var users = queryable.Select(typeof(User), "new (Username, Pwd as Password)");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Select(System.Linq.IQueryable,System.Type,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Select(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.Type,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Linq.IQueryable"/> and combines the resulting sequences into one sequence.
            </summary>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="selector">A projection string expression to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
            <example>
            <code>
            var roles = users.SelectMany("Roles");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.Type,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Linq.IQueryable"/> and combines the resulting sequences into one sequence.
            </summary>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="selector">A projection string expression to apply to each element.</param>
            <param name="resultType">The result type.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
            <example>
            <code>
            var permissions = users.SelectMany(typeof(Permission), "Roles.SelectMany(Permissions)");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.Type,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.Type,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany``1(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Linq.IQueryable`1"/> and combines the resulting sequences into one sequence.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="selector">A projection string expression to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
            <example>
            <code>
            <![CDATA[
            var permissions = users.SelectMany<Permission>("Roles.SelectMany(Permissions)");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany``1(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany``1(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.String,System.Object[],System.Object[])">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Linq.IQueryable"/>
            and invokes a result selector function on each element therein. The resulting
            values from each intermediate sequence are combined into a single, one-dimensional
            sequence and returned.
            </summary>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="collectionSelector">A projection function to apply to each element of the input sequence.</param>
            <param name="resultSelector">A projection function to apply to each element of each intermediate sequence. Should only use x and y as parameter names.</param>
            <param name="collectionSelectorArgs">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="resultSelectorArgs">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking the one-to-many 
            projection function <paramref name="collectionSelector"/> on each element of source and then mapping
            each of those sequence elements and their corresponding source element to a result element.
            </returns>
            <example>
            <code>
            <![CDATA[
            // TODO
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.String,System.String,System.Object[],System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.String,System.String,System.String,System.Object[],System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.String,System.String,System.String,System.Object[],System.Object[])">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Linq.IQueryable"/>
            and invokes a result selector function on each element therein. The resulting
            values from each intermediate sequence are combined into a single, one-dimensional
            sequence and returned.
            </summary>
            <param name="source">A sequence of values to project.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="collectionSelector">A projection function to apply to each element of the input sequence.</param>
            <param name="collectionParameterName">The name from collectionParameter to use. Default is x.</param>
            <param name="resultSelector">A projection function to apply to each element of each intermediate sequence.</param>
            <param name="resultParameterName">The name from resultParameterName to use. Default is y.</param>
            <param name="collectionSelectorArgs">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="resultSelectorArgs">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking the one-to-many 
            projection function <paramref name="collectionSelector"/> on each element of source and then mapping
            each of those sequence elements and their corresponding source element to a result element.
            </returns>
            <example>
            <code>
            <![CDATA[
            // TODO
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.String,System.String,System.String,System.String,System.Object[],System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SelectMany(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.String,System.String,System.String,System.Object[],System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Single(System.Linq.IQueryable)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> to return the single element of.</param>
            <returns>The single element of the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Single(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Single(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Single(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Single(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SingleOrDefault(System.Linq.IQueryable)">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence
            is empty; this method throws an exception if there is more than one element
            in the sequence.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> to return the single element of.</param>
            <returns>The single element of the input sequence, or default if the sequence contains no elements.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SingleOrDefault(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition or a default value if the sequence
            is empty; and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SingleOrDefault(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SingleOrDefault(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SingleOrDefault(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition or a default value if the sequence
            is empty; and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the last element of.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>The first element in source that passes the test in predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Skip(System.Linq.IQueryable,System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> to return elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> that contains elements that occur after the specified index in the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SkipWhile(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
            <param name="source">A sequence to check for being empty.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.SkipWhile("Income > 50");
            var result2 = queryable.SkipWhile("Income > @0", 50);
            </code>
            </example>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains elements from source starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SkipWhile(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.SkipWhile(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Sum(System.Linq.IQueryable)">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source">A sequence of numeric values to calculate the sum of.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.Sum();
            var result2 = queryable.Select("Roles.Sum()");
            </code>
            </example>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Sum(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source">A sequence of numeric values to calculate the sum of.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result = queryable.Sum("Income");
            </code>
            </example>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Sum(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Sum(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Sum(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source">A sequence of numeric values to calculate the sum of.</param>
            <param name="lambda">A Lambda Expression.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Take(System.Linq.IQueryable,System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="source">The sequence to return elements from.</param>
            <param name="count">The number of elements to return.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> that contains the specified number of elements from the start of source.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.TakeWhile(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            </summary>
            <param name="source">A sequence to check for being empty.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <example>
            <code language="cs">
            IQueryable queryable = employees.AsQueryable();
            var result1 = queryable.TakeWhile("Income > 50");
            var result2 = queryable.TakeWhile("Income > @0", 50);
            </code>
            </example>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains elements from the input sequence occurring before the element at which the test specified by predicate no longer passes.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.TakeWhile(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.TakeWhile(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
            <example>
            <code>
            <![CDATA[
            var result = queryable.OrderBy<User>("LastName");
            var resultSingle = result.ThenBy<User>("NumberProperty");
            var resultSingleDescending = result.ThenBy<User>("NumberProperty DESC");
            var resultMultiple = result.ThenBy<User>("NumberProperty, StringProperty");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Collections.IComparer,System.Object[])">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.Collections.IComparer,System.Object[])">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.ThenBy(System.Linq.IOrderedQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
            <example>
            <code>
            var result = queryable.OrderBy("LastName");
            var resultSingle = result.OrderBy("NumberProperty");
            var resultSingleDescending = result.OrderBy("NumberProperty DESC");
            var resultMultiple = result.OrderBy("NumberProperty, StringProperty DESC");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.ThenBy(System.Linq.IOrderedQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Collections.IComparer,System.Object[])">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="ordering">An expression string to indicate values to order by.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters.  Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> whose elements are sorted according to the specified <paramref name="ordering"/>.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.ThenBy(System.Linq.IOrderedQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.ThenBy(System.Linq.IOrderedQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.ThenBy(System.Linq.IOrderedQueryable,System.String,System.Collections.IComparer,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.ThenBy(System.Linq.IOrderedQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Collections.IComparer,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A <see cref="T:System.Linq.IQueryable`1"/> to filter.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">An expression string to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable`1"/> that contains elements from the input sequence that satisfy the condition specified by predicate.</returns>
            <example>
            <code language="cs">
            var result1 = queryable.Where("NumberProperty = 1");
            var result2 = queryable.Where("NumberProperty = @0", 1);
            var result3 = queryable.Where("StringProperty = null");
            var result4 = queryable.Where("StringProperty = \"abc\"");
            var result5 = queryable.Where("StringProperty = @0", "abc");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> to filter.</param>
            <param name="config">The <see cref="T:System.Linq.Dynamic.Core.ParsingConfig"/>.</param>
            <param name="predicate">An expression string to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> that contains elements from the input sequence that satisfy the condition specified by predicate.</returns>
            <example>
            <code>
            var result1 = queryable.Where("NumberProperty = 1");
            var result2 = queryable.Where("NumberProperty = @0", 1);
            var result3 = queryable.Where("StringProperty = null");
            var result4 = queryable.Where("StringProperty = \"abc\"");
            var result5 = queryable.Where("StringProperty = @0", "abc");
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object[])">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Dynamic.Core.ParsingConfig,System.String,System.Object[])"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="source">A <see cref="T:System.Linq.IQueryable"/> to filter.</param>
            <param name="lambda">A cached Lambda Expression.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> that contains elements from the input sequence that satisfy the condition specified by LambdaExpression.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.LambdaExpression)">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.DynamicQueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)"/>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicQueryableWithFormattableStringExtensions">
            <summary>
            Provides a set of static extension methods for querying data structures that implement <see cref="T:System.Linq.IQueryable"/>.
            It supports a FormattableString string as predicate.
            <seealso cref="T:System.Linq.Dynamic.Core.DynamicQueryableExtensions"/>
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Exceptions.ParseException">
            <summary>
            Represents errors that occur while parsing dynamic linq string expressions.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Exceptions.ParseException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.Exceptions.ParseException"/> class with a specified error message and position.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="position">The location in the parsed string that produced the <see cref="T:System.Linq.Dynamic.Core.Exceptions.ParseException"/></param>
        </member>
        <member name="P:System.Linq.Dynamic.Core.Exceptions.ParseException.Position">
            <summary>
            The location in the parsed string that produced the <see cref="T:System.Linq.Dynamic.Core.Exceptions.ParseException"/>.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Exceptions.ParseException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Exceptions.ParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:System.Linq.Dynamic.Core.ExtensibilityPoint">
            <summary>
            Extensibility point: If you want to modify expanded queries before executing them
            set your own functionality to override empty QueryOptimizer
            </summary>
        </member>
        <member name="F:System.Linq.Dynamic.Core.ExtensibilityPoint.QueryOptimizer">
            <summary>
            Place to optimize your queries. Example: Add a reference to Nuget package Linq.Expression.Optimizer 
            and in your program initializers set Extensibility.QueryOptimizer = ExpressionOptimizer.visit;
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.Core.GroupResult">
            <summary>
            The result of a call to a <see cref="T:System.Linq.Dynamic.Core.DynamicQueryableExtensions"/>.GroupByMany() overload.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.GroupResult.Key">
            <summary>
            The key value of the group.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.GroupResult.Count">
            <summary>
            The number of resulting elements in the group.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.GroupResult.Items">
            <summary>
            The resulting elements in the group.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.GroupResult.Subgroups">
            <summary>
            The resulting subgroups in the group.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.GroupResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> showing the key of the group and the number of items in the group.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.IAssemblyHelper">
            <summary>
            IAssemblyHelper interface which is used to retrieve assemblies that have been loaded into the execution context of this application domain.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.IAssemblyHelper.GetAssemblies">
            <summary>
            Gets the assemblies that have been loaded into the execution context of this application domain.
            </summary>
            
            <returns>
            An array of assemblies in this application domain.
            </returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.IQueryableAnalyzer">
            <summary>
            Interface for QueryableAnalyzer.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.IQueryableAnalyzer.SupportsLinqToObjects(System.Linq.IQueryable,System.Linq.IQueryProvider)">
            <summary>
            Determines whether the specified query (and provider) supports LinqToObjects.
            </summary>
            <param name="query">The query to check.</param>
            <param name="provider">The provider to check (can be null).</param>
            <returns>true/false</returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.PagedResult">
            <summary>
            PagedResult
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.PagedResult.Queryable">
            <summary>
            Gets or sets the queryable.
            </summary>
            <value>
            The queryable.
            </value>
        </member>
        <member name="P:System.Linq.Dynamic.Core.PagedResult.CurrentPage">
            <summary>
            Gets or sets the current page.
            </summary>
            <value>
            The current page.
            </value>
        </member>
        <member name="P:System.Linq.Dynamic.Core.PagedResult.PageCount">
            <summary>
            Gets or sets the page count.
            </summary>
            <value>
            The page count.
            </value>
        </member>
        <member name="P:System.Linq.Dynamic.Core.PagedResult.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>
            The size of the page.
            </value>
        </member>
        <member name="P:System.Linq.Dynamic.Core.PagedResult.RowCount">
            <summary>
            Gets or sets the row count.
            </summary>
            <value>
            The row count.
            </value>
        </member>
        <member name="T:System.Linq.Dynamic.Core.PagedResult`1">
            <summary>
            PagedResult{TSource}
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
        </member>
        <member name="P:System.Linq.Dynamic.Core.PagedResult`1.Queryable">
            <summary>
            Gets or sets the queryable.
            </summary>
            <value>
            The queryable.
            </value>
        </member>
        <member name="M:System.Linq.Dynamic.Core.ParameterExpressionHelper.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space
            characters.
            
            Recreates the same functionality as System.String.IsNullOrWhiteSpace but included here
            for compatibility with net35.
            </summary>
            <param name="value">
            The string to test.
            </param>
            <returns>
            true if the value parameter is null or System.String.Empty, or if value consists
            exclusively of white-space characters.
            </returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.ParameterExpressionHelper.GenerateRandomWord">
            <summary>
            Generates a random 16 character word derived from a Guid value.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Parser.ConstantExpressionWrapper">
            <summary>
            Based on gblog by graeme-hill. https://github.com/graeme-hill/gblog/blob/master/source_content/articles/2014.139_entity-framework-dynamic-queries-and-parameterization.mkd
            </summary>
        </member>
        <member name="F:System.Linq.Dynamic.Core.Parser.EnumerationsFromMscorlib.PredefinedEnumerationTypes">
            <summary>
            All Enum types from mscorlib/netstandard.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Parser.ExpressionParser">
            <summary>
            ExpressionParser
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.Parser.ExpressionParser.ItName">
            <summary>
            Gets name for the `it` field. By default this is set to the KeyWord value "it".
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.Parser.ExpressionParser.LastLambdaItName">
            <summary>
            There was a problem when an expression contained multiple lambdas where
            the ItName was not cleared and freed for the next lambda. This variable
            stores the ItName of the last parsed lambda.
            Not used internally by ExpressionParser, but used to preserve compatiblity of parsingConfig.RenameParameterExpression
            which was designed to only work with mono-lambda expressions.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.ExpressionParser.#ctor(System.Linq.Expressions.ParameterExpression[],System.String,System.Object[],System.Linq.Dynamic.Core.ParsingConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.Parser.ExpressionParser"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="expression">The expression.</param>
            <param name="values">The values.</param>
            <param name="parsingConfig">The parsing configuration.</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.ExpressionParser.Parse(System.Type,System.Boolean)">
            <summary>
            Uses the TextParser to parse the string into the specified result type.
            </summary>
            <param name="resultType">Type of the result.</param>
            <param name="createParameterCtor">if set to <c>true</c> [create parameter ctor].</param>
            <returns>Expression</returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Parser.ExpressionPromoter">
            <summary>
            ExpressionPromoter
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.ExpressionPromoter.#ctor(System.Linq.Dynamic.Core.ParsingConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.Parser.ExpressionPromoter"/> class.
            </summary>
            <param name="config">The ParsingConfig.</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.ExpressionPromoter.Promote(System.Linq.Expressions.Expression,System.Type,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.Parser.IExpressionPromoter.Promote(System.Linq.Expressions.Expression,System.Type,System.Boolean,System.Boolean)"/>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Parser.IExpressionPromoter">
            <summary>
            Expression promoter is used to promote object or value types
            to their destination type when an automatic promotion is available
            such as: int to int?
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.IExpressionPromoter.Promote(System.Linq.Expressions.Expression,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Promote an expression
            </summary>
            <param name="expr">Source expression</param>
            <param name="type">Destionation data type to promote</param>
            <param name="exact">If the match must be exact</param>
            <param name="convertExpr">Convert expression</param>
            <returns>The promoted <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Parser.NumberParser">
            <summary>
            NumberParser
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.NumberParser.#ctor(System.Linq.Dynamic.Core.ParsingConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.Parser.NumberParser"/> class.
            </summary>
            <param name="config">The ParsingConfig.</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.NumberParser.TryParseNumber(System.String,System.Type,System.Object@)">
            <summary>
            Tries to parse the number (text) into the specified type.
            </summary>
            <param name="text">The text.</param>
            <param name="type">The type.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.NumberParser.ParseNumber(System.String,System.Type)">
            <summary>
            Parses the number (text) into the specified type.
            </summary>
            <param name="text">The text.</param>
            <param name="type">The type.</param>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Parser.StringParser">
            <summary>
            Parse a Double and Single Quoted string.
            Some parts of the code is based on https://github.com/zzzprojects/Eval-Expression.NET
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.SupportedMethods.MethodFinder.#ctor(System.Linq.Dynamic.Core.ParsingConfig)">
            <summary>
            Get an instance
            </summary>
            <param name="parsingConfig"></param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.TypeFinder.ResolveType(System.String)">
            <summary>
            Resolve any type by fullname which is registered in the current application domain.
            </summary>
            <param name="typeFullName">The typename to resolve.</param>
            <returns>A resolved <see cref="T:System.Type"/> or null when not found.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.TypeHelper.ResolveType(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String)">
            <summary>
            Resolve any type which is registered in the current application domain.
            </summary>
            <param name="assemblies">The assemblies to inspect.</param>
            <param name="typeFullName">The typename to resolve.</param>
            <returns>A resolved <see cref="T:System.Type"/> or null when not found.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.TypeHelper.ResolveTypeBySimpleName(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String)">
            <summary>
            Resolve a type by the simple name which is registered in the current application domain.
            </summary>
            <param name="assemblies">The assemblies to inspect.</param>
            <param name="typeSimpleName">The simple typename to resolve.</param>
            <returns>A resolved <see cref="T:System.Type"/> or null when not found.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.TypeHelper.GetAssemblyTypesWithDynamicLinqTypeAttribute(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets the assembly types annotated with <see cref="T:System.Linq.Dynamic.Core.DynamicLinqTypeAttribute"/> in an Exception friendly way.
            </summary>
            <param name="assemblies">The assemblies to process.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.TypeConverters.CustomDateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to a <see cref="T:System.DateTime"></see>.
            </summary>
            <param name="context">The date format context.</param>
            <param name="culture">The date culture.</param>
            <param name="value">The object to be converted.</param>
            <returns>A <see cref="T:System.Nullable`1"></see> that represents the specified object.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:System.Linq.Dynamic.Core.TypeConverters.ITypeConverterFactory.GetConverter(System.Type)">
            <summary>
            Returns a type converter for the specified type.
            </summary>
            <param name="type">The System.Type of the target component.</param>
            <returns>A System.ComponentModel.TypeConverter for the specified type.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.TypeConverters.TypeConverterFactory.GetConverter(System.Type)">
            <see cref="M:System.Linq.Dynamic.Core.TypeConverters.ITypeConverterFactory.GetConverter(System.Type)"/>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer">
            <summary>
            Renames a single (Typed)ParameterExpression in an Expression.
            </summary>
            <seealso cref="T:System.Linq.Expressions.ExpressionVisitor" />
        </member>
        <member name="M:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer"/> class.
            </summary>
            <param name="newName">The new name (the oldName is assumed to be "").</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer"/> class.
            </summary>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer.Rename(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression@)">
            <summary>
            Renames a single (Typed)ParameterExpression from specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="parameterExpression">The new generated (Typed)ParameterExpression.</param>
            <returns>Renamed Expression</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc cref="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Validation.CoreStrings.ArgumentPropertyNull(System.String,System.String)">
            <summary>
            The property '{property}' of the argument '{argument}' cannot be null.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Validation.CoreStrings.ArgumentIsEmpty(System.String)">
            <summary>
            The string argument '{argumentName}' cannot be empty.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Validation.CoreStrings.InvalidEntityType(System.Type,System.String)">
            <summary>
            The entity type '{type}' provided for the argument '{argumentName}' must be a reference type.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Validation.CoreStrings.CollectionArgumentIsEmpty(System.String)">
            <summary>
            The collection argument '{argumentName}' must contain at least one element.
            </summary>
        </member>
    </members>
</doc>
