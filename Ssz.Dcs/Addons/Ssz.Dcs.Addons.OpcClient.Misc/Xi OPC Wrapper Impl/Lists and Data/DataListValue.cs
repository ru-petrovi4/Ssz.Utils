/**********************************************************************
 * Copyright Â© 2009, 2010, 2011, 2012 OPC Foundation, Inc. 
 *
 * The source code and all binaries built with the OPC .NET 3.0 source
 * code are subject to the terms of the Express Interface Public
 * License (Xi-PL).  See http://www.opcfoundation.org/License/Xi-PL/
 *
 * The source code may be distributed from an OPC member company in
 * its original or modified form to its customers and to any others who
 * have software that needs to interoperate with the OPC member's OPC
* .NET 3.0 products. No other redistribution is permitted.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *********************************************************************/

using System;

using Xi.Contracts.Constants;
using Xi.OPC.COM.API;
using Xi.Server.Base;

namespace Xi.OPC.Wrapper.Impl
{
	/// <summary>
	/// The ReadListDataValue class is used to hold the actual OPC DA Data Value.
	/// </summary>
	public class DataListValue
		: DataListValueBase
	{
		public DataListValue(uint clientAlias, uint serverAlias)
			: base(clientAlias, serverAlias)
		{
		}

		// hServer is the OPC DA XiOPCWrapper handle for this data value.  It is generated by 
		// the DA XiOPCWrapper and is never passed back to the Xi Client
		private uint _svrHdl;
		public uint hServer { get { return _svrHdl; } set { _svrHdl = value; } }

		// hClient is the OPC DA Client handle for this data value. It is generated by the 
		// Xi server, and is also used as the ServerAlias that the Xi server returns to 
		// the Xi client.  
		// When the DA server publishes data back to the Xi server, it uses this handle, and 
		// the Xi server uses it to look up the corresponding Xi Client Alias.
		// If the Xi server used the Xi Client Alias as the client handle, then the Xi server 
		// might not be able to efficiently use it (since it was not generated by the Xi server), 
		// which is the general objective of using handles.
		public uint hClient { get { return _serverAlias; } set { _serverAlias = value; } }

		// The OPC DA XiOPCWrapper native data type for this value.
		private ushort _OpcCanonicalDataType;
		public ushort OpcDataType { get { return _OpcCanonicalDataType; } set { _OpcCanonicalDataType = value; } }

		// The OPC DA XiOPCWrapper access rights for this value.
		private uint _OpcAccessRights;
		public uint OpcAccessRights { get { return _OpcAccessRights; } set { _OpcAccessRights = value; } }

		// Update this value due to a call back from the OPC Server
		public cliHRESULT OnDataChangeDouble(uint statusCode, DateTime dtTimeStamp, double value)
		{
			cliHRESULT HR = new cliHRESULT(XiFaultCodes.S_OK);
			base.DoubleValueUpdate(statusCode, dtTimeStamp, value);
			EntryQueued = true;
			return HR;
		}
		public cliHRESULT OnDataChangeUint(uint statusCode, DateTime dtTimeStamp, uint value)
		{
			cliHRESULT HR = new cliHRESULT(XiFaultCodes.S_OK);
			base.UintValueUpdate(statusCode, dtTimeStamp, value);
			EntryQueued = true;
			return HR;
		}
		public cliHRESULT OnDataChangeObject(uint statusCode, DateTime dtTimeStamp, object value)
		{
			cliHRESULT HR = new cliHRESULT(XiFaultCodes.S_OK);
			base.ObjectValueUpdate(statusCode, dtTimeStamp, value);
			EntryQueued = true;
			return HR;
		}

	}
}
