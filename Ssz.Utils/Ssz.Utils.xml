<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ssz.Utils</name>
    </assembly>
    <members>
        <member name="T:Ssz.Utils.Any">
            <summary>
                If func param stringIsLocalized = false, InvariantCulture is used.
                If func param stringIsLocalized = true, CultureHelper.SystemCultureInfo is used, which is corresponds operating system culture (see CultureHelper class).
            </summary>
        </member>
        <member name="T:Ssz.Utils.Any.StorageType">
            <summary>        
            </summary>
        </member>
        <member name="F:Ssz.Utils.Any.StorageType.Object">
            <summary>
                The data value is / was transported as an object.
            </summary>
        </member>
        <member name="F:Ssz.Utils.Any.StorageType.Double">
            <summary>
                The data value is / was transported as a double (64 Bits).
            </summary>
        </member>
        <member name="F:Ssz.Utils.Any.StorageType.UInt32">
            <summary>
                The data value is / was transported as a uint (32 Bits).
            </summary>
        </member>
        <member name="M:Ssz.Utils.Any.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.#ctor(Ssz.Utils.Any)">
            <summary>
            
            </summary>
            <param name="that"></param>
        </member>
        <member name="P:Ssz.Utils.Any.StorageUInt32">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ssz.Utils.Any.StorageDouble">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ssz.Utils.Any.StorageObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ssz.Utils.Any.ValueTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ssz.Utils.Any.ValueType">
            <summary>        
            </summary>
        </member>
        <member name="P:Ssz.Utils.Any.ValueStorageType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.Any.ConvertToBestType(System.String,System.Boolean)">
            <summary>        
            </summary>
            <param name="sValue"></param>
            <param name="stringIsLocalized"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.op_Equality(Ssz.Utils.Any,Ssz.Utils.Any)">
            <summary>        
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.op_Inequality(Ssz.Utils.Any,Ssz.Utils.Any)">
            <summary>        
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Compare(Ssz.Utils.Any)">
            <summary>
                Uses ValueAsDouble(false), ValueAsInt32(false), ValueAsString(false) depending of ValueStorageType.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Equals(System.Object)">
            <summary>
                Strictly copare, no conversions
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.GetHashCode">
            <summary>        
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ToString">
            <summary>        
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.UInt32,System.TypeCode,System.Boolean)">
            <summary>
            
            </summary>
            <param name="storageUInt32"></param>
            <param name="valueTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Double,System.TypeCode,System.Boolean)">
            <summary>
            
            </summary>
            <param name="storageDouble"></param>
            <param name="valueTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Set(Ssz.Utils.Any)">
            <summary>
            </summary>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.SByte)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Byte)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Int16)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.UInt16)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.UInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.DateTime)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.DBNull)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.Set(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsObject">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsString(System.Boolean,System.String)">
            <summary>        
            </summary>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsInt32(System.Boolean)">
            <summary>
            
            </summary>
            <param name="stringIsLocalized"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsDouble(System.Boolean)">
            <summary>
            
            </summary>
            <param name="stringIsLocalized"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsBoolean(System.Boolean)">
            <summary>
            
            </summary>
            <param name="stringIsLocalized"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ValueAs``1(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ValueAs(System.Type,System.Boolean,System.String)">
            <summary>
                Returns requested type or null. 
            </summary>
            <param name="asType"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ObjectValueAs(System.Object,System.Type,System.Boolean)">
            <summary>
                storageObject.ValueTypeCode == TypeCode.Object
            </summary>
            <param name="storageObject"></param>
            <param name="asType"></param>
            <param name="stringIsLocalized"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ConvertToString(System.Object,System.Boolean)">
            <summary>        
            </summary>
            <param name="value"></param>
            <param name="stringIsLocalized"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ConvertToBoolean(System.String,System.Boolean)">
            <summary>
                Returns false, if String.IsNullOrWhiteSpace(value) || value.ToUpperInvariant() == "FALSE" || value == "0",
                otherwise true.
            </summary>
            <param name="value"></param>
            <param name="stringIsLocalized"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ConvertToDouble(System.String,System.Boolean)">
            <summary>
                Returns Double 0.0 if String.IsNullOrWhiteSpace(value) or value is not correct number.
            </summary>
            <param name="value"></param>
            <param name="stringIsLocalized"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,Ssz.Utils.Any,System.TypeCode,System.Boolean,System.String)">
            <summary>
                Returns true, if succeeded.
                if conversion fails, destination doesn't change.
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object, source.ValueTypeCode != TypeCode.Object
            </summary>
            <param name="destination"> </param>
            <param name="source"> </param>
            <param name="toTypeCode"> </param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns> true if succeded, false otherwise </returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.SByte,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Byte,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Int16,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.UInt16,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Int32,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.UInt32,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Char,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Int64,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.UInt64,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Boolean,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.DateTime,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Single,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Double,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.Decimal,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ConvertFromNullOrDBNull(Ssz.Utils.Any@,System.TypeCode)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="toTypeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.Convert(Ssz.Utils.Any@,System.String,System.TypeCode,System.Boolean,System.String)">
            <summary>
                toTypeCode != TypeCode.Empty, toTypeCode != TypeCode.DBNull, toTypeCode != TypeCode.Object
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="toTypeCode"></param>
            <param name="stringIsLocalized"></param>
            <param name="stringFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsIsEnum(System.Type,System.Boolean)">
            <summary>   
                asType is Enum
            </summary>
            <param name="asType"></param>
            <param name="stringIsLocalized"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Any.ValueAsObject(System.Type,System.Boolean)">
            <summary>
                asType has TypeCode.Object, _typeCode != TypeCode.Object
            </summary>
            <param name="asType"></param>
            <param name="stringIsLocalized"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.BytesArrayEqualityComparer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ssz.Utils.BytesArrayEqualityComparer.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.BytesArrayEqualityComparer.Equals(System.Byte[],System.Byte[])">
            <summary>        
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.BytesArrayEqualityComparer.GetHashCode(System.Byte[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.CaseInsensitiveDictionary`1">
            <summary>
                Case Insensitive Dictionary
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ssz.Utils.CaseInsensitiveDictionary`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.CaseInsensitiveDictionary`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Ssz.Utils.CaseInsensitiveDictionary`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Ssz.Utils.CaseInsensitiveDictionary`1.TryGetValue(System.String)">
            <summary>
                Returns null, if not found.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.AssemblyLicenseAttribute">
            <summary>
                Models a multiline assembly license text.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.AssemblyLicenseAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.AssemblyLicenseAttribute" /> class
                with one line of text.
            </summary>
            <param name="line1">First line of license text.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.AssemblyLicenseAttribute.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.AssemblyLicenseAttribute" /> class
                with two lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.AssemblyLicenseAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.AssemblyLicenseAttribute" /> class
                with three lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
            <param name="line3">Third line of license text.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.AssemblyLicenseAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.AssemblyLicenseAttribute" /> class
                with four lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
            <param name="line3">Third line of license text.</param>
            <param name="line4">Fourth line of license text.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.AssemblyLicenseAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.AssemblyLicenseAttribute" /> class
                with five lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
            <param name="line3">Third line of license text.</param>
            <param name="line4">Fourth line of license text.</param>
            <param name="line5">Fifth line of license text.</param>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.AssemblyUsageAttribute">
            <summary>
                Models a multiline assembly usage text.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.AssemblyUsageAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.AssemblyUsageAttribute" /> class
                with one line of text.
            </summary>
            <param name="line1">First line of usage text.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.AssemblyUsageAttribute.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.AssemblyUsageAttribute" /> class
                with two lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.AssemblyUsageAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.AssemblyUsageAttribute" /> class
                with three lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
            <param name="line3">Third line of usage text.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.AssemblyUsageAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.AssemblyUsageAttribute" /> class
                with four lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
            <param name="line3">Third line of usage text.</param>
            <param name="line4">Fourth line of usage text.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.AssemblyUsageAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.AssemblyUsageAttribute" /> class
                with five lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
            <param name="line3">Third line of usage text.</param>
            <param name="line4">Fourth line of usage text.</param>
            <param name="line5">Fifth line of usage text.</param>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute">
            <summary>
                Provides base properties for creating an attribute, used to define rules for command line parsing.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute" /> class.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute.#ctor(System.Char,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute" /> class.
                Validating <paramref name="shortName" /> and <paramref name="longName" />.
            </summary>
            <param name="shortName">Short name of the option.</param>
            <param name="longName">Long name of the option.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute.#ctor(System.Nullable{System.Char},System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute" /> class. Validating
                <paramref name="shortName" />
                and <paramref name="longName" />. This constructor accepts a <see cref="T:System.Nullable`1" /> as short name.
            </summary>
            <param name="shortName">Short name of the option.</param>
            <param name="longName">Long name of the option.</param>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute.ShortName">
            <summary>
                Gets a short name of this command line option. You can use only one character.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute.LongName">
            <summary>
                Gets long name of this command line option. This name is usually a single english word.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute.MutuallyExclusiveSet">
            <summary>
                Gets or sets the option's mutually exclusive set.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute.Required">
            <summary>
                Gets or sets a value indicating whether a command line option is required.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute.DefaultValue">
            <summary>
                Gets or sets mapped property default value.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute.MetaValue">
            <summary>
                Gets or sets mapped property meta value.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute.HelpText">
            <summary>
                Gets or sets a short description of this command line option. Usually a sentence summary.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.HelpOptionAttribute">
            <summary>
                Indicates the instance method that must be invoked when it becomes necessary show your help screen.
                The method signature is an instance method with no parameters and <see cref="T:System.String" />
                return value.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.HelpOptionAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.HelpOptionAttribute" /> class.
                Although it is possible, it is strongly discouraged redefine the long name for this option
                not to disorient your users. It is also recommended not to define a short one.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.HelpOptionAttribute.#ctor(System.Char)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.HelpOptionAttribute" /> class
                with the specified short name. Use parameter less constructor instead.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <remarks>
                It's highly not recommended change the way users invoke help. It may create confusion.
            </remarks>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.HelpOptionAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.HelpOptionAttribute" /> class
                with the specified long name. Use parameter less constructor instead.
            </summary>
            <param name="longName">The long name of the option or null if not used.</param>
            <remarks>
                It's highly not recommended change the way users invoke help. It may create confusion.
            </remarks>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.HelpOptionAttribute.#ctor(System.Char,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.HelpOptionAttribute" /> class.
                Allows you to define short and long option names.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <param name="longName">The long name of the option or null if not used.</param>
            <remarks>
                It's highly not recommended change the way users invoke help. It may create confusion.
            </remarks>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.HelpOptionAttribute.Required">
            <summary>
                Returns always false for this kind of option.
                This behaviour can't be changed by design; if you try set <see cref="P:Ssz.Utils.CommandLine.Attributes.HelpOptionAttribute.Required" />
                an <see cref="T:System.InvalidOperationException" /> will be thrown.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.HelpVerbOptionAttribute">
            <summary>
                Indicates the instance method that must be invoked when it becomes necessary show your help screen.
                The method signature is an instance method with that accepts and returns a <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.HelpVerbOptionAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.HelpVerbOptionAttribute" /> class.
                Although it is possible, it is strongly discouraged redefine the long name for this option
                not to disorient your users.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.HelpVerbOptionAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.HelpVerbOptionAttribute" /> class
                with the specified long name. Use parameter less constructor instead.
            </summary>
            <param name="longName">Help verb option alternative name.</param>
            <remarks>
                It's highly not recommended change the way users invoke help. It may create confusion.
            </remarks>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.HelpVerbOptionAttribute.ShortName">
            <summary>
                Help verb command do not support short name by design.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.HelpVerbOptionAttribute.Required">
            <summary>
                Help verb command like ordinary help option cannot be mandatory by design.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute">
            <summary>
                Provides base properties for creating an attribute, used to define multiple lines of text.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute" /> class. Used in derived type
                using one line of text.
            </summary>
            <param name="line1">The first line of text.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute" /> class. Used in  type
                using two lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute" /> class. Used in  type
                using three lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
            <param name="line3">The third line of text.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute" /> class. Used in type
                using four lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
            <param name="line3">The third line of text.</param>
            <param name="line4">The fourth line of text.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute" /> class. Used in type
                using five lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
            <param name="line3">The third line of text.</param>
            <param name="line4">The fourth line of text.</param>
            <param name="line5">The fifth line of text.</param>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute.Value">
            <summary>
                Gets the all non-blank lines as string.
            </summary>
            <value>A string of all non-blank lines.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute.Line1">
            <summary>
                Gets the first line of text.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute.Line2">
            <summary>
                Gets the second line of text.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute.Line3">
            <summary>
                Gets third line of text.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute.Line4">
            <summary>
                Gets the fourth line of text.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute.Line5">
            <summary>
                Gets the fifth line of text.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.MultilineTextAttribute.GetLastLineWithText(System.String[])">
            <summary>
                Returns the last line with text. Preserves blank lines if user intended by skipping a line.
            </summary>
            <returns>
                The last index of line of the non-blank line.
            </returns>
            <param name='value'>The string array to process.</param>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.OptionArrayAttribute">
            <summary>
                Models an option that can accept multiple values as separated arguments.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionArrayAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionArrayAttribute" /> class.
                The default long name will be inferred from target property.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionArrayAttribute.#ctor(System.Char)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionArrayAttribute" /> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionArrayAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionArrayAttribute" /> class.
            </summary>
            <param name="longName">The long name of the option.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionArrayAttribute.#ctor(System.Char,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionArrayAttribute" /> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.OptionAttribute">
            <summary>
                Models an option specification.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionAttribute" /> class.
                The default long name will be inferred from target property.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionAttribute.#ctor(System.Char)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionAttribute" /> class.
            </summary>
            <param name="shortName">The short name of the option..</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionAttribute" /> class.
            </summary>
            <param name="longName">The long name of the option.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionAttribute.#ctor(System.Char,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionAttribute" /> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.OptionListAttribute">
            <summary>
                Models an option that can accept multiple values.
                Must be applied to a field compatible with an <see cref="T:System.Collections.Generic.IList`1" /> interface
                of <see cref="T:System.String" /> instances.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionListAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionListAttribute" /> class.
                The default long name will be inferred from target property.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionListAttribute.#ctor(System.Char)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionListAttribute" /> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionListAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionListAttribute" /> class.
            </summary>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionListAttribute.#ctor(System.Char,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionListAttribute" /> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.OptionListAttribute.#ctor(System.Char,System.String,System.Char)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.OptionListAttribute" /> class.
            </summary>
            <param name="shortName">The short name of the option or null if not used.</param>
            <param name="longName">The long name of the option or null if not used.</param>
            <param name="separator">Values separator character.</param>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.OptionListAttribute.Separator">
            <summary>
                Gets or sets the values separator character.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.ParserStateAttribute">
            <summary>
                Indicates that the property can receive an instance of type <see cref="T:Ssz.Utils.CommandLine.IParserState" />.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.ValueListAttribute">
            <summary>
                Models a list of command line arguments that are not options.
                Must be applied to a field compatible with an <see cref="T:System.Collections.Generic.IList`1" /> interface
                of <see cref="T:System.String" /> instances.
            </summary>
            <remarks>To map individual values use instead <see cref="T:Ssz.Utils.CommandLine.Attributes.ValueOptionAttribute" />.</remarks>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.ValueListAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.ValueListAttribute" /> class.
            </summary>
            <param name="concreteType">A type that implements <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="concreteType" /> is null.</exception>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.ValueListAttribute.MaximumElements">
            <summary>
                Gets or sets the maximum element allow for the list managed by <see cref="T:Ssz.Utils.CommandLine.Attributes.ValueListAttribute" /> type.
                If lesser than 0, no upper bound is fixed.
                If equal to 0, no elements are allowed.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.ValueListAttribute.ConcreteType">
            <summary>
                Gets the concrete type specified during initialization.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.ValueOptionAttribute">
            <summary>
                Maps a single unnamed option to the target property. Values will be mapped in order of Index.
                This attribute takes precedence over <see cref="T:Ssz.Utils.CommandLine.Attributes.ValueListAttribute" /> with which
                can coexist.
            </summary>
            <remarks>It can handle only scalar values. Do not apply to arrays or lists.</remarks>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.ValueOptionAttribute.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.ValueOptionAttribute" /> class.
            </summary>
            <param name="index">The _index of the option.</param>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.ValueOptionAttribute.Index">
            <summary>
                Gets the position this option has on the command line.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Attributes.VerbOptionAttribute">
            <summary>
                Models a verb command specification.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Attributes.VerbOptionAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Attributes.VerbOptionAttribute" /> class.
            </summary>
            <param name="longName">The long name of the verb command.</param>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.VerbOptionAttribute.ShortName">
            <summary>
                Verb commands do not support short name by design.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Attributes.VerbOptionAttribute.Required">
            <summary>
                Verb commands cannot be mandatory since are mutually exclusive by design.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.BadOptionInfo">
            <summary>
                Models a bad parsed option.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.BadOptionInfo.ShortName">
            <summary>
                Gets the short name of the option.
            </summary>
            <value>Returns the short name of the option.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.BadOptionInfo.LongName">
            <summary>
                Gets the long name of the option.
            </summary>
            <value>Returns the long name of the option.</value>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Extensions.CharExtensions">
            <summary>
                Utility extension methods for System.Char.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Extensions.StringExtensions">
            <summary>
                Utility extension methods for System.String.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Infrastructure.ReflectionHelper.AssemblyFromWhichToPullInformation">
            <summary>
                Gets or sets the assembly from which to pull information. Setter provided for testing purpose.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.IParserState">
            <summary>
                Represents the parser state.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.IParserState.Errors">
            <summary>
                Gets errors occurred during parsing.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Parser">
            <summary>
                Provides methods to parse command line arguments.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Parser.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Parser" /> class.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Parser.#ctor(System.Action{Ssz.Utils.CommandLine.ParserSettings})">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Parser" /> class,
                configurable with <see cref="T:Ssz.Utils.CommandLine.ParserSettings" /> using a delegate.
            </summary>
            <param name="configuration">
                The <see cref="T:System.Action`1" /> delegate used to configure
                aspects and behaviors of the parser.
            </param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Parser.Dispose">
            <summary>
                Frees resources owned by the instance.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Parser.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:Ssz.Utils.CommandLine.Parser" /> class.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Parser.Default">
            <summary>
                Gets the singleton instance created with basic defaults.
            </summary>
        </member>
        <member name="F:Ssz.Utils.CommandLine.Parser.DefaultExitCodeFail">
            <summary>
                Default exit code (1) used by <see cref="M:Ssz.Utils.CommandLine.Parser.ParseArgumentsStrict(System.String[],System.Object,System.Action)" />
                and <see cref="M:Ssz.Utils.CommandLine.Parser.ParseArgumentsStrict(System.String[],System.Object,System.Action{System.String,System.Object},System.Action)" /> overloads.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Parser.ParseArguments(System.String[],System.Object)">
            <summary>
                Parses a <see cref="T:System.String" /> array of command line arguments, setting values in
                <paramref name="options" />
                parameter instance's public fields decorated with appropriate attributes.
            </summary>
            <param name="args">A <see cref="T:System.String" /> array of command line arguments.</param>
            <param name="options">
                An instance used to receive values.
                Parsing rules are defined using <see cref="T:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute" /> derived types.
            </param>
            <returns>True if parsing process succeed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options" /> is null.</exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Parser.ParseArguments(System.String[],System.Object,System.Action{System.String,System.Object})">
            <summary>
                Parses a <see cref="T:System.String" /> array of command line arguments with verb commands, setting values in
                <paramref name="options" />
                parameter instance's public fields decorated with appropriate attributes.
                This overload supports verb commands.
            </summary>
            <param name="args">A <see cref="T:System.String" /> array of command line arguments.</param>
            <param name="options">
                An instance used to receive values.
                Parsing rules are defined using <see cref="T:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute" /> derived types.
            </param>
            <param name="onVerbCommand">Delegate executed to capture verb command name and instance.</param>
            <returns>True if parsing process succeed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="onVerbCommand" /> is null.</exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Parser.ParseArgumentsStrict(System.String[],System.Object,System.Action)">
            <summary>
                Parses a <see cref="T:System.String" /> array of command line arguments, setting values in
                <paramref name="options" />
                parameter instance's public fields decorated with appropriate attributes. If parsing fails, the method invokes
                the <paramref name="onFail" /> delegate, if null exits with <see cref="F:Ssz.Utils.CommandLine.Parser.DefaultExitCodeFail" />.
            </summary>
            <param name="args">A <see cref="T:System.String" /> array of command line arguments.</param>
            <param name="options">
                An object's instance used to receive values.
                Parsing rules are defined using <see cref="T:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute" /> derived types.
            </param>
            <param name="onFail">The <see cref="T:System.Action" /> delegate executed when parsing fails.</param>
            <returns>True if parsing process succeed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options" /> is null.</exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Parser.ParseArgumentsStrict(System.String[],System.Object,System.Action{System.String,System.Object},System.Action)">
            <summary>
                Parses a <see cref="T:System.String" /> array of command line arguments with verb commands, setting values in
                <paramref name="options" />
                parameter instance's public fields decorated with appropriate attributes. If parsing fails, the method invokes
                the <paramref name="onFail" /> delegate, if null exits with <see cref="F:Ssz.Utils.CommandLine.Parser.DefaultExitCodeFail" />.
                This overload supports verb commands.
            </summary>
            <param name="args">A <see cref="T:System.String" /> array of command line arguments.</param>
            <param name="options">
                An instance used to receive values.
                Parsing rules are defined using <see cref="T:Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute" /> derived types.
            </param>
            <param name="onVerbCommand">Delegate executed to capture verb command name and instance.</param>
            <param name="onFail">The <see cref="T:System.Action" /> delegate executed when parsing fails.</param>
            <returns>True if parsing process succeed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="onVerbCommand" /> is null.</exception>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Parser.Settings">
            <summary>
                Gets the instance that implements <see cref="T:Ssz.Utils.CommandLine.ParserSettings" /> in use.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.ParserException">
            <summary>
                This exception is thrown when a generic parsing error occurs.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.ParserException" /> class. The exception is thrown
                when something unexpected occurs during the parsing process.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.ParserException" /> class. The exception is thrown
                when something unexpected occurs during the parsing process.
            </summary>
            <param name="message">Error message string.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.ParserException" /> class. The exception is thrown
                when something unexpected occurs during the parsing process.
            </summary>
            <param name="message">Error message string.</param>
            <param name="innerException">Inner exception reference.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.ParserException" /> class. The exception is thrown
                when something unexpected occurs during the parsing process.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Ssz.Utils.CommandLine.ParserSettings">
            <summary>
                Provides settings for <see cref="T:Ssz.Utils.CommandLine.Parser" />. Once consumed cannot be reused.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserSettings.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.ParserSettings" /> class.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserSettings.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.ParserSettings" /> class,
                setting the case comparison behavior.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserSettings.#ctor(System.IO.TextWriter)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.ParserSettings" /> class,
                setting the <see cref="T:System.IO.TextWriter" /> used for help method output.
            </summary>
            <param name="helpWriter">
                Any instance derived from <see cref="T:System.IO.TextWriter" />,
                default <see cref="P:System.Console.Error" />. Setting this argument to null, will disable help screen.
            </param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserSettings.#ctor(System.Boolean,System.IO.TextWriter)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.ParserSettings" /> class,
                setting case comparison and help output options.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
            <param name="helpWriter">
                Any instance derived from <see cref="T:System.IO.TextWriter" />,
                default <see cref="P:System.Console.Error" />. Setting this argument to null, will disable help screen.
            </param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserSettings.#ctor(System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.ParserSettings" /> class,
                setting case comparison and mutually exclusive behaviors.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
            <param name="mutuallyExclusive">If set to true, enable mutually exclusive behavior.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserSettings.#ctor(System.Boolean,System.Boolean,System.IO.TextWriter)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.ParserSettings" /> class,
                setting case comparison, mutually exclusive behavior and help output option.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
            <param name="mutuallyExclusive">If set to true, enable mutually exclusive behavior.</param>
            <param name="helpWriter">
                Any instance derived from <see cref="T:System.IO.TextWriter" />,
                default <see cref="P:System.Console.Error" />. Setting this argument to null, will disable help screen.
            </param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.IO.TextWriter)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.ParserSettings" /> class,
                setting case comparison, mutually exclusive behavior and help output option.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
            <param name="mutuallyExclusive">If set to true, enable mutually exclusive behavior.</param>
            <param name="ignoreUnknownArguments">
                If set to true, allow the parser to skip unknown argument, otherwise return a
                parse failure
            </param>
            <param name="helpWriter">
                Any instance derived from <see cref="T:System.IO.TextWriter" />,
                default <see cref="P:System.Console.Error" />. Setting this argument to null, will disable help screen.
            </param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserSettings.Dispose">
            <summary>
                Frees resources owned by the instance.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.ParserSettings.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:Ssz.Utils.CommandLine.ParserSettings" /> class.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.ParserSettings.CaseSensitive">
            <summary>
                Gets or sets a value indicating whether perform case sensitive comparisons.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.ParserSettings.MutuallyExclusive">
            <summary>
                Gets or sets a value indicating whether set a mutually exclusive behavior.
                Default is set to false.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.ParserSettings.HelpWriter">
            <summary>
                Gets or sets the <see cref="T:System.IO.TextWriter" /> used for help method output.
                Setting this property to null, will disable help screen.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.ParserSettings.IgnoreUnknownArguments">
            <summary>
                Gets or sets a value indicating whether the parser shall move on to the next argument and ignore the given argument
                if it
                encounter an unknown arguments
            </summary>
            <value>
                <c>true</c> to allow parsing the arguments with different class options that do not have all the arguments.
            </value>
            <remarks>
                This allows fragmented version class parsing, useful for project with add-on where add-ons also requires command
                line arguments but
                when these are unknown by the main program at build time.
            </remarks>
        </member>
        <member name="P:Ssz.Utils.CommandLine.ParserSettings.ParsingCulture">
            <summary>
                Gets or sets the culture used when parsing arguments to typed properties.
            </summary>
            <remarks>
                Default is CurrentCulture of <see cref="P:System.Threading.Thread.CurrentThread" />.
            </remarks>
        </member>
        <member name="T:Ssz.Utils.CommandLine.ParserState">
            <summary>
                Models a type that records the parser state after parsing.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.ParserState.Errors">
            <summary>
                Gets a list of parsing errors.
            </summary>
            <value>
                Parsing errors.
            </value>
        </member>
        <member name="T:Ssz.Utils.CommandLine.ParsingError">
            <summary>
                Models a parsing error.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.ParsingError.BadOption">
            <summary>
                Gets or a the bad parsed option.
            </summary>
            <value>
                The bad option.
            </value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.ParsingError.ViolatesRequired">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:Ssz.Utils.CommandLine.ParsingError" /> violates required.
            </summary>
            <value>
                <c>true</c> if violates required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.ParsingError.ViolatesFormat">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:Ssz.Utils.CommandLine.ParsingError" /> violates format.
            </summary>
            <value>
                <c>true</c> if violates format; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.ParsingError.ViolatesMutualExclusiveness">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:Ssz.Utils.CommandLine.ParsingError" /> violates mutual exclusiveness.
            </summary>
            <value>
                <c>true</c> if violates mutual exclusiveness; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Parsing.ArgumentParser.InternalWrapperOfGetNextInputValues(Ssz.Utils.CommandLine.Parsing.IArgumentEnumerator)">
            <summary>
                Helper method for testing purpose.
            </summary>
            <param name="ae">An argument enumerator instance.</param>
            <returns>The next input value.</returns>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Parsing.OptionMap.#ctor(System.Int32,Ssz.Utils.CommandLine.ParserSettings)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Parsing.OptionMap" /> class.
                It is internal rather than private for unit testing purpose.
            </summary>
            <param name="capacity">Initial internal capacity.</param>
            <param name="settings">Parser settings instance.</param>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Parsing.PropertyWriter">
            <summary>
                Encapsulates property writing primitives.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Parsing.TargetCapabilitiesExtensions">
            <summary>
                Utility extension methods for query target capabilities.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Parsing.ValueMapper">
            <summary>
                Maps unnamed options to property using <see cref="T:Ssz.Utils.CommandLine.Attributes.ValueOptionAttribute" /> and <see cref="T:Ssz.Utils.CommandLine.Attributes.ValueListAttribute" />.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder">
            <summary>
                Models an abstract sentence builder.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder.CreateBuiltIn">
            <summary>
                Creates the built in sentence builder.
            </summary>
            <returns>The built in sentence builder.</returns>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder.OptionWord">
            <summary>
                Gets a string containing word 'option'.
            </summary>
            <value>The word 'option'.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder.AndWord">
            <summary>
                Gets a string containing the word 'and'.
            </summary>
            <value>The word 'and'.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder.RequiredOptionMissingText">
            <summary>
                Gets a string containing the sentence 'required option missing'.
            </summary>
            <value>The sentence 'required option missing'.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder.ViolatesFormatText">
            <summary>
                Gets a string containing the sentence 'violates format'.
            </summary>
            <value>The sentence 'violates format'.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder.ViolatesMutualExclusivenessText">
            <summary>
                Gets a string containing the sentence 'violates mutual exclusiveness'.
            </summary>
            <value>The sentence 'violates mutual exclusiveness'.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder.ErrorsHeadingText">
            <summary>
                Gets a string containing the error heading text.
            </summary>
            <value>The error heading text.</value>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Text.CopyrightInfo">
            <summary>
                Models the copyright part of an help text.
                You can assign it where you assign any <see cref="T:System.String" /> instance.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.CopyrightInfo.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.CopyrightInfo" /> class
                specifying author and year.
            </summary>
            <param name="author">The company or person holding the copyright.</param>
            <param name="year">The year of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author" /> is null or empty string.</exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.CopyrightInfo.#ctor(System.String,System.Int32[])">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.CopyrightInfo" /> class
                specifying author and copyrightYears.
            </summary>
            <param name="author">The company or person holding the copyright.</param>
            <param name="years">The copyrightYears of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author" /> is null or empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when parameter <paramref name="years" /> is not supplied.</exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.CopyrightInfo.#ctor(System.Boolean,System.String,System.Int32[])">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.CopyrightInfo" /> class
                specifying symbol case, author and copyrightYears.
            </summary>
            <param name="isSymbolUpper">The case of the copyright symbol.</param>
            <param name="author">The company or person holding the copyright.</param>
            <param name="copyrightYears">The copyrightYears of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author" /> is null or empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when parameter <paramref name="copyrightYears" /> is not
                supplied.
            </exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.CopyrightInfo.#ctor(System.Reflection.AssemblyCopyrightAttribute)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.CopyrightInfo" /> class
                with an assembly attribute, this overrides all formatting.
            </summary>
            <param name="attribute">The attribute which text to use.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.CopyrightInfo.op_Implicit(Ssz.Utils.CommandLine.Text.CopyrightInfo)~System.String">
            <summary>
                Converts the copyright instance to a <see cref="T:System.String" />.
            </summary>
            <param name="info">This <see cref="T:Ssz.Utils.CommandLine.Text.CopyrightInfo" /> instance.</param>
            <returns>The <see cref="T:System.String" /> that contains the copyright.</returns>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.CopyrightInfo.Default">
            <summary>
                Gets the default copyright information.
                Retrieved from <see cref="T:System.Reflection.AssemblyCopyrightAttribute" />, if it exists,
                otherwise it uses <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> as copyright holder with the current year.
                If neither exists it throws an <see cref="T:System.InvalidOperationException" />.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.CopyrightInfo.ToString">
            <summary>
                Returns the copyright as a <see cref="T:System.String" />.
            </summary>
            <returns>The <see cref="T:System.String" /> that contains the copyright.</returns>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.CopyrightInfo.FormatYears(System.Int32[])">
            <summary>
                When overridden in a derived class, allows to specify a new algorithm to render copyright copyrightYears
                as a <see cref="T:System.String" /> instance.
            </summary>
            <param name="years">A <see cref="T:System.Int32" /> array of copyrightYears.</param>
            <returns>A <see cref="T:System.String" /> instance with copyright copyrightYears.</returns>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.CopyrightInfo.CopyrightWord">
            <summary>
                Gets a different copyright word when overridden in a derived class.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Text.EnglishSentenceBuilder">
            <summary>
                Models an english sentence builder, currently the default one.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.EnglishSentenceBuilder.OptionWord">
            <summary>
                Gets a string containing word 'option' in english.
            </summary>
            <value>The word 'option' in english.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.EnglishSentenceBuilder.AndWord">
            <summary>
                Gets a string containing the word 'and' in english.
            </summary>
            <value>The word 'and' in english.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.EnglishSentenceBuilder.RequiredOptionMissingText">
            <summary>
                Gets a string containing the sentence 'required option missing' in english.
            </summary>
            <value>The sentence 'required option missing' in english.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.EnglishSentenceBuilder.ViolatesFormatText">
            <summary>
                Gets a string containing the sentence 'violates format' in english.
            </summary>
            <value>The sentence 'violates format' in english.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.EnglishSentenceBuilder.ViolatesMutualExclusivenessText">
            <summary>
                Gets a string containing the sentence 'violates mutual exclusiveness' in english.
            </summary>
            <value>The sentence 'violates mutual exclusiveness' in english.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.EnglishSentenceBuilder.ErrorsHeadingText">
            <summary>
                Gets a string containing the error heading text in english.
            </summary>
            <value>The error heading text in english.</value>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Text.FormatOptionHelpTextEventArgs">
            <summary>
                Provides data for the FormatOptionHelpText event.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.FormatOptionHelpTextEventArgs.#ctor(Ssz.Utils.CommandLine.Attributes.BaseOptionAttribute)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.FormatOptionHelpTextEventArgs" /> class.
            </summary>
            <param name="option">Option to format.</param>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.FormatOptionHelpTextEventArgs.Option">
            <summary>
                Gets the option to format.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Text.HeadingInfo">
            <summary>
                Models the heading part of an help text.
                You can assign it where you assign any <see cref="T:System.String" /> instance.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HeadingInfo.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HeadingInfo" /> class
                specifying program name.
            </summary>
            <param name="programName">The name of the program.</param>
            <exception cref="T:System.ArgumentException">
                Thrown when parameter <paramref name="programName" /> is null or empty
                string.
            </exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HeadingInfo.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HeadingInfo" /> class
                specifying program name and version.
            </summary>
            <param name="programName">The name of the program.</param>
            <param name="version">The version of the program.</param>
            <exception cref="T:System.ArgumentException">
                Thrown when parameter <paramref name="programName" /> is null or empty
                string.
            </exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HeadingInfo.op_Implicit(Ssz.Utils.CommandLine.Text.HeadingInfo)~System.String">
            <summary>
                Converts the heading to a <see cref="T:System.String" />.
            </summary>
            <param name="info">This <see cref="T:Ssz.Utils.CommandLine.Text.HeadingInfo" /> instance.</param>
            <returns>The <see cref="T:System.String" /> that contains the heading.</returns>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.HeadingInfo.Default">
            <summary>
                Gets the default heading instance.
                The title is retrieved from <see cref="T:System.Reflection.AssemblyTitleAttribute" />,
                or the assembly short name if its not defined.
                The version is retrieved from <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" />,
                or the assembly version if its not defined.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HeadingInfo.ToString">
            <summary>
                Returns the heading as a <see cref="T:System.String" />.
            </summary>
            <returns>The <see cref="T:System.String" /> that contains the heading.</returns>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HeadingInfo.WriteMessage(System.String,System.IO.TextWriter)">
            <summary>
                Writes out a string and a new line using the program name specified in the constructor
                and <paramref name="message" /> parameter.
            </summary>
            <param name="message">The <see cref="T:System.String" /> message to write.</param>
            <param name="writer">The target <see cref="T:System.IO.TextWriter" /> derived type.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message" /> is null or empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="writer" /> is null.</exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HeadingInfo.WriteMessage(System.String)">
            <summary>
                Writes out a string and a new line using the program name specified in the constructor
                and <paramref name="message" /> parameter to standard output stream.
            </summary>
            <param name="message">The <see cref="T:System.String" /> message to write.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message" /> is null or empty string.</exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HeadingInfo.WriteError(System.String)">
            <summary>
                Writes out a string and a new line using the program name specified in the constructor
                and <paramref name="message" /> parameter to standard error stream.
            </summary>
            <param name="message">The <see cref="T:System.String" /> message to write.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message" /> is null or empty string.</exception>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Text.HelpText">
            <summary>
                Provides means to format an help screen.
                You can assign it in place of a <see cref="T:System.String" /> instance.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.#ctor(Ssz.Utils.CommandLine.Text.BaseSentenceBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class
                specifying the sentence builder.
            </summary>
            <param name="sentenceBuilder">
                A <see cref="T:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder" /> instance.
            </param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class
                specifying heading string.
            </summary>
            <param name="heading">An heading string or an instance of <see cref="T:Ssz.Utils.CommandLine.Text.HeadingInfo" />.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="heading" /> is null or empty string.</exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.#ctor(Ssz.Utils.CommandLine.Text.BaseSentenceBuilder,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class
                specifying the sentence builder and heading string.
            </summary>
            <param name="sentenceBuilder">A <see cref="T:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder" /> instance.</param>
            <param name="heading">A string with heading or an instance of <see cref="T:Ssz.Utils.CommandLine.Text.HeadingInfo" />.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class
                specifying heading and copyright strings.
            </summary>
            <param name="heading">A string with heading or an instance of <see cref="T:Ssz.Utils.CommandLine.Text.HeadingInfo" />.</param>
            <param name="copyright">A string with copyright or an instance of <see cref="T:Ssz.Utils.CommandLine.Text.CopyrightInfo" />.</param>
            <exception cref="T:System.ArgumentException">
                Thrown when one or more parameters <paramref name="heading" /> are null or
                empty strings.
            </exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.#ctor(Ssz.Utils.CommandLine.Text.BaseSentenceBuilder,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class
                specifying heading and copyright strings.
            </summary>
            <param name="sentenceBuilder">A <see cref="T:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder" /> instance.</param>
            <param name="heading">A string with heading or an instance of <see cref="T:Ssz.Utils.CommandLine.Text.HeadingInfo" />.</param>
            <param name="copyright">A string with copyright or an instance of <see cref="T:Ssz.Utils.CommandLine.Text.CopyrightInfo" />.</param>
            <exception cref="T:System.ArgumentException">
                Thrown when one or more parameters <paramref name="heading" /> are null or
                empty strings.
            </exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.#ctor(System.String,System.String,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class
                specifying heading and copyright strings.
            </summary>
            <param name="heading">A string with heading or an instance of <see cref="T:Ssz.Utils.CommandLine.Text.HeadingInfo" />.</param>
            <param name="copyright">A string with copyright or an instance of <see cref="T:Ssz.Utils.CommandLine.Text.CopyrightInfo" />.</param>
            <param name="options">The instance that collected command line arguments parsed with <see cref="T:Ssz.Utils.CommandLine.Parser" /> class.</param>
            <exception cref="T:System.ArgumentException">
                Thrown when one or more parameters <paramref name="heading" /> are null or
                empty strings.
            </exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.#ctor(Ssz.Utils.CommandLine.Text.BaseSentenceBuilder,System.String,System.String,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class
                specifying heading and copyright strings.
            </summary>
            <param name="sentenceBuilder">A <see cref="T:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder" /> instance.</param>
            <param name="heading">A string with heading or an instance of <see cref="T:Ssz.Utils.CommandLine.Text.HeadingInfo" />.</param>
            <param name="copyright">A string with copyright or an instance of <see cref="T:Ssz.Utils.CommandLine.Text.CopyrightInfo" />.</param>
            <param name="options">The instance that collected command line arguments parsed with <see cref="T:Ssz.Utils.CommandLine.Parser" /> class.</param>
            <exception cref="T:System.ArgumentException">
                Thrown when one or more parameters <paramref name="heading" /> are null or
                empty strings.
            </exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.AutoBuild(System.Object)">
            <summary>
                Creates a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class using common defaults.
            </summary>
            <returns>
                An instance of <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class.
            </returns>
            <param name='options'>The instance that collected command line arguments parsed with <see cref="T:Ssz.Utils.CommandLine.Parser" /> class.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.AutoBuild(System.Object,System.Action{Ssz.Utils.CommandLine.Text.HelpText},System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class using common defaults.
            </summary>
            <returns>
                An instance of <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class.
            </returns>
            <param name='options'>The instance that collected command line arguments parsed with <see cref="T:Ssz.Utils.CommandLine.Parser" /> class.</param>
            <param name='onError'>A delegate used to customize the text block for reporting parsing errors.</param>
            <param name="verbsIndex">
                If true the output style is consistent with verb commands (no dashes), otherwise it outputs
                options.
            </param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.AutoBuild(System.Object,System.String)">
            <summary>
                Creates a new instance of the <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class using common defaults,
                for verb commands scenario.
            </summary>
            <returns>
                An instance of <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> class.
            </returns>
            <param name='options'>The instance that collected command line arguments parsed with <see cref="T:Ssz.Utils.CommandLine.Parser" /> class.</param>
            <param name="verb">The verb command invoked.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.DefaultParsingErrorsHandler(System.Object,Ssz.Utils.CommandLine.Text.HelpText)">
            <summary>
                Supplies a default parsing error handler implementation.
            </summary>
            <param name="options">
                The instance that collects parsed arguments parsed and associates <see cref="T:Ssz.Utils.CommandLine.Attributes.ParserStateAttribute" />
                to a property of type <see cref="T:Ssz.Utils.CommandLine.IParserState" />.
            </param>
            <param name="current">The <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> instance.</param>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.op_Implicit(Ssz.Utils.CommandLine.Text.HelpText)~System.String">
            <summary>
                Converts the help instance to a <see cref="T:System.String" />.
            </summary>
            <param name="info">This <see cref="T:Ssz.Utils.CommandLine.Text.HelpText" /> instance.</param>
            <returns>The <see cref="T:System.String" /> that contains the help screen.</returns>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.AddPreOptionsLine(System.String)">
            <summary>
                Adds a text line after copyright and before options usage strings.
            </summary>
            <param name="value">A <see cref="T:System.String" /> instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="value" /> is null or empty string.</exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.AddPostOptionsLine(System.String)">
            <summary>
                Adds a text line at the bottom, after options usage string.
            </summary>
            <param name="value">A <see cref="T:System.String" /> instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="value" /> is null or empty string.</exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.AddOptions(System.Object)">
            <summary>
                Adds a text block with options usage string.
            </summary>
            <param name="options">The instance that collected command line arguments parsed with <see cref="T:Ssz.Utils.CommandLine.Parser" /> class.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="options" /> is null.</exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.AddOptions(System.Object,System.String)">
            <summary>
                Adds a text block with options usage string.
            </summary>
            <param name="options">The instance that collected command line arguments parsed with the <see cref="T:Ssz.Utils.CommandLine.Parser" /> class.</param>
            <param name="requiredWord">The word to use when the option is required.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="options" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown when parameter <paramref name="requiredWord" /> is null or empty
                string.
            </exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.AddOptions(System.Object,System.String,System.Int32)">
            <summary>
                Adds a text block with options usage string.
            </summary>
            <param name="options">The instance that collected command line arguments parsed with the <see cref="T:Ssz.Utils.CommandLine.Parser" /> class.</param>
            <param name="requiredWord">The word to use when the option is required.</param>
            <param name="maximumLength">The maximum length of the help documentation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="options" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown when parameter <paramref name="requiredWord" /> is null or empty
                string.
            </exception>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.RenderParsingErrorsText(System.Object,System.Int32)">
            <summary>
                Builds a string that contains a parsing error message.
            </summary>
            <param name="options">
                An options target instance that collects parsed arguments parsed with the <see cref="T:Ssz.Utils.CommandLine.Attributes.ParserStateAttribute" />
                associated to a property of type <see cref="T:Ssz.Utils.CommandLine.IParserState" />.
            </param>
            <param name="indent">Number of spaces used to indent text.</param>
            <returns>The <see cref="T:System.String" /> that contains the parsing error message.</returns>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.ToString">
            <summary>
                Returns the help screen as a <see cref="T:System.String" />.
            </summary>
            <returns>The <see cref="T:System.String" /> that contains the help screen.</returns>
        </member>
        <member name="E:Ssz.Utils.CommandLine.Text.HelpText.FormatOptionHelpText">
            <summary>
                Occurs when an option help text is formatted.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.HelpText.Heading">
            <summary>
                Gets or sets the heading string.
                You can directly assign a <see cref="T:Ssz.Utils.CommandLine.Text.HeadingInfo" /> instance.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.HelpText.Copyright">
            <summary>
                Gets or sets the copyright string.
                You can directly assign a <see cref="T:Ssz.Utils.CommandLine.Text.CopyrightInfo" /> instance.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.HelpText.MaximumDisplayWidth">
            <summary>
                Gets or sets the maximum width of the display.  This determines word wrap when displaying the text.
            </summary>
            <value>The maximum width of the display.</value>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.HelpText.AddDashesToOption">
            <summary>
                Gets or sets a value indicating whether the format of options should contain dashes.
                It modifies behavior of <see cref="M:Ssz.Utils.CommandLine.Text.HelpText.AddOptions(System.Object)" /> method.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.HelpText.AdditionalNewLineAfterOption">
            <summary>
                Gets or sets a value indicating whether to add an additional line after the description of the option.
            </summary>
        </member>
        <member name="P:Ssz.Utils.CommandLine.Text.HelpText.SentenceBuilder">
            <summary>
                Gets the <see cref="T:Ssz.Utils.CommandLine.Text.BaseSentenceBuilder" /> instance specified in constructor.
            </summary>
        </member>
        <member name="M:Ssz.Utils.CommandLine.Text.HelpText.OnFormatOptionHelpText(Ssz.Utils.CommandLine.Text.FormatOptionHelpTextEventArgs)">
            <summary>
                The OnFormatOptionHelpText method also allows derived classes to handle the event without attaching a delegate.
                This is the preferred technique for handling the event in a derived class.
            </summary>
            <param name="e">Data for the <see cref="E:Ssz.Utils.CommandLine.Text.HelpText.FormatOptionHelpText" /> event.</param>
        </member>
        <member name="T:Ssz.Utils.CommandLine.Text.ParsingErrorsHandler">
            <summary>
                Handle parsing errors delegate.
            </summary>
        </member>
        <member name="T:Ssz.Utils.ConfigurationHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ssz.Utils.ConfigurationHelper.SystemCultureInfo">
            <summary>
                By default contains CultureInfo.InvariantCulture.
                If CultureHelper.InitializeCulture() is called, contains CultureInfo that corresponds operating system culture.
                SystemCultureInfo field is used in Utils.Any class when func param stringIsLocalized = True.
            </summary>
        </member>
        <member name="P:Ssz.Utils.ConfigurationHelper.AppSettings">
            <summary>
                appSettings.json -> AppSettings section.
            </summary>
        </member>
        <member name="M:Ssz.Utils.ConfigurationHelper.InitializeCulture">
            <summary>
                Initializes SystemCultureInfo field to operating system culture.        
                Sets CurrentUICulture from appSettings.json -> AppSettings -> UICulture for all threads, if setting exists.
                Otherwise, CurrentUICulture remains unchanged.
            </summary>
        </member>
        <member name="T:Ssz.Utils.CsvHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.FormatForCsv(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="separator"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.FormatForCsv(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>        
                values converted using Any.ConvertTo String (obj, false).
            </summary>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.FormatValueForCsv(System.String,System.String)">
            <summary>        
            </summary>
            <param name="sourceString"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.ParseCsvLine(System.String,System.String)">
            <summary>        
                If empty field, value in array is null.
                # parsed as ordinary symbol. All field values are trimmed.
                Only first char is used as separator in separator param.
                Result array length not 0
            </summary>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.ParseCsv(System.String,System.String)">
            <summary>   
                Result arrays lengths not 0
            </summary>
            <param name="separator"></param>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.LoadCsvFile(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,System.String})">
            <summary>
                First column in file is Key and must be unique.
                Can contain include directives, defines and comments.
                If file does not exist returns empty result.
                All fields values are trimmed.         
            </summary>
            <param name="fileFullName"></param>
            <param name="includeFiles"></param>
            <param name="defines"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.SaveCsvFile(System.String,Ssz.Utils.CaseInsensitiveDictionary{System.Collections.Generic.List{System.String}})">
            <summary>
                Saves data to file.
            </summary>
            <param name="fileFullName"></param>
            <param name="fileData"></param>
        </member>
        <member name="M:Ssz.Utils.CsvHelper.ReplaceDefines(System.String,System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,System.String})">
            <summary>
                sourceString != null, defines != null, result != null
            </summary>
            <param name="sourceString"></param>
            <param name="defines"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.DynamicExpression.Initialize(System.Type[])">
            <summary>
                Preconditions: predefinedTypes != Null.
            </summary>
            <param name="predefinedTypes"></param>
        </member>
        <member name="M:Ssz.Utils.ExpressionParser.ParseLambda">
            <summary>
                => operator
                Added Support for projection operator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ExpressionParser.ParseMemberAccess(System.Type,System.Linq.Expressions.Expression)">
            <summary>
                Parsing begins here
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.IDispatcher">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.IDispatcher.BeginInvoke(System.Action{System.Threading.CancellationToken})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Ssz.Utils.Logger">
            <summary>
                This class provides tracing support in a concrete
                singleton implementation so any other type can get to the stored TraceSource.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Logger.TraceSource">
            <summary>
                When null, writes no log.
            </summary>
        </member>
        <member name="P:Ssz.Utils.Logger.LogFileTextWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.Logger.SetLogLevels(System.Diagnostics.SourceLevels)">
            <summary>
            
            </summary>
            <param name="sourceLevels"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.ShouldTrace(System.Diagnostics.TraceEventType)">
            <summary>
            
            </summary>
            <param name="eventType"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Logger.Critical(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Critical(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Critical(System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Error(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Error(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Warning(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Warning(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Info(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Info(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Verbose(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Verbose(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Start(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Start(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Stop(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Stop(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.EnterMethod(System.Object[])">
            <summary>
                This is used to log method entries.
            </summary>
            <param name="args"> Arguments </param>
            <returns> TraceCloser object to log exit of method </returns>
        </member>
        <member name="M:Ssz.Utils.Logger.Initialize(System.Diagnostics.TraceSource)">
            <summary>
            
            </summary>
            <param name="traceSource"></param>
        </member>
        <member name="M:Ssz.Utils.Logger.Initialize(System.Boolean)">
            <summary>
                Initializes logger. If it is not called, log doesn't write.
                Reads Logger settings from App.config.
                Initializes Trace class to use same log file.         
            </summary>  
            <param name="duplicateInConsole"></param>        
        </member>
        <member name="T:Ssz.Utils.Logging.LogFileTextWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.#ctor(Ssz.Utils.Logging.SszLoggerOptions)">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Ssz.Utils.Logging.LogFileTextWriter.LogFileName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Char[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.Write(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Char[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Ssz.Utils.Logging.LogFileTextWriter.WriteLine(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Ssz.Utils.Logging.LogFileTextWriter.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.Logging.SszLogger.Finalize">
            <summary>
                The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.ChangeKey`2">
            <summary>
                Used to uniquely identify a change that has a 2-part "key".
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.ChangeKey`3">
            <summary>
                Used to uniquely identify a change that has a 3-part "key".
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.ChangeSet">
            <summary>
                A set of changes that represent a single "unit of change".
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.ChangeSet.#ctor(Ssz.Utils.MonitoredUndo.UndoRoot,System.String,Ssz.Utils.MonitoredUndo.Changes.Change)">
            <summary>
                Create a ChangeSet for the specified UndoRoot.
            </summary>
            <param name="undoRoot">The UndoRoot that this ChangeSet belongs to.</param>
            <param name="description">A description of the change.</param>
            <param name="change">The Change instance that can perform the undo / redo as needed.</param>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.ChangeSet.UndoRoot">
            <summary>
                The associated UndoRoot.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.ChangeSet.Description">
            <summary>
                A description of this set of changes.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.ChangeSet.Undone">
            <summary>
                Has this ChangeSet been undone.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.ChangeSet.Changes">
            <summary>
                The changes that are part of this ChangeSet
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.ChangeSet.AddChange(Ssz.Utils.MonitoredUndo.Changes.Change)">
            <summary>
                Add a change to this ChangeSet.
            </summary>
            <param name="change"></param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.ChangeSet.Undo">
            <summary>
                Undo all Changes in this ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.ChangeSet.Redo">
            <summary>
                Redo all Changes in this ChangeSet.
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.Changes.Change">
            <summary>
                Represents an individual change, with the commands to undo / redo the change as needed.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.#ctor(System.Object)">
            <summary>
                Create a new change item.
            </summary>
            <param name="target">The object that this change affects.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.#ctor(System.Object,System.Object)">
            <summary>
                Create a new change item.
            </summary>
            <param name="target">The object that this change affects.</param>
            <param name="changeKey">
                An object, that will be used to detect changes that affect the same "field".
                This object should implement or override object.Equals() and return true if the changes are for the same field.
                This is used when the undo UndoRoot has started a batch, or when the UndoRoot.ConsolidateChangesForSameInstance is
                true.
                A string will work, but should be sufficiently unique within the scope of changes that affect this Target instance.
                Another good option is to use the Tuple class to uniquely identify the change. The Tuple could contain
                the object, and a string representing the property name. For a collection change, you might include the
                instance, the property name, and the item added/removed from the collection.
            </param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.MergeWith(Ssz.Utils.MonitoredUndo.Changes.Change)">
            <summary>
                When consolidating events, we want to keep the original (first) "Undo"
                but use the most recent Redo. This will pull the Redo from the
                specified Change and apply it to this instance.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.Changes.Change.Target">
            <summary>
                A reference to the object that this change is for.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.Changes.Change.ChangeKey">
            <summary>
                The change "key" that uniquely identifies this instance. (see commends on the constructor.)
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.Changes.Change.Undone">
            <summary>
                Has this change been undone.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.Undo">
            <summary>
                Apply the undo logic from this instance, and raise the ISupportsUndoNotification.UndoHappened event.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.Redo">
            <summary>
                Apply the redo logic from this instance, and raise the ISupportsUndoNotification.RedoHappened event.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.PerformUndo">
            <summary>
                Overridden in derived classes to contain the actual Undo logic.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.Change.PerformRedo">
            <summary>
                Overridden in derived classes to contain the actual Redo logic.
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.Changes.DelegateChange">
            <summary>
                Represents an individual change, with the commands to undo / redo the change as needed.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.DelegateChange.#ctor(System.Object,System.Action,System.Action,System.Object)">
            <summary>
                Create a new change item.
            </summary>
            <param name="target">The object that this change affects.</param>
            <param name="undoAction">The delegate that will do the Undo logic</param>
            <param name="redoAction">The delegate that will do the Redo logic</param>
            <param name="changeKey">
                An object, that will be used to detect changes that affect the same "field".
                This object should implement or override object.Equals() and return true if the changes are for the same field.
                This is used when the undo UndoRoot has started a batch, or when the UndoRoot.ConsolidateChangesForSameInstance is
                true.
                A string will work, but should be sufficiently unique within the scope of changes that affect this Target instance.
                Another good option is to use the Tuple class to uniquely identify the change. The Tuple could contain
                the object, and a string representing the property name. For a collection change, you might include the
                instance, the property name, and the item added/removed from the collection.
            </param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.DelegateChange.MergeWith(Ssz.Utils.MonitoredUndo.Changes.Change)">
            <summary>
                When consolidating events, we want to keep the original "Undo"
                but use the most recent Redo. This will pull the Redo from the
                specified Change and apply it to this instance.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.Changes.PropertyChange.MergeWith(Ssz.Utils.MonitoredUndo.Changes.Change)">
            <summary>
                When consolidating events, we want to keep the original "Undo"
                but use the most recent Redo. This will pull the Redo from the
                specified Change and apply it to this instance.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.DefaultChangeFactory.GetChange(System.Object,System.String,System.Object,System.Object)">
            <summary>
                Construct a Change instance with actions for undo / redo.
            </summary>
            <param name="instance">The instance that changed.</param>
            <param name="propertyName">The property name that changed. (Case sensitive, used by reflection.)</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <returns>A Change that can be added to the UndoRoot's undo stack.</returns>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.DefaultChangeFactory.OnChanging(System.Object,System.String,System.Object,System.Object)">
            <summary>
                Construct a Change instance with actions for undo / redo.
            </summary>
            <param name="instance">The instance that changed.</param>
            <param name="propertyName">The property name that changed. (Case sensitive, used by reflection.)</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.DefaultChangeFactory.OnChanging(System.Object,System.String,System.Object,System.Object,System.String)">
            <summary>
                Construct a Change instance with actions for undo / redo.
            </summary>
            <param name="instance">The instance that changed.</param>
            <param name="propertyName">The property name that changed. (Case sensitive, used by reflection.)</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <param name="descriptionOfChange">A description of this change.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.DefaultChangeFactory.GetCollectionChange(System.Object,System.String,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Construct a Change instance with actions for undo / redo.
            </summary>
            <param name="instance">The instance that changed.</param>
            <param name="propertyName">
                The property name that exposes the collection that changed. (Case sensitive, used by
                reflection.)
            </param>
            <param name="collection">The collection that had an item added / removed.</param>
            <param name="e">The NotifyCollectionChangedEventArgs event args parameter, with info about the collection change.</param>
            <returns>A Change that can be added to the UndoRoot's undo stack.</returns>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.DefaultChangeFactory.OnCollectionChanged(System.Object,System.String,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Construct a Change instance with actions for undo / redo.
                Returns True, if is Undoing or Redoing, otherwise False.
            </summary>
            <param name="instance">The instance that changed.</param>
            <param name="propertyName">
                The property name that exposes the collection that changed. (Case sensitive, used by
                reflection.)
            </param>
            <param name="collection">The collection that had an item added / removed.</param>
            <param name="e">The NotifyCollectionChangedEventArgs event args parameter, with info about the collection change.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.DefaultChangeFactory.OnCollectionChanged(System.Object,System.String,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.String)">
            <summary>     
                Construct a Change instance with actions for undo / redo.
                Returns True, if is Undoing or Redoing, otherwise False.
            </summary>
            <param name="instance">The instance that changed.</param>
            <param name="propertyName">
                The property name that exposes the collection that changed. (Case sensitive, used by
                reflection.)
            </param>
            <param name="collection">The collection that had an item added / removed.</param>
            <param name="e">The NotifyCollectionChangedEventArgs event args parameter, with info about the collection change.</param>
            <param name="descriptionOfChange">A description of the change.</param>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.ISupportsUndo">
            <summary>
                Implement on objects that support undo.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.ISupportsUndo.GetUndoRoot">
            <summary>
                Gets the "root document" or "root object" that this instance is part of.
                Returning null from this method effectively disables undo support.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.ISupportUndoNotification">
            <summary>
                Implement on objects that want to be notified when something is undone or redone.
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.IUndoMetadata">
            <summary>
                Can be used by undo services to determine whether the specified field or
                collection item should be tracked for undo.
                Useful when the undo changes are created by a consolidated helper class.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.IUndoMetadata.CanUndoProperty(System.String,System.Object,System.Object)">
            <summary>
                Can be used by undo services to determine whether the specified field can be undone.
                Useful when the undo changes are created by a consolidated helper class.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
            <param name="oldValue">The original value of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <returns>A boolean, indicating whether the field should be tracked for undo / redo.</returns>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.IUndoMetadata.CanUndoCollectionChange(System.String,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Can be used by undo services to determine whether the specified field can be undone.
                Useful when the undo changes are created by a consolidated helper class.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
            <param name="collection">The instance of the collection that had items added or removed.</param>
            <param name="args">
                The INotifyCollectionChanged event args that include details on the type
                of collection operation.
            </param>
            <returns>A boolean, indicating whether the collection item should be tracked for undo / redo.</returns>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.UndoBatch">
            <summary>
                Provides a simplified way to start and end a batch via a "using" block.
                When the UndoBatch is disposed (at the end of the using block) it will end the batch.
                NOTE: Nested blocks _are_ supported.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoBatch.#ctor(Ssz.Utils.MonitoredUndo.ISupportsUndo,System.String,System.Boolean)">
            <summary>
                Starts an undo batch, which is ended when this instance is disposed. Designed for use in a using statement.
            </summary>
            <param name="instance">An object that implements ISupportsUndo. The batch will call GetUndoRoot() to get the root.</param>
            <param name="description">The description of this batch of changes.</param>
            <param name="consolidateChangesForSameInstance">Should the batch consolidate changes.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoBatch.#ctor(Ssz.Utils.MonitoredUndo.UndoRoot,System.String,System.Boolean)">
            <summary>
                Starts an undo batch, which is ended when this instance is disposed. Designed for use in a using statement.
            </summary>
            <param name="root">The UndoRoot related to this instance.</param>
            <param name="description">The description of this batch of changes.</param>
            <param name="consolidateChangesForSameInstance">Should the batch consolidate changes.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoBatch.Dispose">
            <summary>
                Disposing this instance will end the associated Undo batch.
            </summary>
        </member>
        <member name="T:Ssz.Utils.MonitoredUndo.UndoRoot">
            <summary>
                Tracks the ChangeSets and behavior for a single root object (or document).
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.#ctor(System.Object)">
            <summary>
                Create a new UndoRoot to track undo / redo actions for a given instance / document.
            </summary>
            <param name="root">
                The "root" instance of the object hierarchy. All changesets will
                need to passs a reference to this instance when they track changes.
            </param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.BeginChangeSetBatch(System.String,System.Boolean)">
            <summary>
                Tells the UndoRoot that all subsequent changes should be part of a single ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.EndChangeSetBatch">
            <summary>
                Tells the UndoRoot that it can stop collecting Changes into a single ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.Undo">
            <summary>
                Undo the first available ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.Undo(Ssz.Utils.MonitoredUndo.ChangeSet)">
            <summary>
                Undo all changesets up to and including the lastChangeToUndo.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.Redo">
            <summary>
                Redo the first available ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.Redo(Ssz.Utils.MonitoredUndo.ChangeSet)">
            <summary>
                Redo ChangeSets up to and including the lastChangeToRedo.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.AddChange(Ssz.Utils.MonitoredUndo.Changes.Change,System.String)">
            <summary>
                Add a change to the Undo history. The change will be added to the existing batch, if in a batch.
                Otherwise, a new ChangeSet will be created.
            </summary>
            <param name="change">The change to add to the history.</param>
            <param name="description">The description of this change.</param>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoRoot.AddChange(Ssz.Utils.MonitoredUndo.ChangeSet)">
            <summary>
                Adds a new changeset to the undo history. The change set will be added to the existing batch, if in a batch.
            </summary>
            <param name="changeSet">The ChangeSet to add.</param>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.UndoRoot.Root">
            <summary>
                The instance that represents the root (or document) for this set of changes.
            </summary>
            <remarks>
                This is needed so that a single instance of the application can track undo histories
                for multiple "root" or "document" instances at the same time. These histories should not
                overlap or show in the same undo history.
            </remarks>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.UndoRoot.IsInBatch">
            <summary>
                Is this UndoRoot currently collecting changes as part of a batch.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.UndoRoot.IsUndoingOrRedoing">
            <summary>
                Is this UndoRoot currently undoing or redoing a change set.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.UndoRoot.ConsolidateChangesForSameInstance">
            <summary>
                Should changes to the same property be consolidated (de-duped).
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoService.GetCurrentDocumentInstance``1">
            <summary>
                Stores the "Current Instance" of a given object or document so that the rest of the model can access it.
            </summary>
            <typeparam name="T">The type of the root instance to store.</typeparam>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoService.SetCurrentDocumentInstance``1(``0)">
            <summary>
                Stores the "Current Instance" of a given object or document so that the rest of the model can access it.
            </summary>
            <typeparam name="T">The type of the root instance to store.</typeparam>
            <param name="instance">The document or object instance that is the "currently active" instance.</param>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.UndoService.Current">
            <summary>
                Get (or create) the singleton instance of the UndoService.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoService.BeginChangeSetBatch(System.String,System.Boolean)">
            <summary>
                Tells all UndoRoots that all subsequent changes should be part of a single ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoService.EndChangeSetBatch">
            <summary>
                Tells all UndoRoots that it can stop collecting Changes into a single ChangeSet.
            </summary>
        </member>
        <member name="M:Ssz.Utils.MonitoredUndo.UndoService.Clear">
            <summary>
                Clear the cached UndoRoots.
            </summary>
        </member>
        <member name="P:Ssz.Utils.MonitoredUndo.UndoService.Item(System.Object)">
            <summary>
                Get (or create) an UndoRoot for the specified object or document instance.
            </summary>
            <param name="root">The object that represents the root of the document or object hierarchy.</param>
            <returns>An UndoRoot instance for this object.</returns>
        </member>
        <member name="T:Ssz.Utils.NameValueCollectionHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="nameValueCollectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.GetNameValueCollectionString(Ssz.Utils.CaseInsensitiveDictionary{System.String})">
            <summary>        
            </summary>
            <param name="nameValueCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.CanGetNameValueCollection(System.Object)">
            <summary>        
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.GetNameValueCollection(System.Object)">
            <summary>        
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.SetNameValueCollection(System.Object,Ssz.Utils.CaseInsensitiveDictionary{System.String})">
            <summary>        
            </summary>
            <param name="obj"></param>
            <param name="nameValueCollection"></param>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.UrlEncode(System.String)">
            <summary>        
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.NameValueCollectionHelper.UrlDecode(System.String)">
            <summary>        
            </summary>
        </member>
        <member name="T:Ssz.Utils.ObjectExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectExtensions.GetAllFields(System.Object)">
            <summary>
                Returns all fields except that with Searchable(false) attribute.        
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectExtensions.GetValue(System.Object,System.String)">
            <summary>
                Returns value of 'obj' concatenated with expression.
                If ivalid expression returns null.
                expression examples: ".Name", ".SubObjects[0].Name"        
            </summary>
            <param name="obj"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectExtensions.SetValue(System.Object,System.String,System.Object)">
            <summary>
                Sets value of 'obj' concatenated with expression.
                Returns True if succeeded.
                expression examples: ".Name", ".SubObjects[0].Name"
                obj != null
            </summary>
            <param name="obj"></param>
            <param name="expression"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectExtensions.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
                Returns True if succeeded.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectExtensions.FindInStringBrowsableProperties(System.Object,System.Text.RegularExpressions.Regex)">
            <summary>
                Searches in properties with [Searchable(true)] or [Browsable(true)] attributes.
                [Searchable(true)] attribute has higher priority.
                If regex == null matches all properties.        
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectExtensions.ReplaceInStringBrowsableProperties(System.Object,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
                Replaces in properties with [Searchable(true)] or [Browsable(true)] attributes.
                [Searchable(true)] attribute has higher priority.        
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectExtensions.GetProperties(System.Object)">
            <summary>
                Returns all Browsable properties of object.
                SearchableAttribute can explicitly set whether to return or not the property.        
            </summary>
        </member>
        <member name="T:Ssz.Utils.StringPropertyInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ssz.Utils.StringPropertyInfo.PropertyPath">
            <summary>
                Without '.' at the beginning.
            </summary>
        </member>
        <member name="F:Ssz.Utils.StringPropertyInfo.PropertyValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ssz.Utils.SearchableAttribute">
            <summary>
                For find and replace in string properties support.
            </summary>
        </member>
        <member name="M:Ssz.Utils.SearchableAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="searchable"></param>
        </member>
        <member name="P:Ssz.Utils.SearchableAttribute.Searchable">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ssz.Utils.ObjectManager`1">
            <summary>
                Manage list of objects, allows access through handlers, designed for effective insertion and deletion
            </summary>    
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.Reserve(System.Int32)">
            <summary>
                Reserve space in the internal list of objects
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.TrimExcess">
            <summary>
                Sets the capacity to the actual number of elements in the internal list of objects,
                if that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.Contains(System.UInt32)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.TryGetValue(System.UInt32,`0@)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.Remove(System.UInt32)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.Assign(System.UInt32,`0)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.Clear">
            <summary>
                Releases all objects from objects from internal list. Its handlers become invalid
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.ToList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ssz.Utils.ObjectManager`1.Item(System.UInt32)">
            <summary>
            </summary>
        </member>
        <member name="P:Ssz.Utils.ObjectManager`1.Handles">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ssz.Utils.ObjectManager`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.IndexToHandle(System.Int32)">
            <summary>
                Makes instance-specific handler from index
                index must be valid
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.HandleToIndex(System.UInt32)">
            <summary>
                Verifyes that handle corresponds instance of object and returns index of object.
                Returns 0, if invalid handle.
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.AddInternal(`0)">
            <summary>
                Puts object in internal list and returns its index there.        
            </summary>
        </member>
        <member name="M:Ssz.Utils.ObjectManager`1.RemoveInternal(System.Int32)">
            <summary>
                Releases object from internal list. Its handle becomes invalid.
                index must be valid
            </summary>
        </member>
        <member name="T:Ssz.Utils.OwnedDataSerializable">
            <summary>
                Abstract base class allows to save/retrieve their internal data to/from an existing
                SerializationWriter/SerializationReader.
                Implemented interface which specify that class can be recreated during deserialization using a default
                constructor and then calling DeserializeOwnedData()
            </summary>
        </member>
        <member name="M:Ssz.Utils.OwnedDataSerializable.SerializeOwnedData(Ssz.Utils.Serialization.SerializationWriter,System.Object)">
            <summary>
                Store internal data directly into a SerializationWriter.
                Uses JsonSerializer.Serialize internally.
                You can specify JsonSerializerOptions as context.
            </summary>
            <param name="writer"> The SerializationWriter to use </param>
            <param name="context"> Optional context to use as a hint as to what to store (BitVector32 is useful) </param>
        </member>
        <member name="M:Ssz.Utils.OwnedDataSerializable.DeserializeOwnedData(Ssz.Utils.Serialization.SerializationReader,System.Object)">
            <summary>
                Retrieve internal data directly from a SerializationReader.
                Uses JsonSerializer.Deserialize internally.
                You can specify JsonSerializerOptions as context.
            </summary>
            <param name="reader"> The SerializationReader to use </param>
            <param name="context"> Optional context to use as a hint as to what to retrieve (BitVector32 is useful) </param>
        </member>
        <member name="T:Ssz.Utils.OwnedDataSerializableAndCloneable">
            <summary>
                Abstract base class allows to save/retrieve their internal data to/from an existing
                SerializationWriter/SerializationReader.
                Implemented Equal method which based of comparing serialized data.
                Implemented interface which specify that class can be recreated during deserialization using a default
                constructor and then calling DeserializeOwnedData()
            </summary>
        </member>
        <member name="M:Ssz.Utils.OwnedDataSerializableAndCloneable.Clone">
            <summary>
                Creates a new object that is a copy of the current instance.
            </summary>
            <returns>a new object that is a copy of the current instance. </returns>
        </member>
        <member name="M:Ssz.Utils.OwnedDataSerializableAndCloneable.Equals(System.Object)">
            <summary>
                Compares objects.
            </summary>
            <returns>Returns true if both references is equal or both objects have equal serialized data</returns>
        </member>
        <member name="M:Ssz.Utils.OwnedDataSerializableExtensions.CloneUsingSerialization``1(``0,System.Func{``0})">
            <summary>
                func is new object creator function, otherwise default constructor is used.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Utils.ReferenceEqualityComparer`1">
            <summary>
                A generic object comparerer that would only use object's reference,
                ignoring any <see cref="T:System.IEquatable`1" /> or <see cref="M:System.Object.Equals(System.Object)" />  overrides.
            </summary>
        </member>
        <member name="T:Ssz.Utils.Serialization.IOwnedDataSerializable">
            <summary>
                Interface which allows a class to save/retrieve their internal data to/from an existing
                SerializationWriter/SerializationReader.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.IOwnedDataSerializable.SerializeOwnedData(Ssz.Utils.Serialization.SerializationWriter,System.Object)">
            <summary>
                Lets the implementing class store internal data directly into a SerializationWriter.
            </summary>
            <param name="writer"> The SerializationWriter to use </param>
            <param name="context"> Optional context to use as a hint as to what to store </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.IOwnedDataSerializable.DeserializeOwnedData(Ssz.Utils.Serialization.SerializationReader,System.Object)">
            <summary>
                Lets the implementing class retrieve internal data directly from a SerializationReader.
            </summary>
            <param name="reader"> The SerializationReader to use </param>
            <param name="context"> Optional context to use as a hint as to what to retrieve </param>
        </member>
        <member name="T:Ssz.Utils.Serialization.SerializationReader">
            <summary>
                A SerializationReader instance is used to read stored values and objects from a byte array.
                Once an instance is created, use the various methods to read the required data.
                The data read MUST be exactly the same type and in the same order as it was written.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.#ctor(System.Byte[])">
            <summary>
                Creates a SerializationReader using a byte[] previous created by SerializationWriter
                A MemoryStream is used to access the data without making a copy of it.
            </summary>
            <param name="data"> The byte[] containining serialized data. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.#ctor(System.IO.Stream)">
            <summary>
                Creates a SerializationReader around the specified stream.
                baseStream.CanSeek must be true.
            </summary>
            <param name="baseStream"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.Dispose">
            <summary>
                This is the implementation of the IDisposable.Dispose method.  The client
                application should invoke this method when this instance is no longer needed.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.Dispose(System.Boolean)">
            <summary>
                This method is invoked when the IDisposable.Dispose or Finalize actions are
                requested.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.Finalize">
            <summary>
                Invoked by the .NET Framework while doing heap managment (Finalize).
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.GetBlockVersionWithoutChangingStreamPosition">
            <summary>
                Use only with memory streams.
                Throws Exception, if not block beginning.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.BeginBlock">
            <summary>
                Use only with memory streams.
                Throws Exception, if not block beginning.
            </summary>
            <returns>Returns block Version.</returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.EndBlock">
            <summary>
                Use only with memory streams.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadToBlockEnding(System.Boolean)">
            <summary>
                Use only with memory streams.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.EnterBlock">
            <summary>
                Use only with memory streams.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadDateTime">
            <summary>
                Returns a DateTime value from the stream.
            </summary>
            <returns> A DateTime value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadGuid">
            <summary>
                Returns a Guid value from the stream.
            </summary>
            <returns> A DateTime value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOwnedData(Ssz.Utils.Serialization.IOwnedDataSerializable,System.Object)">
            <summary>
                Allows an existing object, implementing IOwnedDataSerializable, to
                retrieve its owned data from the stream.
            </summary>
            <param name="target"> Any IOwnedDataSerializable object. </param>
            <param name="context"> An optional, arbitrary object to allow context to be provided. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadObject">
            <summary>
                Returns an object based on the SerializedType read next from the stream.
            </summary>
            <returns> An object instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadObject``1">
            <summary>
                Throws if saved object not correct type;
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadString">
            <summary>
                Called ReadOptimizedString().        
            </summary>
            <returns> A string value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadTimeSpan">
            <summary>
                Returns a TimeSpan value from the stream.
            </summary>
            <returns> A TimeSpan value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadArray``1">
            <summary>
                Returns an array populated with values from the stream or null.
            </summary>
            <typeparam name="T"> The list Type. </typeparam>
            <returns> A new generic List or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadList``1">
            <summary>
                Returns a generic List populated with values from the stream or null.
            </summary>
            <typeparam name="T"> The list Type. </typeparam>
            <returns> A new generic List or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadListOfOwnedDataSerializable``1(System.Func{``0},System.Object)">
            <summary>
                Reads list of same objects.
                func is constructor function.       
            </summary>        
            <param name="func"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadDictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
                Populates a pre-existing generic dictionary with keys and values from the stream.
                This allows a generic dictionary to be created without using the default constructor.
            </summary>
            <typeparam name="TK"> The key Type. </typeparam>
            <typeparam name="TV"> The value Type. </typeparam>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadBitArray">
            <summary>
                Returns a BitArray or null from the stream.
            </summary>
            <returns> A BitArray instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedBitArray">
            <summary>
                Returns a BitArray from the stream that was stored optimized.
            </summary>
            <returns> A BitArray instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedDateTime">
            <summary>
                Returns a DateTime value from the stream that was stored optimized.
            </summary>
            <returns> A DateTime value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedDecimal">
            <summary>
                Returns a Decimal value from the stream that was stored optimized.
            </summary>
            <returns> A Decimal value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedUInt16">
            <summary>
                Returns a UInt16 value from the stream that was stored optimized.
            </summary>
            <returns> A UInt16 value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedInt16">
            <summary>
                Returns an Int16 value from the stream that was stored optimized.
            </summary>
            <returns> An Int16 value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedUInt32">
            <summary>
                Returns a UInt32 value from the stream that was stored optimized.
            </summary>
            <returns> A UInt32 value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedInt32">
            <summary>
                Returns an Int32 value from the stream that was stored optimized.
            </summary>
            <returns> An Int32 value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedUInt64">
            <summary>
                Returns a UInt64 value from the stream that was stored optimized.
            </summary>
            <returns> A UInt64 value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedInt64">
            <summary>
                Returns an Int64 value from the stream that was stored optimized.
            </summary>
            <returns> An Int64 value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadUInt32OptimizedOrNot">
            <summary>
                depends on _optimizedSize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadInt32OptimizedOrNot">
            <summary>
                depends on _optimizedSize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadDoubleOptimizedOrNot">
            <summary>
                depends on _optimizedSize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedObjectArray(System.Type)">
            <summary>        
                Returns an object[] from the stream that was stored optimized.
                The returned array will be typed according to the specified element type
                and the resulting array can be cast to the expected type.
                e.g.
                string[] myStrings = (string[]) reader.ReadOptimizedObjectArray(typeof(string));
                An exception will be thrown if any of the deserialized values cannot be
                cast to the specified elementType.
            </summary>
            <param name="elementType"> The Type of the expected array elements. null will return a plain object[]. </param>
            <returns> An object[] instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedString">
            <summary>
                Returns a string value from the stream that was stored optimized.
            </summary>
            <returns> A string value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedTimeSpan">
            <summary>
                Returns a TimeSpan value from the stream that was stored optimized.
            </summary>
            <returns> A TimeSpan value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadOptimizedType">
            <summary>
                Returns a Type from the stream.
                Throws an exception if the Type cannot be found.
            </summary>
            <returns> A Type instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.DecodeTimeSpan(System.Byte)">
            <summary>
                Returns a TimeSpan decoded from packed data.
                This routine is called from ReadOptimizedDateTime() and ReadOptimizedTimeSpan().
                <remarks>
                    This routine uses a parameter to allow ReadOptimizedDateTime() to 'peek' at the
                    next byte and extract the DateTimeKind from bits one and two (IsNegative and HasDays)
                    which are never set for a Time portion of a DateTime.
                </remarks>
            </summary>
            <param name="initialByte"> The first of two always-present bytes. </param>
            <returns> A decoded TimeSpan </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadTypedArrayOptimizeFlags(Ssz.Utils.Serialization.SerializedType)">
            <summary>
                Creates a BitArray representing which elements of a typed array
                are serializable.
            </summary>
            <param name="serializedType"> The type of typed array. </param>
            <returns> A BitArray denoting which elements are serializable. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadObjectInternal(Ssz.Utils.Serialization.SerializedType)">
            <summary>
                Returns an object based on supplied SerializedType.
            </summary>
            <returns> An object instance. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadInt32Array">
            <summary>
                Returns an Int32[] from the stream.
            </summary>
            <returns> An Int32[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadInt64Array">
            <summary>
                Returns an Int64[] from the stream.
            </summary>
            <returns> An Int64[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadTimeSpanArray">
            <summary>
                Returns a TimeSpan[] from the stream.
            </summary>
            <returns> A TimeSpan[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadUInt32Array">
            <summary>
                Returns a UInt[] from the stream.
            </summary>
            <returns> A UInt[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadUInt64Array">
            <summary>
                Returns a UInt64[] from the stream.
            </summary>
            <returns> A UInt64[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadDateTimeArray">
            <summary>
                Returns a DateTime[] from the stream.
            </summary>
            <returns> A DateTime[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadUInt16Array">
            <summary>
                Returns a UInt16[] from the stream.
            </summary>
            <returns> A UInt16[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadInt16Array">
            <summary>
                Returns an Int16[] from the stream.
            </summary>
            <returns> An Int16[] instance; or null. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadArrayInternal(Ssz.Utils.Serialization.SerializedType,System.Type)">
            <summary>
                Determine whether the passed-in type code refers to an array type
                and deserializes the array if it is.
                elementType != null
                Returns null if not an array type.
            </summary>
            <param name="typeCode"> The SerializedType to check. </param>
            <param name="elementType"> The Type of array element; </param>
            <returns> </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadTypeCode">
            <summary>
                Returns the SerializedType read next from the stream.
            </summary>
            <returns> A SerializedType value. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadBooleanArray">
            <summary>
                Internal implementation returning a Bool[].
            </summary>
            <returns> A Bool[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadByteArrayInternal">
            <summary>
                Internal implementation returning a Byte[].
            </summary>
            <returns> A Byte[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadCharArray">
            <summary>
                Internal implementation returning a Char[].
            </summary>
            <returns> A Char[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadDecimalArray">
            <summary>
                Internal implementation returning a Decimal[].
            </summary>
            <returns> A Decimal[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadDoubleArray">
            <summary>
                Internal implementation returning a Double[].
            </summary>
            <returns> A Double[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadGuidArray">
            <summary>
                Internal implementation returning a Guid[].
            </summary>
            <returns> A Guid[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadSByteArray">
            <summary>
                Internal implementation returning an SByte[].
            </summary>
            <returns> An SByte[]. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationReader.ReadSingleArray">
            <summary>
                Internal implementation returning a Single[].
            </summary>
            <returns> A Single[]. </returns>
        </member>
        <member name="T:Ssz.Utils.Serialization.SerializationWriter">
            <summary>
                Class which defines the writer for serialized data using the fast serialization optimization.
                A SerializationWriter instance is used to store values and objects in a byte array.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
                Creates a SerializationWriter around the specified stream.
                baseStream.CanSeek must be true.
            </summary>
            <param name="baseStream"></param>
            <param name="optimizeSize"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Dispose">
            <summary>
                This is the implementation of the IDisposable.Dispose method.  The client
                application should invoke this method when this instance is no longer needed.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Dispose(System.Boolean)">
            <summary>
                This method is invoked when the IDisposable.Dispose or Finalize actions are
                requested.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Finalize">
            <summary>
                Invoked by the .NET Framework while doing heap managment (Finalize).
            </summary>
        </member>
        <member name="F:Ssz.Utils.Serialization.SerializationWriter.HighestOptimizable16BitValue">
            <summary>
                Holds the highest Int16 that can be optimized into less than the normal 2 bytes
            </summary>
        </member>
        <member name="F:Ssz.Utils.Serialization.SerializationWriter.HighestOptimizable32BitValue">
            <summary>
                Holds the highest Int32 that can be optimized into less than the normal 4 bytes
            </summary>
        </member>
        <member name="F:Ssz.Utils.Serialization.SerializationWriter.HighestOptimizable64BitValue">
            <summary>
                Holds the highest Int64 that can be optimized into less than the normal 8 bytes
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.BeginBlock(System.Int32)">
            <summary>
                Begins Block
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.EndBlock">
            <summary>
                Ends Block
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.EnterBlock(System.Int32)">
            <summary>
                Enters Block
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Single)">
            <summary>
                Writes a four-byte floating-point value to the current stream and advances the
                stream position by four bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.UInt64)">
            <summary>
                Writes an eight-byte unsigned integer to the current stream and advances the
                stream position by eight bytes.
            </summary>
            <param name="value"></param>        
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Int64)">
            <summary>
                Writes an eight-byte signed integer to the current stream and advances the stream
                position by eight bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.UInt32)">
            <summary>
                Writes a four-byte unsigned integer to the current stream and advances the stream
                position by four bytes.
            </summary>
            <param name="value"></param>        
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Int32)">
            <summary>
               Writes a four-byte signed integer to the current stream and advances the stream
                position by four bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.UInt16)">
            <summary>
                Writes a two-byte unsigned integer to the current stream and advances the stream
                position by two bytes.
            </summary>
            <param name="value"></param>        
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Int16)">
            <summary>
                Writes a two-byte signed integer to the current stream and advances the stream
                position by two bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteRaw(System.Char[])">
            <summary>
                Writes a character array to the current stream and advances the current position
                of the stream in accordance with the Encoding used and the specific characters
                being written to the stream.
                Use ReadRawChars(...) in SerializationReader.
            </summary>
            <param name="chars"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
                Writes a section of a character array to the current stream, and advances the
                current position of the stream in accordance with the Encoding used and perhaps
                the specific characters being written to the stream.
                Use ReadRawChars(...) in SerializationReader.
            </summary>
            <param name="chars"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteRaw(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes a region of a byte array to the current stream.
                Use ReadRawBytes(int count) in SerializationReader.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteRaw(System.Byte[])">
            <summary>
                Writes a byte array to the current stream.
                Use ReadRawBytes(int count) in SerializationReader.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Byte[])">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Double)">
            <summary>
                Writes an eight-byte floating-point value to the current stream and advances
                the stream position by eight bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Char)">
            <summary>
                Writes a Unicode character to the current stream and advances the current position
                of the stream in accordance with the Encoding used and the specific characters
                being written to the stream.
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.SByte)">
            <summary>
            
            </summary>
            <param name="value"></param>       
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Byte)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Decimal)">
            <summary>
                Writes a decimal value to the current stream and advances the stream position
                by sixteen bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.DateTime)">
            <summary>
                Writes a DateTime value into the stream.
                Stored Size: 8 bytes
            </summary>
            <param name="value"> The DateTime value to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Guid)">
            <summary>
                Writes a Guid into the stream.
                Stored Size: 16 bytes.
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOwnedData(Ssz.Utils.Serialization.IOwnedDataSerializable,System.Object)">
            <summary>
                Allows any object implementing IOwnedDataSerializable to serialize itself
                into this SerializationWriter.
                A context may also be used to give the object an indication of what data
                to store.        
            </summary>
            <param name="target"> The IOwnedDataSerializable object to ask for owned data </param>
            <param name="context"> An arbtritrary object </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteObject(System.Object)">
            <summary>
                Stores an object into the stream using the fewest number of bytes possible.
                Stored Size: 1 byte upwards depending on type and/or content.
                1 byte: null, DBNull.Value, Boolean
                1 to 2 bytes: Int16, UInt16, Byte, SByte, Char,
                1 to 4 bytes: Int32, UInt32, Single
                1 to 8 bytes: DateTime, TimeSpan, Double, Int64, UInt64
                1 or 16 bytes: Guid
                1 plus content: string, object[], byte[], char[], BitArray, Type, ArrayList
                Any other object be stored using a .Net Binary formatter but this should
                only be allowed as a last resort:
                Since this is effectively a different serialization session, there is a
                possibility of the same shared object being serialized twice or, if the
                object has a reference directly or indirectly back to the parent object,
                there is a risk of looping which will throw an exception.
                The type of object is checked with the most common types being checked first.
                Each 'section' can be reordered to provide optimum speed but the check for
                null should always be first and the default serialization always last.
                Once the type is identified, a SerializedType byte is stored in the stream
                followed by the data for the object (certain types/values may not require
                storage of data as the SerializedType may imply the value).
                For certain objects, if the value is within a certain range then optimized
                storage may be used. If the value doesn't meet the required optimization
                criteria then the value is stored directly.
                The checks for optimization may be disabled by setting the OptimizeForSize
                property to false in which case the value is stored directly. This could
                result in a slightly larger stream but there will be a speed increate to
                compensate.
            </summary>
            <param name="value"> The object to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteObject``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.String)">
            <summary>
                This override to hide base BinaryWriter.Write(string).
            </summary>
            <param name="value"> The string to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.TimeSpan)">
            <summary>
                Writes a TimeSpan value into the stream.
                Stored Size: 8 bytes
            </summary>
            <param name="value"> The TimeSpan value to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray``1(``0[])">
            <summary>
                Writes a nullable array into the stream.
            </summary>
            <remarks>
                Array type itself is not stored - it must be supplied
                at deserialization time.
            </remarks>
            <typeparam name="T"> Array Type. </typeparam>
            <param name="value"> The generic List. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write``1(System.Collections.Generic.IList{``0})">
            <summary>
                Writes a nullable generic List into the stream.
                Objects can be of different types.
            </summary>
            <remarks>
                The list type itself is not stored - it must be supplied
                at deserialization time.
                <para />
                The list contents are stored as an array.
            </remarks>
            <typeparam name="T"> The list Type. </typeparam>
            <param name="value"> The generic List. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteListOfOwnedDataSerializable``1(System.Collections.Generic.ICollection{``0},System.Object)">
            <summary>
                Writes list of same not null objects. 
            </summary>        
            <param name="values"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
                Writes a non-null generic Dictionary into the stream.
            </summary>
            <remarks>
                The key and value types themselves are not stored - they must be
                supplied at deserialization time.
                <para />
                An array of keys is stored followed by an array of values.
            </remarks>
            <typeparam name="TK"> The key Type. </typeparam>
            <typeparam name="TV"> The value Type. </typeparam>
            <param name="value"> The generic dictionary. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.Write(System.Collections.BitArray)">
            <summary>
                Writes a BitArray value into the stream using the fewest number of bytes possible.
                Stored Size: 1 byte upwards depending on data content
                Notes:
                A null BitArray takes 1 byte.
                An empty BitArray takes 2 bytes.
            </summary>
            <param name="value"> The BitArray value to store. </param>
        </member>
        <member name="F:Ssz.Utils.Serialization.SerializationWriter.DateYearMask">
            <summary>
                Section masks used for packing DateTime values
            </summary>
        </member>
        <member name="F:Ssz.Utils.Serialization.SerializationWriter.IsNegativeSection">
            <summary>
                Section masks used for packing TimeSpan values
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.IsOwnedDataSerializableAndRecreatable(System.Type)">
            <summary>
                Checks whether instances of a Type can be created.
            </summary>
            <remarks>
                A Value Type only needs to implement IOwnedDataSerializable.
                A Reference Type needs to implement IOwnedDataSerializableAndRecreatable and provide a default constructor.
            </remarks>
            <param name="type"> The Type to check </param>
            <returns> true if the Type is recreatable; false otherwise. </returns>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.Collections.BitArray)">
            <summary>
                Writes a BitArray into the stream using the fewest number of bytes possible.
                Stored Size: 1 byte upwards depending on data content
                Notes:
                An empty BitArray takes 1 byte.
                value != null
            </summary>
            <param name="value"> The BitArray value to store. Must not be null. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.UInt16)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.Int16)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.UInt32)">
            <summary>
                Write a UInt32 value using the fewest number of bytes possible.
            </summary>
            <remarks>
                0x00000000 - 0x0000007f (0 to 127) takes 1 byte
                0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
                0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
                0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
                ----------------------------------------------------------------
                0x10000000 - 0xFFFFFFFF (268,435,456 and above) takes 5 bytes
                Only call this method if the value is known to  be between 0 and
                268,435,455 otherwise use Write(UInt32 value)
            </remarks>
            <param name="value"> The UInt32 to store. Must be between 0 and 268,435,455 inclusive. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.Int32)">
            <summary>
                Write an Int32 value using the fewest number of bytes possible.
            </summary>
            <remarks>
                0x00000000 - 0x0000007f (0 to 127) takes 1 byte
                0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
                0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
                0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
                ----------------------------------------------------------------
                0x10000000 - 0x07FFFFFF (268,435,456 and above) takes 5 bytes
                All negative numbers take 5 bytes
                Only call this method if the value is known to be between 0 and
                268,435,455 otherwise use Write(Int32 value)
            </remarks>
            <param name="value"> The Int32 to store. Must be between 0 and 268,435,455 inclusive. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.UInt64)">
            <summary>
                Write a UInt64 value using the fewest number of bytes possible.
            </summary>
            <remarks>
                0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
                0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
                0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
                0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
                0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
                0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
                0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
                0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
                ------------------------------------------------------------------
                0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
                0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
                Only call this method if the value is known to be between 0 and
                72,057,594,037,927,935 otherwise use Write(UInt64 value)
            </remarks>
            <param name="value"> The UInt64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.Int64)">
            <summary>
                Write an Int64 value using the fewest number of bytes possible.
            </summary>
            <remarks>
                0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
                0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
                0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
                0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
                0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
                0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
                0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
                0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
                ------------------------------------------------------------------
                0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
                0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
                All negative numbers take 10 bytes
                Only call this method if the value is known to be between 0 and
                72,057,594,037,927,935 otherwise use Write(Int64 value)
            </remarks>
            <param name="value"> The Int64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.DateTime)">
            <summary>
                Writes a DateTime value into the stream using the fewest number of bytes possible.
                Stored Size: 3 bytes to 7 bytes (.Net is 8 bytes)
                Notes:
                A DateTime containing only a date takes 3 bytes
                (except a .NET 2.0 Date with a specified DateTimeKind which will take a minimum
                of 5 bytes - no further optimization for this situation felt necessary since it
                is unlikely that a DateTimeKind would be specified without hh:mm also)
                Date plus hh:mm takes 5 bytes.
                Date plus hh:mm:ss takes 6 bytes.
                Date plus hh:mm:ss.fff takes 7 bytes.
            </summary>
            <param name="value"> The DateTime value to store. Must not contain sub-millisecond data. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.Decimal)">
            <summary>
                Writes a Decimal value into the stream using the fewest number of bytes possible.
                Stored Size: 1 byte to 14 bytes (.Net is 16 bytes)
                Restrictions: None
            </summary>
            <param name="value"> The Decimal value to store </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.String)">
            <summary>
                Writes a string value into the stream using the fewest number of bytes possible.
                Stored Size: 1 byte upwards depending on string length
                Notes:
                Encodes null, Empty, 'Y', 'N', ' ' values as a single byte
                Any other single char string is stored as two bytes
                All other strings are stored in a string token list:
                The TypeCode representing the current string token list is written first (1 byte),
                followed by the string token itself (1-4 bytes)
                When the current string list has reached 128 values then a new string list
                is generated and that is used for generating future string tokens. This continues
                until the maximum number (128) of string lists is in use, after which the string
                lists are used in a round-robin fashion.
                By doing this, more lists are created with fewer items which allows a smaller
                token size to be used for more strings.
                The first 16,384 strings will use a 1 byte token.
                The next 2,097,152 strings will use a 2 byte token. (This should suffice for most uses!)
                The next 268,435,456 strings will use a 3 byte token. (My, that is a lot!!)
                The next 34,359,738,368 strings will use a 4 byte token. (only shown for completeness!!!)
            </summary>
            <param name="value"> The string to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.TimeSpan)">
            <summary>
                Writes a TimeSpan value into the stream using the fewest number of bytes possible.
                Stored Size: 2 bytes to 8 bytes (.Net is 8 bytes)
                Notes:
                hh:mm (time) are always stored together and take 2 bytes.
                If seconds are present then 3 bytes unless (time) is not present in which case 2 bytes
                since the seconds are stored in the minutes position.
                If milliseconds are present then 4 bytes.
                In addition, if days are present they will add 1 to 4 bytes to the above.
            </summary>
            <param name="value"> The TimeSpan value to store. Must not contain sub-millisecond data. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimized(System.Type)">
            <summary>
                Stores a non-null Type object into the stream.
                Stored Size: Depends on the length of the Type's name.
                If the type is a System type (mscorlib) then it is stored without assembly name information,
                otherwise the Type's AssemblyQualifiedName is used.
            </summary>
            <param name="value"> The Type to store. Must not be null. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.Int16[])">
            <summary>
                Writes an Int16[] into the stream using the fewest possible bytes.
                values != null
            </summary>
            <param name="values"> The Int16[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.Int32[])">
            <summary>
                Writes an Int32[] into the stream using the fewest possible bytes.
                values != null
            </summary>
            <param name="values"> The Int32[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.Int64[])">
            <summary>
                Writes an Int64[] into the stream using the fewest possible bytes.
                values != null
            </summary>
            <param name="values"> The Int64[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.UInt16[])">
            <summary>
                Writes a UInt16[] into the stream using the fewest possible bytes.
                values != null
            </summary>
            <param name="values"> The UInt16[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.UInt32[])">
            <summary>
                Writes a UInt32[] into the stream using the fewest possible bytes.
                values != null
            </summary>
            <param name="values"> The UInt32[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.UInt64[])">
            <summary>
                Writes a UInt64[] into the stream using the fewest possible bytes.
                values != null
            </summary>
            <param name="values"> The UInt64[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Single[])">
            <summary>
                values != null
            </summary>
            <param name="values"> The Single[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Double[])">
            <summary>
                values != null
            </summary>
            <param name="values"> The Double[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Decimal[])">
            <summary>
                values != null
            </summary>
            <remarks>
                All elements are stored optimized.
            </remarks>
            <param name="values"> The Decimal[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.DateTime[])">
            <summary>
                Writes a DateTime[] into the stream using the fewest possible bytes.
                values != null
            </summary>
            <param name="values"> The DateTime[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedArrayInternal(System.TimeSpan[])">
            <summary>
                Writes a TimeSpan[] into the stream using the fewest possible bytes.
                values != null
            </summary>
            <param name="values"> The TimeSpan[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Guid[])">
            <summary>
                values != null
            </summary>
            <param name="values"> The Guid[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Boolean[])">
            <summary>
                values != null
            </summary>
            <remarks>
                Stored as a BitArray for optimization.
            </remarks>
            <param name="values"> The Boolean[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.SByte[])">
            <summary>
                values != null
            </summary>
            <param name="values"> The SByte[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Byte[])">
            <summary>
                values != null
            </summary>
            <param name="values"> The Byte[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Char[])">
            <summary>
                Internal implementation to store a non-null Char[].
            </summary>
            <param name="values"> The Char[] to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.EncodeTimeSpan(System.TimeSpan,System.Boolean,System.Int32)">
            <summary>
                Encodes a TimeSpan into the fewest number of bytes.
                Has been separated from the WriteOptimized(TimeSpan) method so that WriteOptimized(DateTime)
                can also use this for .NET 2.0 DateTimeKind information.
                By taking advantage of the fact that a DateTime's TimeOfDay portion will never use the IsNegative
                and HasDays flags, we can use these 2 bits to store the DateTimeKind and, since DateTimeKind is
                unlikely to be set without a Time, we need no additional bytes to support a .NET 2.0 DateTime.
            </summary>
            <param name="value"> The TimeSpan to store. </param>
            <param name="partOfDateTime"> True if the TimeSpan is the TimeOfDay from a DateTime; False if a real TimeSpan. </param>
            <param name="initialData"> The intial data for the BitVector32 - contains DateTimeKind or 0 </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.DateTime[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non, null DateTime[] using a BitArray to
                determine which elements are optimizable.
            </summary>
            <param name="values"> The DateTime[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.Int16[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non-null Int16[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values"> The Int16[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.Int32[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non-null Int32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values"> The Int32[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.Int64[],System.Collections.BitArray)">
            <summary>
                Internal implementation to writes a non-null Int64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values"> The Int64[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.TimeSpan[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non-null TimeSpan[] using a BitArray to determine which elements are
                optimizable.
            </summary>
            <param name="values"> The TimeSpan[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.UInt16[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non-null UInt16[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values"> The UInt16[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.UInt32[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non-null UInt32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values"> The UInt32[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArray(System.UInt64[],System.Collections.BitArray)">
            <summary>
                Internal implementation to write a non-null UInt64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values"> The UInt64[] to store. </param>
            <param name="optimizeFlags">
                A BitArray indicating which of the elements which are optimizable; a reference to constant
                FullyOptimizableValueArray if all the elements are optimizable; or null if none of the elements are optimizable.
            </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizedObjectArray(System.Object[])">
            <summary>
                values != null
                Sequences of null values and sequences of DBNull.Values are stored with a flag and optimized count.
                Other values are stored using WriteObject().
                This routine is called by the Write(object[]), WriteOptimized(object[]) and Write(object[], object[])) methods.
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteSerializedType(Ssz.Utils.Serialization.SerializedType)">
            <summary>
                Stores the specified SerializedType code into the stream.
                By using a centralized method, it is possible to collect statistics for the
                type of data being stored in DEBUG mode.
                Use the DumpTypeUsage() method to show a list of used SerializedTypes and
                the number of times each has been used. This method and the collection code
                will be optimized out when compiling in Release mode.
            </summary>
            <param name="typeCode"> The SerializedType to store. </param>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteArrayInternal(System.Array,System.Type)">
            <summary>
                Internal implementation to write a non-null array into the stream.
                value != null, elementType != null
            </summary>
        </member>
        <member name="M:Ssz.Utils.Serialization.SerializationWriter.WriteOptimizeFlags(System.Collections.BitArray)">
            <summary>
                Writes the Optimize Flags.
            </summary>
        </member>
        <member name="T:Ssz.Utils.Serialization.SerializedType">
            <summary>
                Enum which is used for fast serialization. It stores information about a type or type/value.
            </summary>
        </member>
        <member name="T:Ssz.Utils.StringHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Utils.StringHelper.CompareIgnoreCase(System.String,System.String)">
            <summary>        
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.StringHelper.ReplaceIgnoreCase(System.String@,System.String,System.String)">
            <summary>
                returns replaces count.
                oldValue != String.Empty
            </summary>
        </member>
        <member name="M:Ssz.Utils.StringHelper.ContainsIgnoreCase(System.String,System.String)">
            <summary>
                value != String.Empty
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.StringHelper.StartsWithIgnoreCase(System.String,System.String)">
            <summary>        
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Utils.StringHelper.EndsWithIgnoreCase(System.String,System.String)">
            <summary>        
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
