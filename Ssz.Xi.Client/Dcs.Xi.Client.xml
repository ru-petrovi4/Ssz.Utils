<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ssz.Xi.Client</name>
    </assembly>
    <members>
        <member name="T:Ssz.Xi.Client.Api.EventHandlers.XiEventMessagesCallbackEventHandler">
            <summary>
                This delegate defines the callback for reporting new alarms and events to the client application
            </summary>
            <param name="eventList"> The IXiEventList that is sending the alarms and events to the client application. </param>
            <param name="newListItems"> The alarms and events that are being sent to the client application. </param>
        </member>
        <member name="T:Ssz.Xi.Client.Api.EventHandlers.XiElementValuesCallbackEventHandler">
            <summary>
                This delegate defines the callback for reporting data updates to the client application.
            </summary>
            <param name="dataList"> The XiSubscription that is sending the alarms and events to the client application. </param>
            <param name="changedListItems"> The list of data updates being reported. </param>
            <param name="changedValues">The time when the values were last changed.</param>
        </member>
        <member name="T:Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet.CalculationTypeId">
            <summary>
                The type of calculation used to create the value set as defined by the
                StandardMib.DataJournalOptions.MathLibrary of the server and by
                Xi.Contracts.Constants.JournalDataSampleTypes. The historical data object
                for which this value set is defined may not have two value sets with the
                same CalculationTypeId.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet.ResultCode">
            <summary>
                This property contains the Result Code associated with reading this value
                set from the server. See XiFaultCodes class for standardized result codes.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet.StartTime">
            <summary>
                This property defines the starting time for this list historical values.
                Values in the value set will be between the StartTime and EndTime. The
                read method used to access the values specifies whether or not values
                with the starting or ending times are to be included in this value set.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet.EndTime">
            <summary>
                This property defines the ending time for this list historical values.
                Values in the value set will be between the StartTime and EndTime. The
                read method used to access the values specifies whether or not values
                with the starting or ending times are to be included in this value set.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet.Count">
            <summary>
                This property contains the number of values in this value set.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet.Tag">
            <summary>
                The property defines an object that the client application can use to
                associate this value set with an object of its choice.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Api.ListItems.IXiDataJournalListItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.ListItems.IXiDataJournalListItem.GetExistingOrNewValueStatusTimestampSet(System.String)">
            <summary>
                This method is used to create a new list of historical values for this historical
                data object.  The values for this list are populated using historical read
                methods defined by the IXIDataJournalList interface.
            </summary>
            <param name="calculationLocalId">
                The type of calculation to be used to create the list of HistoricalValues for this
                data object, as defined by the StandardMib.DataJournalOptions.MathLibrary of the server. This data object may not
                have two value sets with the same CalculationTypeId.
            </param>
            <returns> Returns the newly created list of historical values. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.ListItems.IXiDataJournalListItem.Remove(Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet)">
            <summary>
                This method removes a value set from the historical data object
            </summary>
            <param name="valueStatusTimestampSet"> The value set to remove </param>
        </member>
        <member name="P:Ssz.Xi.Client.Api.ListItems.IXiDataListItem.PreparedForTouch">
            <summary>
                Marked For Touch From Server
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.ListItems.IXiDataListItem.PreparedForWrite">
            <summary>
                Marked For Write to Server
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.ListItems.IXiDataListItem.PreparedForRead">
            <summary>
                Marked For Read From Server
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Api.ListItems.IXiListItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.ListItems.IXiListItem.ResultCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.ListItems.IXiListItem.Obj">
            <summary>
                For use by client code.
            </summary>        
        </member>
        <member name="P:Ssz.Xi.Client.Api.ListItems.IXiListItem.IsInServerList">
            <summary>
                In Server List
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.ListItems.IXiListItem.PreparedForAdd">
            <summary>
                Marked For Add To Server
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.ListItems.IXiListItem.PreparedForRemove">
            <summary>
                Marked For Remove From Server
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.ListItems.IXiListItem.UpdateCount">
            <summary>
                This property provides the number of times this Xi Value
                has been updated with a new value.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.Lists.IXiDataJournalListProxy.ReadJournalDataForTimeInterval(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.IEnumerable{Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet})">
            <summary>
                <para>
                    This method is used to read the historical values that fall between a start and end time for one or more
                    data objects within a specific data journal list.
                </para>
            </summary>
            <param name="firstTimestamp">
                The filter that specifies the first or beginning (of returned list) timestamp for values
                to be returned. Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the
                FilterOperand class. The FilterOperand Operator is used to determine if the returned data should include data
                values the occur exactly at the first or second time stamp. If the equals operator is specified then values that
                occur at the first and second time stamp will be included in the sample set. Any other operator will not include
                first or second time stamped values.
            </param>
            <param name="secondTimestamp">
                The filter that specifies the second or ending (of returned list) timestamp for values
                to be returned. Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the
                FilterOperand class. The FilterOperand Operator is not used.
            </param>
            <param name="numValuesPerDataObject"> The maximum number of values to be returned for each data object. </param>
            <param name="xiValueStatusTimestampSetCollection">
                The list of data objects whose historical values are to be read. Each data
                object is represented by a value set that contains the values selected and returned by the server.
            </param>
        </member>
        <member name="M:Ssz.Xi.Client.Api.Lists.IXiDataJournalListProxy.ReadJournalDataAtSpecificTimes(System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet})">
            <summary>
                This method is used to read the historical values at specific times for
                one or more data objects within a specific data journal list.  If no element exists
                at the specified time in the data journal for an object, the server creates an
                interpolated value for that time and includes it in the response as though it
                actually existed in the journal.
            </summary>
            <param name="timestamps">
                Identifies the timestamps of historical values to be returned for each of the requested data
                objects.
            </param>
            <param name="xiValueStatusTimestampSetList">
                The list of data objects whose historical values are to be read. Each data
                object is represented by a value set that contains the values selected and returned by the server.
            </param>
        </member>
        <member name="M:Ssz.Xi.Client.Api.Lists.IXiDataJournalListProxy.ReadCalculatedJournalData(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet})">
            <summary>
                This method is used to read calculated historical values (e.g. averages or
                interpolations) for one or more data objects within a specific data journal list.
                The time-range used to select the historical values is specified by the client.
                Additionally, the client specifies a calculation period that divides that time
                range into periods. The server calculates a return value for each of these periods.
            </summary>
            <param name="firstTimestamp">
                The filter that specifies the inclusive earliest (oldest) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimestamp">
                The filter that specifies the inclusive newest (most recent) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="calculationPeriod">
                The time span used to divide the specified time range into individual periods for
                which return values are calculated. The specified calculation is performed on the set of historical values of a
                data object that fall within each period.
            </param>
            <param name="xiValueStatusTimestampSetList">
                The list of data objects whose historical values are to be read. Each data
                object is represented by a value set that contains the values calculated and returned by the server.
            </param>
        </member>
        <member name="M:Ssz.Xi.Client.Api.Lists.IXiDataListProxy.EnableListElementUpdating(System.Boolean,System.Collections.Generic.IEnumerable{Ssz.Xi.Client.Api.ListItems.IXiDataListItem})">
            <summary>
                <para>
                    This method is used to enable or disable updating of individual elements of a list. If the
                    dataObjectsToEnableOrDisable parameter is null, then all elements of the list are enabled/disabled. This call
                    does not change the enabled state of the list itself.
                </para>
                <para>
                    When an element of the list is disabled, the server excludes it from participating in callbacks and polls.
                    However, at the option of the server, the server may continue updating its cache for the element.
                </para>
            </summary>
            <param name="enableUpdating">
                Indicates, when TRUE, that updating of the list is to be enabled, and when FALSE, that
                updating of the list is to be disabled.
            </param>
            <param name="dataObjectsToEnableOrDisable"> The list of data objects to be enabled or disabled. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Api.Lists.IXiDataListProxy.CommitTouchDataListItems">
            <summary>
                <para> Returns List Items whose touch failed. </para>
            </summary>
            <returns> List Items whose touch failed. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.Lists.IXiDataListProxy.CommitReadDataListItems">
            <summary>
                <para> Returns List Items whose read failed. </para>
            </summary>
            <returns> List Items whose read failed. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.Lists.IXiDataListProxy.CommitWriteDataListItems">
            <summary>
                <para> Returns List Items whose write failed. </para>
            </summary>
            <returns> List Items whose write failed. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.Lists.IXiDataListProxy.PollDataChanges">
            <summary>
                <para> Throws or returns changed IXiDataListItems (not null, but possibly zero-lenghth). </para>
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.Lists.IXiEventListProxy.ClientTag">
            <summary>
                This property is provided for the Xi Client application to associate this list
                with an object of its choosing.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.Lists.IXiEventListProxy.PollEventChanges(Xi.Contracts.Data.FilterSet)">
            <summary>
                Throws or returns new IXiEventListItems (not null, but possibly zero-lenghth).
            </summary>
            <param name="filterSet"></param>
        </member>
        <member name="E:Ssz.Xi.Client.Api.Lists.IXiEventListProxy.EventMessagesCallbackEvent">
            <summary>
                This event is used to notify the client application when new events are received.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.Lists.IXiEventListProxy.AcknowledgeAlarms(System.String,System.String,System.Collections.Generic.List{Xi.Contracts.Data.EventId})">
            <summary>
                <para>This method is used to acknowledge one or more alarms.</para>
            </summary>
            <param name="operatorName">
                The name or other identifier of the operator who is acknowledging
                the alarm.
            </param>
            <param name="comment">
                An optional comment submitted by the operator to accompany the
                acknowledgement.
            </param>
            <param name="alarmsToAck">
                The list of alarms to acknowledge.
            </param>
            <returns>
                The list EventIds and result codes for the alarms whose
                acknowledgement failed. Returns null if all acknowledgements
                succeeded.
            </returns>
        </member>
        <member name="P:Ssz.Xi.Client.Api.Lists.IXiListProxy`1.ClientTag">
            <summary>
                This property is provided for the Xi Client application to associate this list
                with an object of its choosing.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.Lists.IXiListProxy`1.CommitAddItems">
            <summary>
                Returns list Items than was not added or null.
            </summary>
            <returns> List Items than was not added or null. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.Lists.IXiListProxy`1.CommitRemoveItems">
            <summary>
            </summary>
            <returns> List Items than was not added or null. </returns>
        </member>
        <member name="T:Ssz.Xi.Client.Api.XiCategorySpecificFields">
            <summary>
                This class defines the list of category=specific fields that the client can request the server to add to event
                messages.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiCategorySpecificFields.#ctor(System.UInt32)">
            <summary>
                This constructor creates an empty (no fields) XiCategorySpecificFields instance for the specified category.
            </summary>
            <param name="categoryId"> </param>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiCategorySpecificFields.CategoryId">
            <summary>
                This property identifies the category to which the event message fields belong.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiCategorySpecificFields.OptionalEventMsgFields">
            <summary>
                This property contains the server-specific fields supported for the specified category.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiCategorySpecificFields._categoryId">
            <summary>
                The private representation of the CategoryId property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiCategorySpecificFields._optionalEventMsgFields">
            <summary>
                The private representation of the OptionalEventMsgFields property
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiDataJournalListItemsManager.Subscribe(Ssz.Xi.Client.Api.XiServerProxy)">
            <summary>
                Creates List, adds/removes items.
                No throw.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiDataListItemsManager.Subscribe(Ssz.Xi.Client.Api.XiServerProxy,Ssz.Utils.IDispatcher,Ssz.Xi.Client.Api.XiDataListItemsManager.ElementValuesCallbackEventHandler,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Creates List, adds/removes items.
                No throw.
            </summary>
            <param name="xiServerProxy"></param>
            <param name="сallbackDoer"></param>
            <param name="elementValuesCallbackEventHandler"></param>
            <param name="callbackable"></param>
            <param name="ct"></param>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiDataListItemsManager.PollChanges">
            <summary>        
                No throw. Returns null or changed clientObjs (not null, but possibly zero-lenghth).
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiDataListItemsManager.PollChangesIfNotCallbackable">
            <summary>
                Invokes XiList.PollDataChanges() if XiList Pollable and not Callbackable.
                No throw.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiDataListItemsManager.Write(System.Object[],Ssz.Utils.DataAccess.ValueStatusTimestamp[])">
            <summary>
                Returns clientObjs whose write failed.
                If connection error, no throw and returns all clientObjs.    
            </summary>
            <param name="clientObjs"></param>
            <param name="valueStatusTimestamps"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Xi.Client.Api.XiDataListItemsManager.ElementValuesCallbackEventHandler">
            <summary>
                This delegate defines the callback for reporting data updates to the client application.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiEventListItemsManager.Subscribe(Ssz.Xi.Client.Api.XiServerProxy,Ssz.Utils.IDispatcher,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                No throw.
            </summary>
            <param name="xiServerProxy"></param>
            <param name="сallbackDoer"></param>        
            <param name="callbackable"></param>
            <param name="ct"></param>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiEventListItemsManager.PollChanges">
            <summary>
                If not Pollable, does nothing.
                No throw.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiEventListItemsManager.PollChangesIfNotCallbackable">
            <summary>
                Invokes EventList.PollEventChanges(null) if EventList Pollable and not Callbackable.
                No throw.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiEventListItemsManager.XiSystem">
            <summary>
                Xi Alias
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Api.XiEventMsgFieldDesc">
            <summary>
                This class is used to describe optional, server-specific event message fields supported by the server.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiEventMsgFieldDesc.#ctor(System.String,System.String,Xi.Contracts.Data.TypeId,Xi.Contracts.Data.TypeId)">
            <summary>
                This constructor creates an instance of the event message field.
            </summary>
            <param name="name"> The name of the field. </param>
            <param name="description"> The description of the field </param>
            <param name="objectTypeId"> The object type of the field </param>
            <param name="dataTypeId"> The data type of the field </param>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiEventMsgFieldDesc.Name">
            <summary>
                The display name of the parameter, field, or property.  Names
                are not permitted to contain the forward slash ('/') character.
                This name is used as the FilterOperand in FilterCriterion.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiEventMsgFieldDesc.ObjectTypeId">
            <summary>
                The object type of the field.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiEventMsgFieldDesc.DataTypeId">
            <summary>
                The data type of the field.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiEventMsgFieldDesc.Selected">
            <summary>
                This property indicates, when TRUE, that the field has been selected to be returned in event messages.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiEventMsgFieldDesc.Description">
            <summary>
                The optional description of the field.  Null if unused.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiEventMsgFieldDesc._dataTypeId">
            <summary>
                The private representation of the DataTypeId property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiEventMsgFieldDesc._description">
            <summary>
                The private representation of the Description property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiEventMsgFieldDesc._name">
            <summary>
                The private representation of the Name property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiEventMsgFieldDesc._objectTypeId">
            <summary>
                The private representation of the ObjectTypeId property
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiListItemsManager`2.AddItem(System.String,System.Object)">
            <summary>
                id is not null, valueSubscription is not null
            </summary>
            <param name="id"></param>
            <param name="clientObj"></param>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiListItemsManager`2.RemoveItem(System.Object)">
            <summary>
                valueSubscription is not null
                If valueSubscription is not subscribed - does nothing. 
            </summary>
            <param name="clientObj"></param>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiListItemsManager`2.XiSystem">
            <summary>
                Xi Alias
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiListItemsManager`2.SubscribeInitial">
            <summary>
                Returns whether connection errors occur.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiListItemsManager`2.ClientObjectInfo.#ctor(System.String)">
            <summary>            
            </summary>
            <param name="elementId"></param>
        </member>
        <member name="T:Ssz.Xi.Client.Api.XiServerProxy">
            <summary>
                This class defines the Xi Server entries in the XiClient XiServerList.
                Each XiServer in the list represents an Xi server for which the client application
                can create an XiSubscription.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.Dispose">
            <summary>
                This method disposes of the object.  It is invoked by the client application, client base, or
                the destructor of this object.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.Dispose(System.Boolean)">
            <summary>
                This method disposes of the object.  It is invoked by the parameterless Dispose()
                method of this object.  It is expected that the Xi client application
                will perform a Dispose() on each active context to close the connection with the
                Xi Server.  Failure to perform the close will result in the Xi Context remaining
                active until the application exits.
            </summary>
            <summary>
            </summary>
            <param name="disposing">
                <para>
                    This parameter indicates, when TRUE, this Dispose() method was called directly or indirectly by a user's
                    code. When FALSE, this method was called by the runtime from inside the finalizer.
                </para>
                <para>
                    When called by user code, references within the class should be valid and should be disposed of properly.
                    When called by the finalizer, references within the class are not guaranteed to be valid and attempts to
                    dispose of them should not be made.
                </para>
            </param>
            <returns> Returns TRUE to indicate that the object has been disposed. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.Finalize">
            <summary>
                The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.InitiateXiContext(System.String,System.String,System.String,Ssz.Utils.IDispatcher)">
            <summary>
                This method is used to connect to the server and establish a context with it.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.ConcludeXiContext">
            <summary>
                This method is used to close a context with the server and disconnect the WCF connection.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.NewDataList(System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
                This method creates a new data list for the context.
            </summary>
            <param name="updateRate"> The update rate for the list. </param>
            <param name="bufferingRate"> The buffering rate for the list. 0 if not used. </param>
            <param name="filterSet"> The filter set for the list. Null if not used. </param>
            <returns> Returns the new data list. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.NewEventList(System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
                This method creates a new event list for the context.
            </summary>
            <param name="updateRate"> The update rate for the list. </param>
            <param name="bufferingRate"> The buffering rate for the list. 0 if not used. </param>
            <param name="filterSet"> The filter set for the list. Null if not used. </param>
            <returns> Returns the new data list. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.NewDataJournalList(System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
                This method creates a new data journal (historical data) list for the context.
            </summary>
            <param name="updateRate"> The update rate for the list. </param>
            <param name="bufferingRate"> The buffering rate for the list. 0 if not used. </param>
            <param name="filterSet"> The filter set for the list. Null if not used. </param>
            <returns> Returns the new data list. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.Identify">
            <summary>
                This method returns the ServerDescription retrieved from the server.
            </summary>
            <returns>
                Returns the ServerDescription retrieved from the server. An Exception is thrown if there is no open context
                with the server.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.Status">
            <summary>
                This method is used to get the state of the server, and
                the state of any wrapped servers.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.LookupResultCodes(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
                This method returns text descriptions of result codes.
            </summary>
            <param name="resultCodes"> The result codes for which text descriptions are being requested. </param>
            <returns>
                The list of result codes and if a result code indicates success, the requested text descriptions. The size
                and order of this list matches the size and order of the resultCodes parameter.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.FindObjects(Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
                <para>
                    This method is used to find objects in the server. The client uses the findCriteria parameter to identify a
                    starting branch and a set of filter criteria. It also specifies the maximum number of objects to return.
                </para>
                <para>
                    The server examines the objects that are children of the specified branch and selects those that match the
                    filter criteria. Note that "children" are objects whose root paths can be created by appending their names to
                    the path used to identify the starting branch.
                </para>
                <para>
                    The object attributes of the selected objects are returned to the client. The number returned is limited by
                    the number specified in the numberToReturn parameter. If the number returned is less than than that number,
                    then the client can safely assume that the server has no more to return.
                </para>
                <para>
                    However, if the number returned is equal to that number, then the client can retrieve the next set of
                    results by issuing another FindObjects() call with the findCriteria parameter set to null. A null findCriteria
                    indicates to the server to continue returning results from those remaining in the list. The client eventually
                    detects the end of the list by receiving a response that returns less than specified by the numberToReturn
                    parameter.
                </para>
            </summary>
            <param name="findCriteria">
                The criteria used by the server to find objects. If this parameter is null, then this call
                is a continuation of the previous find.
            </param>
            <param name="numberToReturn"> The maximum number of objects to return in a single response. </param>
            <returns>
                <para> The list of object attributes for the objects that met the filter criteria. </para>
                <para>
                    Returns null if the starting object is a leaf, or no objects were found that meet the filter criteria, or if
                    the call was made with a null findCriteria and there are no more objects to return.
                </para>
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.GetAlarmSummary(Xi.Contracts.Data.InstanceId)">
            <summary>
                This method is used to request summary information for the
                alarms that can be generated for a given event source.
            </summary>
            <param name="eventSourceId"> The InstanceId for the event source for which alarm summaries are being requested. </param>
            <returns> The summaries of the alarms that can be generated by the specified event source. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.LongrunningPassthroughAsync(System.String,System.String,System.Byte[],System.Action{Ssz.Utils.DataAccess.LongrunningPassthroughCallback})">
            <summary>
                Returns true if succeeded.
            </summary>
            <param name="recipientId"></param>
            <param name="passthroughName"></param>
            <param name="dataToSend"></param>
            <param name="callbackAction"></param>
            <returns></returns>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiServerProxy.ServerEntry">
            <summary>
                This property contains the ServerEntry of the server that contains its server discovery URL and
                parameters used by the ClientBase to connect to it.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiServerProxy.ContextOptions_">
            <summary>
                This property contains the context options that are used when connecting to the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiServerProxy.LocaleId">
            <summary>
                This property is the Windows LocaleId (language/culture id) for the context.
                Its default value is automatically set to the LocaleId of the calling client application.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiServerProxy.ContextTimeout">
            <summary>
                This property specifies how long the context will stay alive in the server after a WCF
                connection failure. The ClientBase will attempt reconnection during this period.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiServerProxy.ContextExists">
            <summary>
                This property indicates, when TRUE, that the client has an open context (session) with
                the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiServerProxy.StandardMib">
            <summary>
                This property contains the Standard MIB (Management Information Base) retrieved from the server
                during context establishment.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiServerProxy.KeepAliveSkipCount">
            <summary>
                This property contains the client-requested keepAliveSkipCount for the subscription.
                The server may negotiate this value up or down. The keepAliveSkipCount indicates
                the number of consecutive UpdateRate cycles for a list that occur with nothing to
                send before an empty callback is sent to indicate a keep-alive message. For example,
                if the value of this parameter is 1, then a keep-alive callback will be sent each
                UpdateRate cycle for each list assigned to the callback for which there is nothing
                to send.  A value of 0 indicates that keep-alives are not to be sent for any list
                assigned to the callback.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Api.XiServerProxy.CallbackRate">
            <summary>
                <para>
                    This property indicates the maximum time between callbacks that are sent to the client. The server may
                    negotiate this value up or down, but a null value or a value representing 0 time is not valid.
                </para>
                <para>
                    If there are no callbacks to be sent containing data or events for this period of time, an empty callback
                    will be sent as a keep-alive. The timer for this time-interval starts when the SetCallback() response is
                    returned by the server.
                </para>
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Api.XiServerProxy.ConcludeXiContextInternal">
            <summary>
                This method is used to close a context with the server and disconnect the WCF connection.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiServerProxy._xiServerInfo">
            <summary>
                This data member is the Endpoint Discovery object used to access the server for its
                connection information. The Endpoint Discovery object retrieves the endpoints of the
                server that are used for browsing, reading, writing, and subscribing.  It also sorts
                them into the preferred order of use. For example, if the client and server are on the
                same machine, the netPipe endpoints will sort to the top.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiServerProxy._keepAliveSkipCount">
            <summary>
                This property contains the client-requested keepAliveSkipCount for the subscription.
                The server may negotiate this value up or down. The keepAliveSkipCount indicates
                the number of consecutive UpdateRate cycles for a list that occur with nothing to
                send before an empty callback is sent to indicate a keep-alive message. For example,
                if the value of this parameter is 1, then a keep-alive callback will be sent each
                UpdateRate cycle for each list assigned to the callback for which there is nothing
                to send.  A value of 0 indicates that keep-alives are not to be sent for any list
                assigned to the callback.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiServerProxy._callbackRate">
            <summary>
              This data member is the private representation of the CallbackRate public member.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiServerProxy._contextOptions">
            <summary>
                This data member is the private representation of the ServerOptions public property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiServerProxy._contextTimeout">
            <summary>
              This data member is the private representation of the ContextTimeout public property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiServerProxy._localeId">
            <summary>
                This data member is the private representation of the LocaleId public property. It defaults
                to the locale id of the client application.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Api.XiServerProxy._context">
            <summary>
                This data member is the private representation of the XiContext public property.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.ChannelCloser">
            <summary>
                This class is used to properly close a WCF client proxy.  It aborts or closes
                the proxy based on the channel status and whether an exception is encountered.
                It has two calling methods, one where the proxy has a short life, and the other
                to be used when the proxy is held over the life of a single method.
            </summary>
            <example>
                Usage 1: Short lived proxy
                void SomeMethod()
                {
                SomeWcfProxy proxy = new SomeWcfProxy();
                using (new ChannelCloser(proxy))
                {
                proxy.MakeCall();
                ...
                }
                }
                Usage 2: Long lived proxy
                void CreateProxy()
                {
                SomeWcfProxy proxy = new SomeWcfProxy();
                ...
                }
                void DestroyProxy()
                {
                ChannelCloser.Close(proxy);
                }
            </example>
        </member>
        <member name="M:Ssz.Xi.Client.ChannelCloser.#ctor(System.Object)">
            <summary>
                Constructs a WCF channel closer object
            </summary>
            <param name="channelObj">WCF proxy object</param>
        </member>
        <member name="M:Ssz.Xi.Client.ChannelCloser.Dispose">
            <summary>
                Properly releases and closes the held WCF proxy
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.ChannelCloser.Close(System.Object)">
            <summary>
                This method closes the passed proxy object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.Context.XiContext">
            <summary>
                This partial class defines the Context Management related aspects of the XiContext class.  Two
                static Initiate() methods are defined to create and establish a new context with the Xi server,
                one that in which the calling client application supplies the user credentials, and one in which
                the ClientBase calls into the Xi Client Credentials Project.Current for the user credentials when necessary.
            </summary>
            <summary>
                This partial class defines the Alarms and Events related aspects of the XiContext class.
            </summary>
            <summary>
                This partial class defines the Endpoint Management related aspects of the XiContext class.
            </summary>
            <summary>
                This partial class defines the List Management aspects of the XiContext
            </summary>
            <summary>
                This partial class defines the IRead related aspects of the XiContext class.
            </summary>
            <summary>
                This partial class defines the Callback and Polling related aspects of the XiContext class.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.#ctor(Ssz.Xi.Client.Internal.XiServerInfo,System.ServiceModel.Description.ServiceEndpoint,System.UInt32,System.UInt32,System.UInt32,System.String,System.String,System.UInt32,System.TimeSpan,Ssz.Utils.IDispatcher)">
            <summary>
                <para>
                    This method is invoked to create an instance of the XiContext class. The XiContext class implements the
                    IXiContext interface. This call establishes the Xi with the server for the calling client application. This
                    method accepts the user connection info (credentials) to be used to connect to the server from the caller.
                </para>
                <para> This constructor should only be called by the static Initiate() methods. </para>
            </summary>
            <param name="resourceManagementServiceEndpoint"></param>
            <param name="contextTimeout">
                This parameter supplies an Xi Server context timeout in milliseconds. The Xi ClientBase
                limits this to be not less than seven seconds or greater than thirty minutes.
            </param>
            <param name="contextOptions">
                This parameter enables various debug and tracing options used to aide in diagnosing
                issues. See ContextOptions enum for the valid values.
            </param>
            <param name="localeId"> The localed id requested to be used for the context. </param>
            <param name="callbackRate"></param>
            <param name="applicationName"></param>
            <param name="workstationName"></param>
            <param name="xiServerInfo"></param>
            <param name="keepAliveSkipCount"></param>
            <param name="xiCallbackDoer"></param>
            <returns>
                An instance of the XiContext class is returned to the client. The client then uses this instance for further
                interactions with the Xi Server.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.Dispose">
            <summary>
                This method disposes of the object.  It is invoked by the client application, client base, or
                the destructor of this object.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.Dispose(System.Boolean)">
            <summary>
                This method disposes of the object.  It is invoked by the parameterless Dispose()
                method of this object.  It is expected that the Xi client application
                will perform a Dispose() on each active context to close the connection with the
                Xi Server.  Failure to perform the close will result in the Xi Context remaining
                active until the application exits.
            </summary>
            <summary>
            </summary>
            <param name="disposing">
                <para>
                    This parameter indicates, when TRUE, this Dispose() method was called directly or indirectly by a user's
                    code. When FALSE, this method was called by the runtime from inside the finalizer.
                </para>
                <para>
                    When called by user code, references within the class should be valid and should be disposed of properly.
                    When called by the finalizer, references within the class are not guaranteed to be valid and attempts to
                    dispose of them should not be made.
                </para>
            </param>
            <returns> Returns TRUE to indicate that the object has been disposed. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.Finalize">
            <summary>
                The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.LookUpContext(System.String)">
            <summary>
                This method is invoked to find a context in the static StaticActiveContexts dictionary for a specified context id.
            </summary>
            <param name="contextId"> The context to look up. </param>
            <returns> The context if found, otherwise null. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.RaiseContextNotifyEvent(System.Object,Ssz.Xi.Client.Internal.XiContextNotificationData)">
            <summary>
                This method is called by the ClientBase to notify the client application of context events.
            </summary>
            <param name="sender"> The calling object. </param>
            <param name="contextNotificationData"> The notification parameters. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.Identify">
            <summary>
                <para>
                    This method is used to get the description of the server. This method can be called before a context has
                    been established with the server.
                </para>
            </summary>
            <returns> The description of the server. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.Status">
            <summary>
                This method is used to get the state of the server, and
                the state of any wrapped servers.
            </summary>
            <returns> The status of the Xi server and the status of wrapped servers. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.LookupResultCodes(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
                <para> This method returns text descriptions of error codes. </para>
            </summary>
            <param name="resultCodes"> The result codes for which text descriptions are being requested. </param>
            <returns>
                The list of result codes and if a result code indicates success, the requested text descriptions. The size
                and order of this list matches the size and order of the resultCodes parameter.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.FindObjects(Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
                <para>
                    This method is used to find objects in the server. The client uses the findCriteria parameter to identify a
                    starting branch and a set of filter criteria. It also specifies the maximum number of objects to return.
                </para>
                <para>
                    The server examines the objects that are children of the specified branch and selects those that match the
                    filter criteria. Note that "children" are objects whose root paths can be created by appending their names to
                    the path used to identify the starting branch.
                </para>
                <para>
                    The object attributes of the selected objects are returned to the client. The number returned is limited by
                    the number specified in the numberToReturn parameter. If the number returned is less than than that number,
                    then the client can safely assume that the server has no more to return.
                </para>
                <para>
                    However, if the number returned is equal to that number, then the client can retrieve the next set of
                    results by issuing another FindObjects() call with the findCriteria parameter set to null. A null findCriteria
                    indicates to the server to continue returning results from those remaining in the list. The client eventually
                    detects the end of the list by receiving a response that returns less than specified by the numberToReturn
                    parameter.
                </para>
            </summary>
            <param name="findCriteria">
                The criteria used by the server to find objects. If this parameter is null, then this call
                is a continuation of the previous find.
            </param>
            <param name="numberToReturn"> The maximum number of objects to return in a single response. </param>
            <returns>
                <para> The list of object attributes for the objects that met the filter criteria. </para>
                <para>
                    Returns null if the starting object is a leaf, or no objects were found that meet the filter criteria, or if
                    the call was made with a null findCriteria and there are no more objects to return.
                </para>
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.GetStandardMib">
            <summary>
                This method is used to read the standard MIB.
            </summary>
            <returns> The standard MIB is returned. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.KeepContextAlive(System.DateTime)">
            <summary>
                This method is used to
                keep the context alive.
            </summary>
        </member>
        <member name="E:Ssz.Xi.Client.Internal.Context.XiContext.ContextNotifyEvent">
            <summary>
                This event is used to notify the ClientBase user of events that occur within the ClientBase.
                Caution: Be sure to disconnect the event handler prior to returning.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.ContextId">
            <summary>
                This property is the server-unique identifier of the context. It is returned by the server
                when the client application creates the context.        
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.LocaleId">
            <summary>
                The Windows LocaleId (language/culture id) for the context.  Its default value
                is automatically set to the LocaleId of the calling client application.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.Binding">
            <summary>
                The type of the binding used to connect to the server.
                Obtained using GetType().ToString() on the binding.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.ContextOptions">
            <summary>
                The ContextOptions for this context. See Contracts.Constants.ContextOptions for standard values.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.ApplicationName">
            <summary>
                The name of the client application exe.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.WorkstationName">
            <summary>
                The name of the client workstation.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.ResourceManagement">
            <summary>
                This property is the Resource Management Interface used to access IResourceManagement methods on the server
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.ResourceManagementServiceEndpoint">
            <summary>
                The publically visible Resource Management ServiceEndpoint connected to the server
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.ReInitiateKey">
            <summary>
                A unique clientListId used to identify a client context when re-initiating a context.
                This clientListId is provided to prevent interlopers from using a ContextId that they
                obtain by watching watching unencrypted Xi Endpoint traffic.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.ContextTimeout">
            <summary>
                The publically visible context timeout provided to the server (in msecs). If the server fails to
                receive a call from the client for this period, it will close the context.
                Within this time period, if there was a communications failure, the client can
                attempt to ReInitiate the connection with the server for this context.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.ServerContextIsClosing">
            <summary>
                Inidicates, when TRUE, that the context is closing or has completed closing
                and will not accept any more requests on the context.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.ServerDiscoveryUri">
            <summary>
                The URI that contains the ServerDiscoveryUrl used to get the ServerEntry from the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.ServerEntry">
            <summary>
                This property contains the ServerEntry for the server to which this context is connected.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.StandardMib">
            <summary>
                This property is the standard MIB of the server.  This property is retrieved from the server during establishment
                of the context.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.GetStandardMibInternal">
            <summary>
                This method is used to read the standard MIB.
            </summary>
            <returns> The standard MIB is returned. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.ValidateServerContextTimeout(System.UInt32)">
            <summary>
                <para>
                    This method is invoked to ensure that the inactivity timeout to be used for the context falls within
                    prescribed limits (is not too short or too long). If the timeout period supplied in the call is outside one of
                    these limits, this method returns the limit that was exceeded as timeout to use.
                </para>
                <para> The maximum value for the context timeout is 30 minutes. </para>
                <para>
                    The minimum value for the context timeout is 2 times the keep-alive timer period plus the time it takes WCF
                    to detect and report a communications failure. This should allow the client base to detect a failure and
                    respond to it before the context times out in the server
                </para>
                <para> Note that the keep-alive logic will send a keep alive one keep-alive timer period prior to this timeout. </para>
            </summary>
            <param name="serverContextTimeoutInMs">
                The inactivity timeout period of the context. This is the same value used by
                the server to time out and close the context for inactivity.
            </param>
            <returns> The context timeout to use. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.IsServerShutdownOrNoContextServerFault(System.ServiceModel.FaultException{Xi.Contracts.Data.XiFault})">
            <summary>
                This method checks the exception and notifies the client application using the Abort
                callback if the server has shutdown or if the context is not open in the server.
            </summary>
            <param name="fe"> The exception to check </param>
            <returns> Returns TRUE if the server has shutdown or the context is not open in the server. Otherwise FALSE. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.ProcessRemoteMethodCallException(System.Exception)">
            <summary>
                <para> Re throws. </para>
                <para>
                    This method processes an exception thrown when the client application calls one of the methods on the
                    IResourceManagment interface.
                </para>
                <para>
                    If the exception is a FaultException, the exception is from the server and is rethrown unless the exception
                    indicates that the server has shutdown. In this case the Abort callback is called to notify the client of the
                    shutdown.
                </para>
                <para>
                    If the exception is a CommunicationException, then the ThrowOnDisconnectedEndpoint() method is called on the
                    ResourceManagment endpoint to throw the exception back to the calling client application to notify it of the
                    failed endpoint.
                </para>
                <para> For all other exceptions, the exception is rethrown. </para>
            </summary>
            <param name="ex"> The exception that was thrown. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.KeepEndpointsAlive(System.DateTime)">
            <summary>
                This method keeps the endpoints of the context alive, but only if the ResourceManagment
                endpoint is connected to the server
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext.StaticActiveContexts">
            <summary>
                This static data member contains the dictionary of all contexts defined for this instance of the Client Base.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._xiServerInfo">
            <summary>
                This data member is the Endpoint Discovery object used to access the server for its
                connection information. The Endpoint Discovery object retrieves the endpoints of the
                server that are used for browsing, reading, writing, and subscribing.  It also sorts
                them into the preferred order of use. For example, if the client and server are on the
                same machine, the netPipe endpoints will sort to the top.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._serverKeepAliveSkipCount">
            <summary>
                This property contains the client-requested keepAliveSkipCount for the subscription.
                The server may negotiate this value up or down. The keepAliveSkipCount indicates
                the number of consecutive UpdateRate cycles for a list that occur with nothing to
                send before an empty callback is sent to indicate a keep-alive message. For example,
                if the value of this parameter is 1, then a keep-alive callback will be sent each
                UpdateRate cycle for each list assigned to the callback for which there is nothing
                to send.  A value of 0 indicates that keep-alives are not to be sent for any list
                assigned to the callback.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._serverCallbackRate">
            <summary>
                <para>
                    This property indicates the maximum time between callbacks that are sent to the client. The server may
                    negotiate this value up or down, but a null value or a value representing 0 time is not valid.
                </para>
                <para>
                    If there are no callbacks to be sent containing data or events for this period of time, an empty callback
                    will be sent as a keep-alive. The timer for this time-interval starts when the SetCallback() response is
                    returned by the server.
                </para>
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._disposed">
            <summary>
                This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._applicationName">
            <summary>
                This data member represents the ApplicationName public property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._contextId">
            <summary>
                This data member is the private representation of the ContextId interface property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._workstationName">
            <summary>
                This data member represents the WorkstationName public property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._contextOptions">
            <summary>
                This data member represents the ContextOptions public property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._iResourceManagement">
            <summary>
                The private representation of the IResourceManagement public property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._localeId">
            <summary>
                This data member is the private representation of the LocaleId interface property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._connectedResourceManagementServiceEndpoint">
            <summary>
                The private representation of the ResourceManagementServiceEndpoint public property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._serverContextTimeoutInMs">
            <summary>
                This data member is the private representation of the public ContextIimeout property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._resourceManagementLastCallUtc">
            <summary>
                The time of receipt of the response to the last successful IResourceManagement call.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._reInitiateKey">
            <summary>
                This data member is the private representation of the public ReInitateKey property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._serverDescription">
            <summary>
                This data member contains the Server Description for this Xi Context.  Is set by
                the Identify() method during context establishment.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._serverStatusList">
            <summary>
                The status of the server
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._standardMib">
            <summary>
                This data member is the private representation of the StandardMib interface property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._serverContextIsClosing">
            <summary>
                Inidicates, when TRUE, that the context is closing or has completed closing
                and will not accept any more requests on the context.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext.KeepAliveIntervalMs">
            <summary>
                The time interval that controls when ClientKeepAlive messages are
                sent to the server.  If no IResourceManagement messages are sent to
                the server for this period of time, a ClientKeepAlive message is
                sent.  The value is expressed in milliseconds.  This value is the
                same for all contexts.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext.KeepAliveTimerPeriodInMs">
            <summary>
                The frequency, in milliseconds, for firing the _keepAliveTimer
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext.TimeToRecoverCommunicationsInMs">
            <summary>
                The estimated time for the underlying communications problem to recover.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext.WcfFailedCommsExceptionTimeInMs">
            <summary>
                The estimated time for WCF to detect and call the Exception for failed
                communications with the server. This time should be set to a time period
                to cover worst case detection time.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.GetAlarmSummary(Xi.Contracts.Data.InstanceId)">
            <summary>
                <para>
                    This method is used to request summary information for the alarms that can be generated for a given event
                    source.
                </para>
            </summary>
            <param name="eventSourceId"> The InstanceId for the event source for which alarm summaries are being requested. </param>
            <returns> The summaries of the alarms that can be generated by the specified event source. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.OpenEndpointForContract(System.String)">
            <summary>
                This method is used to open access to an Xi Read, Write, Poll, or Callback endpoint in the server.
                If opened, does nothing.
            </summary>
            <param name="contractType">
                The name of the type of Xi Contract (IRead, IWrite, IPoll, ICallback). E.g contractType =
                typeof(IRead).Name;
            </param>
            <returns> Returns a reference to the endpoint that was opened. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.GetEndpointByContract(System.String)">
            <summary>
                This method is used to get the endpoint that implements the specified contractTypeName type.
            </summary>
            <param name="contractTypeName"> The contractTypeName type obtained using the typeof() method. (e.g. typeof(IRead)) </param>
            <returns> Returns the requested endpoint if successful, otherwise null. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.CloseEndpoint(System.String)">
            <summary>
                This method is used to close an endpoint.
            </summary>
            <param name="endpointId"> The endpoint to close. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.AddListToEndpoint(System.UInt32,System.String)">
            <summary>
                This method adds a list to an endpoint.
            </summary>
            <param name="serverListId"> The identifier of the list to add to the endpoint. </param>
            <param name="endpointId"> A string value that uniquely identifies the endpoint to which the list is to be added. </param>
            <returns>
                The list identifier and result code for the list whose add failed. Returns null if the add succeeded. Throws
                a fault if the specified context could not be found.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.RemoveListFromEndpoint(System.UInt32,System.String)">
            <summary>
                This method removes (deassigns) a list from an endpoint.
            </summary>
            <param name="serverListId"> The server identifier of the list to remove. </param>
            <param name="endpointId"> The server identifier of the endpoint. </param>
            <returns> The result code. See XiFaultCodes class for standardized result codes. </returns>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.SendTimeout">
            <summary>
                This property is the WCF channel send timeout for all endpoints used by this context.  It defines
                how long the channel will wait for a response. It should be longer than the context timeout to make
                the keep-alive mechanism to work properly.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.ReadEndpoint">
            <summary>
                This property is the endpoint used to access IRead methods on the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.WriteEndpoint">
            <summary>
                This property is the endpoint used to access IWrite methods on the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.PollEndpoint">
            <summary>
                This property is the endpoint used to access IPoll methods on the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.CallbackEndpoint">
            <summary>
                This property is the endpoint used to access IRegisterForCallback methods on the server
                and receive ICallback methods from the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Context.XiContext.SubscribeEndpointClass">
            <summary>
                This property indicates the type of endpoint (either poll or callback)
                that has been opened for subscriptions.  Null if neither has been opened.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.OpenEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
                <para>
                    This method opens an endpoint that can be used to access one or more lists. Each newly opened endpoint is
                    assigned its own unique identifier. It may be that the server supports only one endpoint of each type (e.g.
                    Read). In this case a second attempt to open a Read endpoint will succeed and the EndpointId of the already
                    opened Read endpoint will be returned.
                </para>
            </summary>
            <param name="serviceEndpoint">
                The serviceEndpoint of the endpoint to be opened. ServiceEndpoints are retrieved from
                the server by the DiscoverServer() method.
            </param>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._sendTimeout">
            <summary>
                This data member is the private representation of the SendTimeout interface property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext.ReceiveTimeout">
            <summary>
                The private receive timeout for all endpoints used by all contexts.
                This timeout is not used on the client side according to Microsoft documentation, but is
                defined because it is part of the setup of the WCF channel.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._callbackEndpoint">
            <summary>
                The private representation of the CallbackEndpoint interface property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._pollEndpoint">
            <summary>
                The private representation of the PollEndpoint interface property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._readEndpoint">
            <summary>
                The private representation of the ReadEndpoint interface property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._writeEndpoint">
            <summary>
                The private representation of the WriteEndpoint interface property
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.DefineList(Ssz.Xi.Client.Internal.Lists.XiListRoot,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
                This method is used to create a Xi List of one of the four supported list types.
                Which are:
                1) DataList - used to maintain a list of active process values.
                2) DataJournalList - used to obtain a historical list of process values.
                3) EventList - used to obtain process events as they occur.
                4) EventJournalList - used to obtain a historical list of process events.
            </summary>
            <param name="xiList"> The list to be created. </param>
            <param name="updateRate">
                The requested update rate in milliseconds for the list. The update rate indicates how often
                the server updates the values of elements in the list. A value of 0 indicates that updating is exception-based. The
                server may negotiate this value, up or down as necessary to support its efficient operation.
            </param>
            <param name="bufferingRate">
                <para>
                    An optional-use parameter that indicates that the server is to buffer data updates, rather than overwriting
                    them, until either the time span defined by the buffering rate expires or the values are transmitted to the
                    client in a callback or poll response. If the time span expires, then the oldest value for a data object is
                    discarded when a new value is received from the underlying system.
                </para>
                <para>
                    The value of the bufferingRate is set to 0 to indicate that it is not to be used and that new values
                    overwrite (replace) existing cached values.
                </para>
                <para>
                    When used, this parameter contains the client-requested buffering rate, which the server may negotiate up or
                    down, or to 0 if the server does not support the buffering rate.
                </para>
                <para> The FeaturesSupported member of the StandardMib is used to indicate server support for the buffering rate. </para>
            </param>
            <param name="filterSet"> The set of filters to be used to select the elements of the list. </param>
            <returns> The attributes created for the list. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.RemoveList(Ssz.Xi.Client.Internal.Lists.XiListRoot)">
            <summary>
                This method deletes a list from the Xi Server.
            </summary>
            <param name="xiList"> The list to deleted </param>
            <returns> The results of the deletion. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.GetListAttributes(System.UInt32)">
            <summary>
                This method gets the attributes of a Xi List.
            </summary>
            <param name="serverListId"> The server id for the list </param>
            <returns> The requested list attributes </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.AddDataObjectsToList(System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.ListInstanceId})">
            <summary>
                <para>
                    This method is used to add objects to a list. Objects are added with updating of their values by the server
                    disabled. Updating of values by the server can be enabled using the EnableListUpdating() method.
                </para>
                <para>
                    For performance reasons, data objects should not be added one at a time by clients. Clients should, instead,
                    create a list of data objects and submit them all together to be added to the data list.
                </para>
            </summary>
            <param name="serverListId"> The server identifier for the list to which data objects are to be added. </param>
            <param name="dataObjectsToAdd"> The data objects to add. </param>
            <returns>
                The list of results. The size and order of this list matches the size and order of the objectsToAdd
                parameter.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.RemoveDataObjectsFromList(System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
                <para>
                    This method is used to remove members from a list. It does not, however, delete the corresponding data
                    object from the server.
                </para>
            </summary>
            <param name="serverListId"> The server identifier for the list from which data objects are to be removed. </param>
            <param name="serverAliasesToRemove"> The server aliases of the data objects to remove. </param>
            <returns>
                The list identifiers and result codes for data objects whose removal failed. Returns null if all removals
                succeeded.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.ModifyListAttributes(System.UInt32,System.Nullable{System.UInt32},System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet)">
            <summary>
                This method is used to change the update rate, buffering rate, and/or
                filter set of a list.  The new value replace the old values if they exist.
            </summary>
            <param name="serverListId"> The seerver identifier for the list for which the filters are to be changed. </param>
            <param name="updateRate">
                The new update rate of the list. The server will negotiate this rate to one that it can
                support. GetListAttributes can be used to obtain the current value of this parameter. Null if the update rate is
                not to be updated.
            </param>
            <param name="bufferingRate">
                The new buffering rate of the list. The server will negotiate this rate to one that it can
                support. GetListAttributes can be used to obtain the current value of this parameter. Null if the buffering rate is
                not to be updated.
            </param>
            <param name="filterSet">
                The new set of filters. The server will negotiate these filters to those that it can support.
                GetListAttributes can be used to obtain the current value of this parameter. Null if the filters are not to be
                updated.
            </param>
            <returns>
                The revised update rate, buffering rate, and filter set. Attributes that were not updated are set to null in
                this response.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.EnableListUpdating(System.UInt32,System.Boolean)">
            <summary>
                <para>
                    This method is used to enable or disable updating of an entire list. When this method is called, the enabled
                    state of the list is changed, but the enabled state of the individual elements of the list is unchanged.
                </para>
                <para>
                    When a list is disabled, the server excludes it from participating in callbacks and polls. However, at the
                    option of the server, the server may continue updating its cache for the elements of the list.
                </para>
            </summary>
            <param name="serverListId"> The identifier for the list for which updating is to be enabled or disabled. </param>
            <param name="enableUpdating">
                Indicates, when TRUE, that updating of the list is to be enabled, and when FALSE, that
                updating of the list is to be disabled.
            </param>
            <returns> The attributes of the list. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.EnableListElementUpdating(System.UInt32,System.Boolean,System.Collections.Generic.List{System.UInt32})">
            <summary>
                <para>
                    This method is used to enable or disable updating of individual entries of a list. If the server aliases
                    parameter is null, then all entries of the list are enabled/disabled. This call does not change the enabled
                    state of the list itself.
                </para>
                <para>
                    When an element of the list is disabled, the server excludes it from participating in callbacks and polls.
                    However, at the option of the server, the server may continue updating its cache for the element.
                </para>
            </summary>
            <param name="serverListId"> The identifier for the list for which updating is to be enabled or disabled. </param>
            <param name="enableUpdating">
                Indicates, when TRUE, that updating of the list is to be enabled, and when FALSE, that
                updating of the list is to be disabled.
            </param>
            <param name="serverAliases">
                The list of aliases for data objects of a list for which updating is to be enabled or
                disabled. When this value is null updating all elements of the list are to be enabled/disabled. In this case,
                however, the enable/disable state of the list itself is not changed.
            </param>
            <returns>
                <para>
                    Returns null if the server was able to successfully enable/disable the the specified elements for the
                    specified list. If not, returns the client and server aliases and result codes for the data objects that could
                    not be enabled/disabled.
                </para>
                <para> Throws an exception if the specified context or list could not be found. </para>
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.AddEventMessageFields(System.UInt32,System.UInt32,System.Collections.Generic.IEnumerable{Xi.Contracts.Data.TypeId})">
            <summary>
                This method is used to request that category-specific fields be
                included in event messages generated for alarms and events of
                the category for the specified Event/Alarm List.
            </summary>
            <param name="serverListId"> The server identifier for the list for which event message fields are being added. </param>
            <param name="categoryId"> The category for which event message fields are being added. </param>
            <param name="fieldObjectTypeIds">
                The list of category-specific fields to be included in the event messages generated
                for alarms and events of the category. Each field is identified by its ObjectType LocalId obtained from the
                EventMessageFields contained in the EventCategoryConfigurations Standard MIB element.
            </param>
            <returns>
                The ObjectTypeIds and result codes for the fields that could not be added to the event message. Returns null
                if all succeeded.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.TouchDataObjects(System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
                <para>
                    This method is used to cause one or more data objects of a list to be "touched". Data objects that are in
                    the disabled state (see the EnableListElementUpdating() method) are not affected by this method. This method
                    cannot be used with event lists.
                </para>
                <para>
                    Touching an enabled data object causes the server to update the data object, mark it as changed (even if
                    their values did not change), and then return it to the client in the next callback or poll.
                </para>
            </summary>
            <param name="serverListId"> The identifier for the lists whose data objects are to be touched. </param>
            <param name="serverAliases"> The aliases for the data objects to touch. </param>
            <returns>
                The list of error codes for the data objects that could not be touched. See XiFaultCodes claass for
                standardized result codes. Data objects that were successfully touched are not included in this list.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.TouchList(System.UInt32)">
            <summary>
                <para> This method is used to cause a list to be "touched". </para>
                <para>
                    For lists that contain data objects, this method causes the server to update all data objects in the list
                    that are currently enabled (see the EnableListElementUpdating() method), mark them as changed (even if their
                    values did not change), and then return them all to the client in the next callback or poll.
                </para>
                <para>
                    For lists that contain events, this method causes the server to mark all alarms/event in the list as
                    changed, and then return them all to the client in the next callback.
                </para>
            </summary>
            <param name="serverListId"> The identifier for the list to be touched. </param>
            <returns> The result code for the operation. See XiFaultCodes class for standardized result codes. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.GetDataList(System.UInt32)">
            <summary>
                This method returns the list with the specified Client List Id
            </summary>
            <param name="clientListId"> The client list id </param>
            <returns> The specified list </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.GetDataListJournal(System.UInt32)">
            <summary>
                This method returns the list with the specified Client List Id
            </summary>
            <param name="clientListId"> The client list id </param>
            <returns> The specified list </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.GetEventList(System.UInt32)">
            <summary>
                This method returns the list with the specified Client List Id
            </summary>
            <param name="clientListId"> The client list id </param>
            <returns> The specified list </returns>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Context.XiContext._lists">
            <summary>
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.ReadData(System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
                <para>
                    This method is used to read the values of one or more data objects in a list. It is also used as a
                    keep-alive for the read endpoint by setting the listId parameter to 0. In this case, null is returned
                    immediately.
                </para>
            </summary>
            <param name="serverListId">
                The server identifier of the list that contains data objects to be read. Null if this is a
                keep-alive.
            </param>
            <param name="serverAliases"> The server aliases of the data objects to read. </param>
            <returns>
                <para>
                    The list of requested values. Each value in this list is identified by its client alias. If the server alias
                    for a data object to read was not found, an ErrorInfo object will be returned that contains the server alias
                    instead of a value, status, and timestamp.
                </para>
                <para> Returns null if this is a keep-alive. </para>
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.ReadJournalDataForTimeInterval(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
                <para>
                    This method is used to read the historical values that fall between a start and end time for one or more
                    data objects within a specific data journal list.
                </para>
            </summary>
            <param name="serverListId">
                The server identifier of the list that contains data objects whose historical values are to
                be read.
            </param>
            <param name="firstTimestamp">
                The filter that specifies the first or beginning (of returned list) timestamp for values
                to be returned. Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the
                FilterOperand class. The FilterOperand Operator is used to determine if the returned data should include data
                values the occur exactly at the first or second time stamp. If the equals operator is specified then values that
                occur at the first and second time stamp will be included in the sample set. Any other operator will not include
                first or second time stamped values.
            </param>
            <param name="secondTimestamp">
                The filter that specifies the second or ending (of returned list) timestamp for values
                to be returned. Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the
                FilterOperand class. The FilterOperand Operator is not used.
            </param>
            <param name="numValuesPerAlias"> The maximum number of JournalDataReturnValues to be returned per alias. </param>
            <param name="serverAliases"> The list of server aliases for the data objects whose historical values are to be read. </param>
            <returns> The list of requested historical values, or the reason they could not be read. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.ReadJournalDataAtSpecificTimes(System.UInt32,System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{System.UInt32})">
            <summary>
                <para>
                    This method is used to read the historical values at specific times for one or more data objects within a
                    specific data journal list. If no item exists at the specified time in the data journal for an object, the
                    server creates an interpolated value for that time and includes it in the response as though it actually
                    existed in the journal.
                </para>
            </summary>
            <param name="serverListId">
                The server identifier of the list that contains data objects whose historical values are to
                be read.
            </param>
            <param name="timestamps">
                Identifies the timestamps of historical values to be returned for each of the requested data
                objects.
            </param>
            <param name="serverAliases"> The list of server aliases for the data objects whose historical values are to be read. </param>
            <returns> The list of requested historical values, or the reason they could not be read. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.ReadJournalDataChanges(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
                <para>
                    This method is used to read changed historical values for one or more data objects within a specific data
                    journal list. Changed historical values are those that were entered into the journal and then changed
                    (corrected) by an operator or other user.
                </para>
            </summary>
            <param name="serverListId">
                The server identifier of the list that contains data objects whose historical values are to
                be read.
            </param>
            <param name="firstTimestamp">
                The filter that specifies the inclusive earliest (oldest) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimestamp">
                The filter that specifies the inclusive newest (most recent) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="serverAliases"> The list of server aliases for the data objects whose historical values are to be read. </param>
            <param name="numValuesPerAlias"> The maximum number of JournalDataChangedValues to be returned per alias. </param>
            <returns>
                The list of requested historical values, or the reason they could not be read. If, however, the number
                returned for any alias is equal to numValuesPerDataObject, then the client should issue a
                ReadJournalDataChangesNext() to retrieve any remaining values.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.ReadCalculatedJournalData(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Xi.Contracts.Data.AliasAndCalculation})">
            <summary>
                <para>
                    This method is used to read calculated historical values (e.g. averages or interpolations) for one or more
                    data objects within a specific data journal list. The time-range used to select the historical values is
                    specified by the client. Additionally, the client specifies a calculation period that divides that time range
                    into periods. The server calculates a return value for each of these periods.
                </para>
            </summary>
            <param name="serverListId">
                The server identifier of the list that contains data objects whose historical values are to
                be read.
            </param>
            <param name="firstTimestamp">
                The filter that specifies the inclusive earliest (oldest) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimestamp">
                The filter that specifies the inclusive newest (most recent) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="calculationPeriod">
                The time span used to divide the specified time range into individual periods for
                which return values are calculated. The specified calculation is performed on the set of historical values of a
                data object that fall within each period.
            </param>
            <param name="serverAliasesAndCalculations">
                The list of server aliases for the data objects whose historical values are
                to be calculated, and the calculation to perform for each.
            </param>
            <returns>
                The set of calculated values. There is one value for each calculation period within the specified time range
                for each specific data object.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.ReadJournalDataProperties(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
                This method reads the properties associated with a historized data object.
            </summary>
            <param name="serverListId">
                The server identifier of the list that contains data objects whose property values are to
                be read.
            </param>
            <param name="firstTimestamp">
                The filter that specifies the inclusive earliest (oldest) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimestamp">
                The filter that specifies the inclusive newest (most recent) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="serverAlias"> The server alias of the data object whose property values are to be read. </param>
            <param name="propertiesToRead">
                The TypeIds of the properties to read. Each property is identified by its property
                type.
            </param>
            <returns> The array of requested property values. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.PollDataChanges(Ssz.Xi.Client.Internal.Lists.XiDataList)">
            <summary>
                <para> Throws or returns changed IXiDataListItems (not null, but possibly zero-lenghth). </para>
                <para> dataList is not null </para>
                <para>
                    This method is used to poll the endpoint for changes to a specific data list. It is also used as a
                    keep-alive for the poll endpoint by setting the listId parameter to 0. In this case, null is returned
                    immediately.
                </para>
                <para> Changes consists of: </para>
                <para> 1) values for data objects that were added to the list, </para>
                <para>
                    2) values for data objects whose current values have changed since the last time they were reported to the
                    client via this interface. If a deadband filter has been defined for the list, floating point values are not
                    considered to have changed unless they have changed by the deadband amount.
                </para>
                <para> 3) historical values that meet the list filter criteria, including the deadband. </para>
                <para>
                    This method returns the list of changed values to the client application using the ElementValuesCallback
                    callback.. The list of changed values is null if this is a keep-alive. The following two standard data objects
                    can also be returned.
                </para>
                <para>
                    The first is identified by a ListId of 0 and a ClientId of 0. It contains a ServerStatus object value that
                    indicates to the client that the server or one of its wrapped servers is shutting down. When present, this will
                    always be the first value in the returned OBJECT value array.
                </para>
                <para>
                    The second is identified by its ListId and a ClientId of 0. It contains a UInt32 value that indicates to the
                    client how many data changes have been discarded for the specified list since the last poll response. If this
                    condition persists, the client should increase its poll frequency. When present, this will always be the first
                    value in the returned UINT value array.
                </para>
            </summary>
            <param name="dataList"> The data list to poll. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.PollEventChanges(Ssz.Xi.Client.Internal.Lists.XiEventList,Xi.Contracts.Data.FilterSet)">
            <summary>
                <para> Throws or returns new IXiEventListItems (not null, but possibly zero-lenghth). </para>
                <para> eventList is not null </para>
                <para>
                    This method is used to poll the endpoint for changes to a specific event list. Event messages are sent when
                    there has been a change to the specified event list. A new alarm or event that has been added to the list, a
                    change to an alarm already in the list, or the deletion of an alarm from the list constitutes a change to the
                    list.
                </para>
                <para>
                    Once an event has been reported from the list, it is automatically deleted from the list. Alarms are only
                    deleted from the list when they transition to inactive and acknowledged.
                </para>
                <para>
                    This method return a list of event messages to the client application via the EventMessagesCallback callback
                    method. The list consists of alarm/event messages for new alarms/events in the Event List, and alarm/event
                    messages that represent state changes to alarms that are already in the list, including alarm/event messages
                    that identify state changes that caused alarms to tbe deleted from the list.
                </para>
                <para>
                    Null is returned as a keep-alive message when there have been no new alarm/event messages since the last
                    poll.
                </para>
                <para>
                    In addition, a special event message is included as the first item in the list to indicate to the client
                    that one or more event message have been discarded due to queue size limitations. All fields of this message
                    are set to null with the exception of the following:
                </para>
                <para> OccurrenceTime = current time of the response </para>
                <para> EventType = EventType.DiscardedMessage </para>
                <para> TextMessage = the number of event/alarm messages discarded since the last poll response was returned. </para>
            </summary>
            <param name="eventList"> The event list to poll (reported). </param>
            <param name="filterSet">
                Optional set of filters to further refine the selection from the alarms and events in the
                list. The event list itself is created using a filter.
            </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.Abort(Xi.Contracts.Data.ServerStatus,System.String)">
            <summary>
                <para>
                    This callback method is implemented by the client to be notified when the server server state changes to
                    Aborting. Clients that use the poll interface instead of this callback interface can add the ServerDescription
                    object to a data object list to be notified when the server state transitions to the aborting state.
                </para>
            </summary>
            <param name="serverStatus">
                The ServerStatus object for the server or wrapped server for which the abort is being
                reported.
            </param>
            <param name="reason"> The reason the context is being closed. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.ElementValuesCallback(System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
                <para> No throws.</para>
                <para> This callback method is implemented by the client to receive data changes. </para>
                <para>
                    Servers send data changes to the client that have not been reported to the client via this method. Changes
                    consists of:
                </para>
                <para> 1) values for data objects that were added to the list, </para>
                <para>
                    2) values for data objects whose current values have changed since the last time they were reported to the
                    client via this interface. If a deadband filter has been defined for the list, floating point values are not
                    considered to have changed unless they have changed by the deadband amount.
                </para>
                <para> 3) historical values that meet the list filter criteria, including the deadband. </para>
                <para>
                    In addition, the server may insert a special value that indicates the server or one of its wrapped servers
                    are shutting down.
                </para>
                <para>
                    This value is inserted as the first value in the list of values in the callback. Its ListId and ClientId are
                    both 0 and its data type is ServerStatus.
                </para>
            </summary>
            <param name="clientListId"> The client identifier of the list for which data changes are being reported. </param>
            <param name="updatedValues"> The values being reported. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.EventMessagesCallback(System.UInt32,Xi.Contracts.Data.EventMessage[])">
            <summary>
                <para> This callback method is implemented by the client to receive alarms and events. </para>
                <para>
                    Servers send event messages to the client via this interface. Event messages are sent when there has been a
                    change to the specified event list. A new alarm or event that has been added to the list, a change to an alarm
                    already in the list, or the deletion of an alarm from the list constitutes a change to the list.
                </para>
                <para>
                    Once an event has been reported from the list, it is automatically deleted from the list. Alarms are only
                    deleted from the list when they transition to inactive and acknowledged.
                </para>
            </summary>
            <param name="clientListId"> The client identifier of the list for which alarms/events are being reported. </param>
            <param name="eventMessages"> The array of alarms/events are being reported. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.PassthroughCallback(System.Int32,Xi.Contracts.Data.PassthroughResult)">
            <summary>
                This method returns the results of invoking an asynchronous passthrough.
            </summary>
            <param name="invokeId"> The identifier for this invocation of the passthrough defined by the client in the request. </param>
            <param name="passthroughResult">
                The result of executing the passthrough, consisting of the result code, the invokeId
                supplied in the request, and a byte array. It is up to the client application to interpret this byte array.
            </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.ElementValuesCallbackInternal(Ssz.Xi.Client.Internal.Lists.XiDataList,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
                <para> Invokes DataList.ElementValuesCallback event, if changed items count > 0. </para>  
                <para> No throws. If error, returns null. Otherwise changed IXiDataListItems (not null, but possibly zero-lenghth). </para>        
                <para> This callback method is implemented by the client to receive data changes. </para>
                <para>
                    Servers send data changes to the client that have not been reported to the client via this method. Changes
                    consists of:
                </para>
                <para> 1) values for data objects that were added to the list, </para>
                <para>
                    2) values for data objects whose current values have changed since the last time they were reported to the
                    client via this interface. If a deadband filter has been defined for the list, floating point values are not
                    considered to have changed unless they have changed by the deadband amount.
                </para>
                <para> 3) historical values that meet the list filter criteria, including the deadband. </para>
                <para>
                    In addition, the server may insert a special value that indicates the server or one of its wrapped servers
                    are shutting down.
                </para>
                <para>
                    This value is inserted as the first value in the list of values in the callback. Its ListId and ClientId are
                    both 0 and its data type is ServerStatus.
                </para>
            </summary>
            <param name="dataList"> The client identifier of the list for which data changes are being reported. </param>
            <param name="updatedValues"> The values being reported. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.EventMessagesCallbackInternal(Ssz.Xi.Client.Internal.Lists.XiEventList,Xi.Contracts.Data.EventMessage[])">
            <summary>
                <para> Invokes EventList.EventMessagesCallbackEvent, if new items count > 0. </para>
                <para> No throws. If error, returns null. Otherwise new IXiEventListItems (not null, but possibly zero-lenghth). </para>
                <para> This callback method is implemented by the client to receive alarms and events. </para>
                <para>
                    Servers send event messages to the client via this interface. Event messages are sent when there has been a
                    change to the specified event list. A new alarm or event that has been added to the list, a change to an alarm
                    already in the list, or the deletion of an alarm from the list constitutes a change to the list.
                </para>
                <para>
                    Once an event has been reported from the list, it is automatically deleted from the list. Alarms are only
                    deleted from the list when they transition to inactive and acknowledged.
                </para>
            </summary>
            <param name="eventList"> The client identifier of the list for which alarms/events are being reported. </param>
            <param name="eventMessages"> The array of alarms/events are being reported. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.WriteData(System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
                This method is used to write data of the specified list to the server.  It is called
                by the ClientBase after the client application has prepared and committed the data
                values.
            </summary>
            <param name="serverListId"> The server identifier of the list containing the data objects to write. </param>
            <param name="writeValueArrays"> The data values to write. </param>
            <returns>
                The list server aliases and result codes for the data objects whose write failed. Returns null if all writes
                succeeded or null if this is a keep-alive.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.AcknowledgeAlarms(System.UInt32,System.String,System.String,System.Collections.Generic.List{Xi.Contracts.Data.EventId})">
            <summary>
                <para>This method is used to acknowledge one or more alarms.</para>
            </summary>
            <param name="serverListId">
                The server identifier for the list that contains the alarms to be
                acknowledged.
            </param>
            <param name="operatorName">
                The name or other identifier of the operator who is acknowledging
                the alarm.
            </param>
            <param name="comment">
                An optional comment submitted by the operator to accompany the
                acknowledgement.
            </param>
            <param name="alarmsToAck">
                The list of alarms to acknowledge.
            </param>
            <returns>
                The list EventIds and result codes for the alarms whose
                acknowledgement failed. Returns null if all acknowledgements
                succeeded.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Context.XiContext.LongrunningPassthroughAsync(System.String,System.String,System.Byte[],System.Action{Ssz.Utils.DataAccess.LongrunningPassthroughCallback})">
            <summary>
                Returns true if succeeded.
            </summary>
            <param name="recipientId"></param>
            <param name="passthroughName"></param>
            <param name="dataToSend"></param>
            <param name="callbackAction"></param>
            <returns></returns>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint">
            <summary>
                This class defines endpoints that support the Xi IRegisterForCallback and ICallback interfaces.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint.#ctor(Xi.Contracts.Data.EndpointDefinition,System.ServiceModel.Description.ServiceEndpoint,System.TimeSpan,System.TimeSpan,System.Int32,Ssz.Utils.IDispatcher)">
            <summary>
                The contstructor for IRegisterForCallback/ICallback endpoints
            </summary>
            <param name="endpointDefinition"> The EndpointDefinition for this endpoint. </param>
            <param name="serviceEndpoint"> TThe ServiceEndpoint definition for this endpoint. </param>
            <param name="receiveTimeout">
                The inactivity time interval to be used by the server to timeout this endpoint when no
                requests are received from the client.
            </param>
            <param name="sendTimeout"> The length of time WCF will wait for a response before throwing an exception. </param>
            <param name="maxItemsInObjectGraph"> The number of objects the server will serialize into a single response. </param>
            <param name="xiCallbackDoer"></param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint.Dispose(System.Boolean)">
            <summary>
                This method disposes of the object.  It is invoked by the parameterless Dispose()
                method of this object.
            </summary>
            <param name="disposing">
                <para>
                    This parameter indicates, when TRUE, this Dispose() method was called directly or indirectly by a user's
                    code. When FALSE, this method was called by the runtime from inside the finalizer.
                </para>
                <para>
                    When called by user code, references within the class should be valid and should be disposed of properly.
                    When called by the finalizer, references within the class are not guaranteed to be valid and attempts to
                    dispose of them should not be made.
                </para>
            </param>
            <returns> Returns TRUE to indicate that the object has been disposed. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint.SetCallback(System.String,System.UInt32,System.TimeSpan)">
            <summary>
                This method is invoked to allow the client to set or change the
                keepAliveSkipCount and callbackRate. The first time this method is
                invoked the server obtains the callback interface from the client.
                Therefore, this method must be called at least once for each
                callback endpoint to enable the server to make the callbacks.
            </summary>
            <param name="contextId"> The context to which this endpoint belongs. </param>
            <param name="keepAliveSkipCount">
                The client-requested keepAliveSkipCount for lists that the server may negotiate up or
                down. The keepAliveSkipCount indicates the number of consecutive UpdateRate cycles for a list that occur with
                nothing to send before an empty callback is sent to indicate a keep-alive message. For example, if the value of
                this parameter is 1, then a keep-alive callback will be sent each UpdateRate cycle for each list assigned to the
                callback for which there is nothing to send. A value of 0 indicates that keep-alives are not to be sent for any
                list assigned to the callback.
            </param>
            <param name="callbackRate">
                <para>
                    The callback rate indicates the maximum time between callbacks that are sent to the client. The server may
                    negotiate this value up or down, but a null value or a value representing 0 time is not valid.
                </para>
                <para>
                    If there are no callbacks to be sent containing data or events for this period of time, an empty callback
                    will be sent as a keep-alive. The timer for this time-interval starts when the SetCallback() response is
                    returned by the server.
                </para>
            </param>
            <returns> The results of the operation, including the negotiated keep-alive skip count and callback rate. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint.CreateChannel">
            <summary>
                This method creates the WCF Channel Factory for this endpoint and then uses it to create the channel.
            </summary>
            <returns> Returns TRUE if the channel was created, otherwise FALSE. </returns>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint.Channel">
            <summary>
                This data member is the WCF channel for this endpoint.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint.KeepAliveSkipCount">
            <summary>
                The Keep Alive Skip Count for the callback endpoint. The keepAliveSkipCount
                indicates the number of consecutive UpdateRate cycles for a list that occur
                with nothing to send before an empty callback is sent to indicate a keep-alive
                message. For example, if the value of this parameter is 1, then a keep-alive
                callback will be sent each UpdateRate cycle for each list assigned to the callback
                for which there is nothing to send.  A value of 0 indicates that keep-alives are
                not to be sent for any list assigned to the callback.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint.CallbackRate">
            <summary>
                <para>
                    The callback rate indicates the maximum time between callbacks that are sent to the client. The server may
                    negotiate this value up or down, but a null value or a value representing 0 time is not valid.
                </para>
                <para>
                    If there are no callbacks to be sent containing data or events for this period of time, an empty callback
                    will be sent as a keep-alive. The timer for this time-interval starts when the SetCallback() response is
                    returned by the server.
                </para>
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint.Proxy">
            <summary>
                This property is used to make calls on the Xi IRegisterForCallback interface.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint._callbackRate">
            <summary>
                This data member is the private representation of the CallbackRate property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint._iRegisterForCallback">
            <summary>
                This data member is the private representation of the Proxy property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint._keepAliveSkipCount">
            <summary>
                This data member is the private representation of the KeepAliveSkipCount property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Endpoints.XiCallbackEndpoint._xiCallback">
            <summary>
                This data member is used to make calls on the Xi ICallback interface.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot">
            <summary>
                This abstract base class provides the common functionality for a client endpoint.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.#ctor(Xi.Contracts.Data.EndpointDefinition,System.ServiceModel.Description.ServiceEndpoint,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
                The constructor for endpoints
            </summary>
            <param name="endpointDefinition"> The EndpointDefinition for this endpoint. </param>
            <param name="serviceEndpoint"> TThe ServiceEndpoint definition for this endpoint. </param>
            <param name="receiveTimeout">
                The inactivity time interval to be used by the server to timeout this endpoint when no
                requests are received from the client.
            </param>
            <param name="sendTimeout"> The length of time WCF will wait for a response before throwing an exception. </param>
            <param name="maxItemsInObjectGraph"> The number of objects the server will serialize into a single response. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.Dispose">
            <summary>
                This method disposes of the object.  It is invoked by the client application, client base, or
                the destructor of this object.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.Dispose(System.Boolean)">
            <summary>
                This method disposes of the object.  It is invoked by the parameterless Dispose()
                method of this object.
            </summary>
            <param name="disposing">
                <para>
                    This parameter indicates, when TRUE, this Dispose() method was called directly or indirectly by a user's
                    code. When FALSE, this method was called by the runtime from inside the finalizer.
                </para>
                <para>
                    When called by user code, references within the class should be valid and should be disposed of properly.
                    When called by the finalizer, references within the class are not guaranteed to be valid and attempts to
                    dispose of them should not be made.
                </para>
            </param>
            <returns> Returns TRUE to indicate that the object has been disposed. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.Finalize">
            <summary>
                The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.CreateChannelIfNotCreated(Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot)">
            <summary>
                This method determines if the connection for the specified endpoint has been created, and if not,
                attempts to create it. It returns FALSE if the connection is not or cannot be created.
            </summary>
            <param name="endpoint"> The specified endpoint </param>
            <returns> It returns FALSE if the connection is not or cannot be created. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.SetMaxItemsInObjectGraph(System.ServiceModel.Description.OperationDescriptionCollection,System.Int32)">
            <summary>
                This method sets the MaxItemsInObjectGraph for the WCF connection to the server
            </summary>
            <param name="operations">
                The OperationDescriptionCollection defined for the channel that is to be updated with the
                specified MaxItemsInObjectGraph.
            </param>
            <param name="maxItemsInObjectGraph"> The MaxItemsInObjectGraph value to be used. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.HasListAttached(Ssz.Xi.Client.Internal.Lists.XiListRoot)">
            <summary>
                This method indicates, when TRUE is returned, that the specified XiList
                has been assigned to this endpoint.
            </summary>
            <param name="list"> The specified XiList. </param>
            <returns> Returns TRUE if the specified XiList has been assigned to this endpoint, otherwise FALSE. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.AssignList(Ssz.Xi.Client.Internal.Lists.XiListRoot)">
            <summary>
                This method adds (assigns) the specified Xi List from the endpoint.
            </summary>
            <param name="xiList"> The specified Xi List. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.UnassignList(Ssz.Xi.Client.Internal.Lists.XiListRoot)">
            <summary>
                This method removes (unassigns) the specified Xi List from the endpoint.
            </summary>
            <param name="xiList"> The specified Xi List. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.CreateChannel">
            <summary>
                This method creates the WCF Channel Factory for this endpoint and then uses it to create the channel.
            </summary>
            <returns> Returns TRUE if the channel was created, otherwise FALSE. </returns>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.Name">
            <summary>
                The endpoint configuration name as specified by the endpoint name attribute
                in the server's App.config file. This name may not be unique.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.BindingName">
            <summary>
                The ServiceModel.Description.ServiceEndpoint.Binding.Name for this endpoint.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.ContractName">
            <summary>
                The ServiceModel.Description.ServiceEndpoint.Contract.Name for this endpoint.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.UriAddress">
            <summary>
                The ServiceModel.Description.ServiceEndpoint.Address.Uri.AbsoluteUri for this endpoint.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.ReceiveTimeout">
            <summary>
                This member corresponds to the receiveTimeout attribute in the
                binding element associated with this endpoint.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.SendTimeout">
            <summary>
                This member corresponds to the sendTimeout attribute in the
                binding element associated with this endpoint.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.EndpointId">
            <summary>
                The unique identifier of the endpoint assigned by the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.Channel">
            <summary>
                This data member is the WCF channel for this endpoint.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.LastCallUtc">
            <summary>
                The time of receipt of the response to the last successful call on this endpoint.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.Disposed">
            <summary>
                This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.MaxItemsInObjectGraph">
            <summary>
                This data member contains the server's Max Items In Object Graph for this endpoint
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot.ServiceEndpoint">
            <summary>
                This data member contains the ServiceEndpoint definition of the endpoint received from the server using MEX.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot._assignedXiLists">
            <summary>
                This data member contains the list of Xi Lists assigned to this endpoint.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot._endpointDefinition">
            <summary>
                This data member contains the EndpointDefinition returned by the server when the
                OpenEndpoint() method is called.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.Endpoints.XiPollEndpoint">
            <summary>
                This class defines endpoints that support the Xi IPoll interface.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiPollEndpoint.#ctor(Xi.Contracts.Data.EndpointDefinition,System.ServiceModel.Description.ServiceEndpoint,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
                The contstructor for IPoll endpoints
            </summary>
            <param name="endpointDefinition"> The EndpointDefinition for this endpoint. </param>
            <param name="serviceEndpoint"> TThe ServiceEndpoint definition for this endpoint. </param>
            <param name="receiveTimeout">
                The inactivity time interval to be used by the server to timeout this endpoint when no
                requests are received from the client.
            </param>
            <param name="sendTimeout"> The length of time WCF will wait for a response before throwing an exception. </param>
            <param name="maxItemsInObjectGraph"> The number of objects the server will serialize into a single response. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiPollEndpoint.CreateChannel">
            <summary>
                This method creates the WCF Channel Factory for this endpoint and then uses it to create the channel.
            </summary>
            <returns> Returns TRUE if the channel was created, otherwise FALSE. </returns>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiPollEndpoint.Channel">
            <summary>
                This data member is the WCF channel for this endpoint.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiPollEndpoint.Proxy">
            <summary>
                This data member is used to make calls on the Xi IPoll interface,
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Endpoints.XiPollEndpoint._iPoll">
            <summary>
                This data member is the private representation of the Proxy property.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.Endpoints.XiReadEndpoint">
            <summary>
                This class defines endpoints that support the Xi IRead interface.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiReadEndpoint.#ctor(Xi.Contracts.Data.EndpointDefinition,System.ServiceModel.Description.ServiceEndpoint,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
                The contstructor for IRead endpoints
            </summary>
            <param name="endpointDefinition"> The EndpointDefinition for this endpoint. </param>
            <param name="serviceEndpoint"> TThe ServiceEndpoint definition for this endpoint. </param>
            <param name="receiveTimeout">
                The inactivity time interval to be used by the server to timeout this endpoint when no
                requests are received from the client.
            </param>
            <param name="sendTimeout"> The length of time WCF will wait for a response before throwing an exception. </param>
            <param name="maxItemsInObjectGraph"> The number of objects the server will serialize into a single response. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiReadEndpoint.Dispose(System.Boolean)">
            <summary>
                This method disposes of the object.  It is invoked by the parameterless Dispose()
                method of this object.
            </summary>
            <param name="isDisposing">
                <para>
                    This parameter indicates, when TRUE, this Dispose() method was called directly or indirectly by a user's
                    code. When FALSE, this method was called by the runtime from inside the finalizer.
                </para>
                <para>
                    When called by user code, references within the class should be valid and should be disposed of properly.
                    When called by the finalizer, references within the class are not guaranteed to be valid and attempts to
                    dispose of them should not be made.
                </para>
            </param>
            <returns> Returns TRUE to indicate that the object has been disposed. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiReadEndpoint.CreateChannel">
            <summary>
                This method creates the WCF Channel Factory for this endpoint and then uses it to create the channel.
            </summary>
            <returns> Returns TRUE if the channel was created, otherwise FALSE. </returns>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiReadEndpoint.Channel">
            <summary>
                This data member is the WCF channel for this endpoint.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiReadEndpoint.Proxy">
            <summary>
                This data member is used to make calls on the Xi IRead interface,
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Endpoints.XiReadEndpoint._iRead">
            <summary>
                This data member is the private representation of the Proxy property.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.Endpoints.XiWriteEndpoint">
            <summary>
                This class defines endpoints that support the Xi IWrite interface.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiWriteEndpoint.#ctor(Xi.Contracts.Data.EndpointDefinition,System.ServiceModel.Description.ServiceEndpoint,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
                The contstructor for IWrite endpoints
            </summary>
            <param name="endpointDefinition"> The EndpointDefinition for this endpoint. </param>
            <param name="serviceEndpoint"> TThe ServiceEndpoint definition for this endpoint. </param>
            <param name="receiveTimeout">
                The inactivity time interval to be used by the server to timeout this endpoint when no
                requests are received from the client.
            </param>
            <param name="sendTimeout"> The length of time WCF will wait for a response before throwing an exception. </param>
            <param name="maxItemsInObjectGraph"> The number of objects the server will serialize into a single response. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiWriteEndpoint.Dispose(System.Boolean)">
            <summary>
                This method disposes of the object.  It is invoked by the parameterless Dispose()
                method of this object.
            </summary>
            <param name="disposing">
                <para>
                    This parameter indicates, when TRUE, this Dispose() method was called directly or indirectly by a user's
                    code. When FALSE, this method was called by the runtime from inside the finalizer.
                </para>
                <para>
                    When called by user code, references within the class should be valid and should be disposed of properly.
                    When called by the finalizer, references within the class are not guaranteed to be valid and attempts to
                    dispose of them should not be made.
                </para>
            </param>
            <returns> Returns TRUE to indicate that the object has been disposed. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Endpoints.XiWriteEndpoint.CreateChannel">
            <summary>
                This method creates the WCF Channel Factory for this endpoint and then uses it to create the channel.
            </summary>
            <returns> Returns TRUE if the channel was created, otherwise FALSE. </returns>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiWriteEndpoint.Channel">
            <summary>
                This data member is the WCF channel for this endpoint.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Endpoints.XiWriteEndpoint.Proxy">
            <summary>
                This data member is used to make calls on the Xi IWrite interface,
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Endpoints.XiWriteEndpoint._iWrite">
            <summary>
                This data member is the private representation of the Proxy property.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase">
            <summary>
                This is the base class for elements of all XiLists (e.g. DataList, EventList).
                XiLists maintain their elements in a Keyed Collection.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.#ctor(System.UInt32,Xi.Contracts.Data.InstanceId)">
            <summary>
                This constructor creates a new XiList element and sets its state to NewValue.
            </summary>
            <param name="clientAlias"> The client alias to be assigned to this list element. </param>
            <param name="instanceId"> The InstanceId for this list element. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.ResultCodeAsHex">
            <summary>
                This method provides the hexidecimal representation of the Result Code.
                It does not request the Result Code string from the server.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.PrepareForRemove">
            <summary>
                This method is used to set the state of the data object to allow it to be
                removed from the server. If the data object has not yet been added to the
                server, This method is used to set the state of the data object to disposable.
            </summary>
            <returns> Returns true if the state of data object was successfully set to RemoveableFromServer or Disposable. </returns>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.UpdateCount">
            <summary>
                This property provides the number of times this Xi Value
                has been updated with a new value.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.Enabled">
            <summary>
                Enabled
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.ClientAlias">
            <summary>
                This property contains the ClientBase-assigned identifier for this list element.
                This identifier is unique within the XiList.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.ServerAlias">
            <summary>
                This property contains the server-assigned identifier for this list element.
                This identifier is unique within the XiList.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.ValueTypeId">
            <summary>
                This property provides the Xi TypeId for the value contained
                in this list element.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.IsReadable">
            <summary>
                This property indicates whether the value associated with the list element is readable.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.IsWritable">
            <summary>
                This property indicates whether the value associated with the list element is writable.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.ResultCode">
            <summary>
                The Result Code provides the latest status as provided by the Xi Server.
                It is initially set to a failed state to indicated that the current value
                is not valid.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.InstanceId">
            <summary>
                This property is the InstanceId of this XiList element if it has one.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.IsInClientList">
            <summary>
                In Client List
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.IsInServerList">
            <summary>
                In Server List
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.PreparedForAdd">
            <summary>
                Marked For Add To Server
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.PreparedForRemove">
            <summary>
                Marked For Remove From Server
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase.IncrementUpdateCount">
            <summary>
                This method is used to increment the update count when a new
                value is present.  This method should only be invoked within
                the Xi Client Base classes.
            </summary>
            <returns> Returns the newly incremented update count. </returns>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.ListItems.XiDataAndDataJournalListItemBase._valueTypeId">
            <summary>
                This property provides the Xi TypeId for the value contained
                in this list element.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem">
            <summary>
                This class defines a historical data object.  Each historical data
                object contains a list of historical values and a list of
                historical data properties.  IEnumerable interfaces are provided to
                allow easy iteration of the historical values.
                Each historical data object may have multiple lists of values obtained
                via different calculations.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem.#ctor(System.UInt32,Xi.Contracts.Data.InstanceId)">
            <summary>
                Constructs a new instance of the <see cref="T:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem" /> class.
            </summary>
            <param name="clientAlias"> The client alias assigned to this historical data object. </param>
            <param name="instanceId"> The InstanceId that identifies this historical data object. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem.GetExistingOrNewValueStatusTimestampSet(System.String)">
            <summary>
                This method is used to create a new list of historical values for this historical
                data object.  The values for this list are populated using historical read
                methods defined by the IXIDataJournalList interface.
            </summary>
            <param name="calculationLocalId">
                The type of calculation to be used to create the list of HistoricalValues for this
                data object, as defined by the StandardMib.DataJournalOptions.MathLibrary of the server. This data object may not
                have two value sets with the same CalculationTypeId.
            </param>
            <returns> Returns the newly created list of historical values. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem.Remove(Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet)">
            <summary>
                This method removes a value set from the historical data object
            </summary>
            <param name="valueStatusTimestampSet"> The value set to remove </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem.SetPropertyValues(Xi.Contracts.Data.JournalDataPropertyValue[])">
            <summary>
                This method sets the value of the PropertyValues property.
            </summary>
            <param name="propertyValues"> The new property values to set. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem.Update(Xi.Contracts.Data.JournalDataValues)">
            <summary>
                This method is used to update the historical values for this data object
            </summary>
            <param name="journalDataValues"> The new list of historical values. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem.SetDataChanges(Xi.Contracts.Data.JournalDataChangedValues)">
            <summary>
                This method sets the value of the _journalDataChangedValues private data member.
            </summary>
            <param name="dataChanges"> The new changed data values to set. </param>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem.PropertyValues">
            <summary>
                This property contains the set of historical property values for the historical data object.
                Property values are obtained using the ReadJournalDataProperties() method defined by the
                IXIDataJournalList interface.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem.Count">
            <summary>
                This property indicates the number of historical value sets for the historical data object.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem.DataChanges">
            <summary>
                This property contains the changed historical values of the historical data object.
                It is populated by the ReadJournalDataChanges() method.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem._xiValueStatusTimestampSetsDictionary">
            <summary>
                This data member contains the historical value sets for this historical data object.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem._journalDataChangedValues">
            <summary>
                This data member is the private representation of the DataChanges public property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem._journalDataPropertyValueArray">
            <summary>
                This data member is the private representation of the PropertyValues interface property.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.ListItems.XiDataListItem">
            <summary>
                The Xi Data List Value class is used by the Xi Data List
                to represent a single process data value along with its
                status / quality and time stamp.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataListItem.#ctor(System.UInt32,Xi.Contracts.Data.InstanceId)">
            <summary>
                This constructor creates an Xi Data Object using its client alias and Instance Id.          ///
            </summary>
            <param name="clientAlias"> The client alias to be assigned to this Xi Value as its local handle. </param>
            <param name="instanceId"> The InstanceId used by the server to identify the data object. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataListItem.UpdateValue(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
                This method is called by the ClientBase when a new value has been received for
                the data object from the server. It, in turn, calls the Update() method on the
                DataValue property to complete the update, and then increments the update count
                for the data object.
            </summary>
            <param name="statusCode"> The Xi StatusCode of the value. </param>
            <param name="timestampUtc"> The timestamp of the value. </param>
            <param name="valueUInt32"> The value </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataListItem.UpdateValue(System.Double,System.UInt32,System.DateTime)">
            <summary>
                This method is called by the ClientBase when a new value has been received for
                the data object from the server. It, in turn, calls the Update() method on the
                DataValue property to complete the update, and then increments the update count
                for the data object.
            </summary>
            <param name="statusCode"> The Xi StatusCode of the value. </param>
            <param name="timestampUtc"> The timestamp of the value. </param>
            <param name="valueDouble"> The value </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataListItem.UpdateValue(System.Object,System.UInt32,System.DateTime)">
            <summary>
                This method is called by the ClientBase when a new value has been received for
                the data object from the server. It, in turn, calls the Update() method on the
                DataValue property to complete the update, and then increments the update count
                for the data object.
            </summary>
            <param name="statusCode"> The Xi StatusCode of the value. </param>
            <param name="timestampUtc"> The timestamp of the value. </param>
            <param name="valueObject"> The value </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiDataListItem.PrepareForWrite(Ssz.Utils.DataAccess.ValueStatusTimestamp)">
            <summary>
                This method is used to set PendingWriteValue to a value to be written.
                If the data object is not writable, this method sets PendingWriteValue
                to null. After preparing one or more data objects to be written, the
                client application issues the data list CommitDataObjectWrites() method
                to write them to the server in a single call.
            </summary>
            <param name="valueStatusTimestamp"> The data value to be written. </param>
            <returns> Returns TRUE if the data object is writable, otherwise FALSE. </returns>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataListItem.ValueStatusTimestamp">
            <summary>
                This property contains the data value for the data object.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataListItem.PendingWriteValueStatusTimestamp">
            <summary>
                This property contains the data value that is to be written to the data object.
                Prior to writing a value to the server, the client application sets the
                PendingWriteValue for one or more data objects using the PrepWriteValue() method,
                and then issues the data list CommitDataObjectWrites() method to write them
                to the server in a single call.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataListItem.ResultCodeWrite">
            <summary>
                This property contains the result code associated with writing the PendingWriteValueStatusTimestamp.
                See XiFaultCodes class for standardized result codes.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataListItem.PreparedForWrite">
            <summary>
                Marked For Write to Server
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataListItem.PreparedForRead">
            <summary>
                Marked For Read From Server
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiDataListItem.PreparedForTouch">
            <summary>
                Marked For Read From Server
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.ListItems.XiDataListItem._pendingWriteValueStatusTimestamp">
            <summary>
                This data member is the private representation of the PendingWriteDataValue property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.ListItems.XiDataListItem._valueStatusTimestamp">
            <summary>
                This data member is the private representation of the DataValue property.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.ListItems.XiEventListItem">
            <summary>
                This class defines an element of an Xi Event List. It contains the Event Message sent by the server.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiEventListItem.#ctor(Xi.Contracts.Data.EventMessage,System.String)">
            <summary>
                The constructor for XiEventListElements
            </summary>
            <param name="messageKey">
                The message clientListId that uniquely identifies the event. For alarms, this identifies the
                alarm itself, independent of its state, or the occurrence being reported.
            </param>
            <param name="eventMessage"> The Event Message reported by the server. </param>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiEventListItem.EventMessage">
            <summary>
                This property contains the Event Message received from the server in an Event Notification.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiEventListItem.MessageKey">
            <summary>
                The unique message identifier constructed from fields of the Event Message by the ClientBase. The fields
                used to construct the Message Key are specific to the EventType of the Event Message. For alarms, the message
                clientListId identifies the alarm itself, independent of its state, or the occurrence being reported.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiEventListItem.VendorFields">
            <summary>
                This property contains the list of vendor-specific fields selected by the client application
                for the Event Message.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiEventListItem.AddEventMessageField(System.UInt32,Ssz.Xi.Client.Internal.ListItems.XiEventMessageFieldValue)">
            <summary>
                This method is used to request that category-specific fields be
                included in event messages generated for alarms and events of
                the category for the Event List.
            </summary>
            <param name="categoryId"> The category for which event message fields are being added. </param>
            <param name="fieldValue">
                The category-specific field to be included in the event messages generated for alarms and
                events of the category.
            </param>
            <returns> The Client Alias generated as the _vendorFields dictionary clientListId for the field. </returns>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.ListItems.XiEventListItem._eventMessage">
            <summary>
                The private representation of the EventMessage property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.ListItems.XiEventListItem._messageKey">
            <summary>
                The private representation of the MessageKey property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.ListItems.XiEventListItem._vendorFields">
            <summary>
                The private representation of the VendorFields property
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.ListItems.XiEventMessageFieldValue">
            <summary>
                This class is used to represent a vendor-specific field of an event message.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiEventMessageFieldValue.#ctor(System.String,Ssz.Utils.DataAccess.TypeId)">
            <summary>
                The constructor for the XiEventMessageFieldValue
            </summary>
            <param name="name"> The name of the field. </param>
            <param name="dataTypeId"> The data type of the field. </param>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiEventMessageFieldValue.Name">
            <summary>
                This property contains the name of the Event Message field.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiEventMessageFieldValue.Selected">
            <summary>
                This property indicates, when TRUE, that this field has been selected by the
                client application to be returned in the Event Message.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiEventMessageFieldValue.DataTypeId">
            <summary>
                This property defines the data type of the field.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiEventMessageFieldValue.Value">
            <summary>
                This property contains the value of the field.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.ListItems.XiListItemRoot">
            <summary>
                This is the base class for elements of all XiLists (e.g. DataList, EventList).
                XiLists maintain their elements in a Keyed Collection.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiListItemRoot.Dispose">
            <summary>
                This is the implementation of the IDisposable.Dispose method.  The client
                application should invoke this method when this instance is no longer needed.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiListItemRoot.Dispose(System.Boolean)">
            <summary>
                This method is invoked when the IDisposable.Dispose or Finalize actions are
                requested.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.ListItems.XiListItemRoot.Finalize">
            <summary>
                Invoked by the .NET Framework while doing heap managment (Finalize).
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.ListItems.XiListItemRoot.Obj">
            <summary>
                This property is provided for the Xi Client
                application to associate this list element with an
                object of its choosing.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.Lists.XiDataAndDataJournalListBase`1">
            <summary>
                This abstract class definition allows for the implantation of methods that are
                common to two or more Xi List types.  The Xi Values maintained by this class
                must be a subclass of Xi Value Base.  In general the only time a declaration
                of this type would be used is when the data type can also be processed
                as being of type Xi Value Base.
            </summary>
            <typeparam name="TXiDataAndDataJournalListItemBase"> The Xi Value type for this Xi List. </typeparam>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataAndDataJournalListBase`1.#ctor(Ssz.Xi.Client.Internal.Context.XiContext)">
            <summary>
                Xi List Base is the common base class for all Xi Lists defined within
                the Client Base Assembly.
            </summary>
            <param name="context"> </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataAndDataJournalListBase`1.Find(System.Predicate{`0})">
            <summary>
                This method returns data objects selected from the list by the match predicate.
            </summary>
            <param name="match"> The predicate that searches the list for matches against DataListItemBase properties. </param>
            <returns> Returns data objects selected by the match predicate. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataAndDataJournalListBase`1.CommitAddItemsInternal">
            <summary>
                This method requests the server to add elements to the list that have been added to the local ClientBase copy
                of the list. For example, after using the AddNewDataObjectToList() method add a set of data objects to the local
                ClientBase copy of the list, this method is called to add them to the server's copy of the list in a single call.
            </summary>
            <returns> The list of elements that were not added to the server or null is call to server failed.</returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataAndDataJournalListBase`1.CommitRemoveItemsInternal">
            <summary>
                <para>
                    This method requests the server to remove elements from the list. The elements to be removed are those that
                    have been tagged for removal by the IXiValue PrepForRemove() method. The PrepForRemove() is called individually
                    on each list element to be removed, and followed by the CommitRemoveableElements().
                </para>
                <para>
                    The CommitRemoveableElements() method loops through the list to find the elements that have been prepared
                    for removal and makes a single call to the server to have them removed from the server's list.
                </para>
            </summary>
            <returns> The list of elements that could not be removed from the server list or null is call to server failed.</returns>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiDataAndDataJournalListBase`1.ListItemsManager">
            <summary>
                This KeyedCollection holds the collection of Xi...ListValue instances,
                where the type is dependent on the type of list.  The clientListId for this
                KeyedCollection is the ClientAlias and is a property of DataListItemBase.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Lists.XiDataAndDataJournalListBase`1._listItemsManager">
            <summary>
                This KeyedCollection holds the collection of Xi...ListValue instances,
                where the type is dependent on the type of list.  The clientListId for this
                KeyedCollection is the ClientAlias and is a property of DataListItemBase.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.Lists.XiDataJournalList">
            <summary>
                This class implements the IXiDataJournalList interface.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataJournalList.#ctor(Ssz.Xi.Client.Internal.Context.XiContext,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
                This constructor creates a new data journal list for the specified context.
            </summary>
            <param name="context"> The context that owns the data journal list. </param>
            <param name="updateRate"> The update rate for the data journal list. </param>
            <param name="bufferingRate"> The BufferingRate for this data journal list. Set to 0 if not used. </param>
            <param name="filterSet"> The FilterSet for this data journal list. Set to null if not used. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataJournalList.PrepareAddItem(Xi.Contracts.Data.InstanceId)">
            <summary>
                This method is used to create and add a new data object to a Journal Data List.  The new data
                object is created using its InstanceId.
            </summary>
            <param name="instanceId"> The InstanceId of the data object to create and add. </param>
            <returns> Returns the newly created data object. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataJournalList.ReadJournalDataForTimeInterval(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.IEnumerable{Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet})">
            <summary>
                <para>
                    This method is used to read the historical values that fall between a start and end time for one or more
                    data objects within a specific data journal list.
                </para>
            </summary>
            <param name="firstTimestamp">
                The filter that specifies the first or beginning (of returned list) timestamp for values
                to be returned. Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the
                FilterOperand class. The FilterOperand Operator is used to determine if the returned data should include data
                values the occur exactly at the first or second time stamp. If the equals operator is specified then values that
                occur at the first and second time stamp will be included in the sample set. Any other operator will not include
                first or second time stamped values.
            </param>
            <param name="secondTimestamp">
                The filter that specifies the second or ending (of returned list) timestamp for values
                to be returned. Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the
                FilterOperand class. The FilterOperand Operator is not used.
            </param>
            <param name="numValuesPerDataObject"> The maximum number of values to be returned for each data object. </param>
            <param name="xiValueStatusTimestampSetCollection">
                The list of data objects whose historical values are to be read. Each data
                object is represented by a value set that contains the values selected and returned by the server.
            </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataJournalList.ReadJournalDataAtSpecificTimes(System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet})">
            <summary>
                This method is used to read the historical values at specific times for
                one or more data objects within a specific data journal list.  If no element exists
                at the specified time in the data journal for an object, the server creates an
                interpolated value for that time and includes it in the response as though it
                actually existed in the journal.
            </summary>
            <param name="timestamps">
                Identifies the timestamps of historical values to be returned for each of the requested data
                objects.
            </param>
            <param name="xiValueStatusTimestampSetList">
                The list of data objects whose historical values are to be read. Each data
                object is represented by a value set that contains the values selected and returned by the server.
            </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataJournalList.ReadCalculatedJournalData(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Ssz.Xi.Client.Api.IXiDataJournalValueStatusTimestampSet})">
            <summary>
                This method is used to read calculated historical values (e.g. averages or
                interpolations) for one or more data objects within a specific data journal list.
                The time-range used to select the historical values is specified by the client.
                Additionally, the client specifies a calculation period that divides that time
                range into periods. The server calculates a return value for each of these periods.
            </summary>
            <param name="firstTimestamp">
                The filter that specifies the inclusive earliest (oldest) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimestamp">
                The filter that specifies the inclusive newest (most recent) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="calculationPeriod">
                The time span used to divide the specified time range into individual periods for
                which return values are calculated. The specified calculation is performed on the set of historical values of a
                data object that fall within each period.
            </param>
            <param name="xiValueStatusTimestampSetList">
                The list of data objects whose historical values are to be read. Each data
                object is represented by a value set that contains the values calculated and returned by the server.
            </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataJournalList.ReadJournalDataChanges(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem})">
            <summary>
                This method is used to read changed historical values for one or more
                data objects within a specific data journal list.  Changed historical
                values are those that were entered into the journal and then changed
                (corrected) by an operator or other user.
            </summary>
            <param name="firstTimestamp">
                The filter that specifies the inclusive earliest (oldest) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimestamp">
                The filter that specifies the inclusive newest (most recent) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="numValuesPerDataObject"> The maximum number of values to be returned per data object. </param>
            <param name="dataObjects">
                The list of data objects whose historical values are to be read. Each data object may
                contain zero, one, or more value sets, each of which contains changed values selected and returned by the server.
            </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataJournalList.ReadJournalDataProperties(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
                This method reads the properties associated with a historized data object.
            </summary>
            <param name="firstTimestamp">
                The filter that specifies the inclusive earliest (oldest) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimestamp">
                The filter that specifies the inclusive newest (most recent) timestamp for values to be
                returned. Valid operands include the Timestamp and OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="dataObject"> The data object whose property values are to be read. </param>
            <param name="propertiesToRead">
                The TypeIds of the properties to read. Each property is identified by its property
                type.
            </param>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.Lists.XiDataList">
            <summary>
                This class implements the XiDataList interface.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataList.#ctor(Ssz.Xi.Client.Internal.Context.XiContext,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
                This constructor creates a new Data List.
            </summary>
            <param name="context"> The context to which this data lList belongs. </param>
            <param name="updateRate"> The UpdateRate for this data list. </param>
            <param name="bufferingRate"> The BufferingRate for this data list. Set to 0 if not used. </param>
            <param name="filterSet"> The FilterSet for this data list. Set to null if not used. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataList.PrepareAddItem(Xi.Contracts.Data.InstanceId)">
            <summary>
                This method is used to created and add a new data object to a Data List.  The new data
                object is created using its InstanceId.
            </summary>
            <param name="instanceId"> The InstanceId of the data object to create and add. </param>
            <returns> Returns the newly created data object. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataList.EnableListElementUpdating(System.Boolean,System.Collections.Generic.IEnumerable{Ssz.Xi.Client.Api.ListItems.IXiDataListItem})">
            <summary>
                <para>
                    This method is used to enable or disable updating of individual elements of a list. If the
                    dataObjectsToEnableOrDisable parameter is null, then all elements of the list are enabled/disabled. This call
                    does not change the enabled state of the list itself.
                </para>
                <para>
                    When an element of the list is disabled, the server excludes it from participating in callbacks and polls.
                    However, at the option of the server, the server may continue updating its cache for the element.
                </para>
            </summary>
            <param name="enableUpdating">
                Indicates, when TRUE, that updating of the list is to be enabled, and when FALSE, that
                updating of the list is to be disabled.
            </param>
            <param name="dataObjectsToEnableOrDisable"> The list of data objects to be enabled or disabled. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataList.CommitReadDataListItems">
            <summary>
                This method is invoked to issue a Read request to the Xi Server to read
                the specified data objects.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataList.CommitWriteDataListItems">
            <summary>
                <para>
                    Writing data object values to the server is a two step process composed of preparing a list of data objects
                    to be written, followed by writing that list to the server.
                </para>
                <para>
                    This method is used in the first step to individually mark each data object in the Data List as ready for
                    writing. It examines all data objects in the Data List that are ready for writing and writes them to the server
                    .
                </para>
            </summary>
            <returns>
                The list of data objects whose write failed. Results are not returned data object whose writes succeeded. If
                all writes succeeded, null is returned.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataList.PollDataChanges">
            <summary>
                <para> Throws or returns changed IXiDataListItems (not null, but possibly zero-lenghth). </para>
                <para> This method is used to poll the endpoint for changes. </para>
                <para> Changes consists of: </para>
                <para> 1) values for data objects that were added to the list, </para>
                <para>
                    2) values for data objects whose current values have changed since the last time they were reported to the
                    client via this interface. If a deadband filter has been defined for the list, floating point values are not
                    considered to have changed unless they have changed by the deadband amount.
                </para>
                <para> 3) historical values that meet the list filter criteria, including the deadband. </para>
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataList.OnElementValuesCallback(Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
                result is not null.
                This method is invoked as part of the callback processing.  It then invokes
                or fires the event to notify the Xi client of data updates.
            </summary>
            <param name="dataValueArraysWithAlias"> </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataList.RaiseElementValuesCallbackEvent(System.Collections.Generic.IEnumerable{Ssz.Xi.Client.Api.ListItems.IXiDataListItem},System.Collections.Generic.IEnumerable{Ssz.Utils.DataAccess.ValueStatusTimestamp})">
            <summary>
                Throws or invokes ElementValuesCallback event.
                changedListItems is not null, changedValues is not null
            </summary>
            <param name="changedListItems"></param>
            <param name="changedValues"></param>
        </member>
        <member name="E:Ssz.Xi.Client.Internal.Lists.XiDataList.ElementValuesCallback">
            <summary>
                Xi clients subscribe to this event to obtain the data update callbacks.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiDataList.UpdateData(Xi.Contracts.Data.DataValueArraysWithAlias,System.Boolean)">
            <summary>
                If returnChangedListItems == true, result is not null. Otherwise result is null.
                This method processes the data value arrays received from the server by locating the data objects in the
                data list for which values have been received and updating their values. If the notificationData parameter
                is present (not null), then this method adds the received values to this notification data.
            </summary>
            <param name="readValueArrays"> The new values. </param>
            <param name="returnChangedListItems"> </param>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Lists.XiDataList._lastElementValuesCallbackExceptionMessage">
            <summary>
                This data member holds the last exception message encountered by the
                ElementValuesCallback callback when calling valuesUpdateEvent().
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.Lists.XiEventList">
            <summary>
                This class implements the XiEventList interface.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiEventList.#ctor(Ssz.Xi.Client.Internal.Context.XiContext,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
                This constructor creates a new event list for the specified context.
            </summary>
            <param name="context"> The context that owns the event list. </param>
            <param name="updateRate"> The update rate for the event list. </param>
            <param name="bufferingRate"> The BufferingRate for this event list. Set to 0 if not used. </param>
            <param name="filterSet"> The FilterSet for this event list. Set to null if not used. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiEventList.AcknowledgeAlarms(System.String,System.String,System.Collections.Generic.List{Xi.Contracts.Data.EventId})">
            <summary>
                <para>This method is used to acknowledge one or more alarms.</para>
            </summary>
            <param name="operatorName">
                The name or other identifier of the operator who is acknowledging
                the alarm.
            </param>
            <param name="comment">
                An optional comment submitted by the operator to accompany the
                acknowledgement.
            </param>
            <param name="alarmsToAck">
                The list of alarms to acknowledge.
            </param>
            <returns>
                The list EventIds and result codes for the alarms whose
                acknowledgement failed. Returns null if all acknowledgements
                succeeded.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiEventList.PollEventChanges(Xi.Contracts.Data.FilterSet)">
            <summary>
                Throws or returns new IXiEventListItems (not null, but possibly zero-lenghth).
                This method is used to poll the endpoint for changes to a specific event list.
                Event messages are sent by the server when there has been a change to the specified
                event list. A new alarm or event that has been added to the list, a change to an
                alarm already in the list, or the deletion of an alarm from the list constitutes a
                change to the list.
                <para>
                    Once the poll completes, this method calls the EventMessagesCallback() method to add the received events to the
                    event list.
                </para>
            </summary>
            <param name="filterSet">
                The filter set used to filter event messages. This filter is sent to the server where it is
                used to select event messages to return.
            </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiEventList.EventMessagesCallback(Xi.Contracts.Data.EventMessage[])">
            <summary>
                <para> result is not null </para>
                <para>
                    This callback method receives event messages sent by the server that contain both events and alarms. Servers
                    send event messages when there has been a change to its Event List. A new alarm or event that has been added to
                    the Event List, a change to an alarm already in the list, or the deletion of an alarm from the list constitutes
                    a change to the list. Client applications may read this list using the enumerator defined for this class.
                </para>
                <para>
                    Upon receipt of an event notification, this method adds the messages representing events to the end of the
                    Event List. It inserts alarm messages into the list using a combination of their state and priority. New
                    active, unacknowledged alarms are added first, followed by inactive, unacknowledged alarms. Inactive,
                    acknowledged are added next, followed by alerts, and finally event messages. Each of these sets is sorted in
                    descending priority order. If an alarm is already in the list, it is removed from the list and its new alarm
                    message is inserted in its appropriate location.
                </para>
                <para> Once the list has been updated, the client application is notified with the received event messages. </para>
                <para>
                    Periodically, this method performs routine maintenance on the Event List. Event messages are automatically
                    deleted from the list after a period of time. Alarms, are also automatically deleted from the list after a
                    period of time if they have transitioned to inactive and acknowledged.
                </para>
                <para>
                    Additionally, any message that been in the list a maximum amount time are automatically deleted, and if the
                    maximum size of the Event List has been reached, the oldest messages are deleted from the list.
                </para>
            </summary>
            <param name="eventMessages"> </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiEventList.RaiseEventMessagesCallbackEvent(System.Collections.Generic.IEnumerable{Ssz.Xi.Client.Api.ListItems.IXiEventListItem})">
            <summary>
                Throws or invokes EventMessagesCallbackEvent.        
            </summary>
            <param name="newEventListItems"></param>
        </member>
        <member name="E:Ssz.Xi.Client.Internal.Lists.XiEventList.EventMessagesCallbackEvent">
            <summary>
                This event is used to notify the client application when new events are received.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiEventList.MaxKeepAllEventsAge">
            <summary>
                All events should be kept for at least this time span.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiEventList.MaxAnyEventAge">
            <summary>
                No events are allowed to exceed this time span.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiEventList.MaxEventListItems">
            <summary>
                This list is not allowed to exceed this number of events.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiEventList.CategorySpecificFieldCollection">
            <summary>
                This property is the publically visible ReadOnlyCollection of Category Specific Event Message Fields
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiEventList.CategorySpecificFieldDictionary">
            <summary>
                This property is the internally visible Dictionary of Category Specific Event Message Fields
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Lists.XiEventList._listMaintenanceInterval">
            <summary>
                The inteval of time between Event List maintenance checks performed by the
                EvemtNotification method.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Lists.XiEventList._lastEventMessagesCallbackExceptionMessage">
            <summary>
                This data member holds the last exception message encountered by the
                ElementValuesCallback callback when calling valuesUpdateEvent().
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Lists.XiEventList._CategorySpecificFieldDict">
            <summary>
                This data member is the private representation of CategorySpecificFieldCollection and
                CategorySpecificFieldDictionary
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Lists.XiEventList._maxAnyEventAge">
            <summary>
                This data member is the private representation of MaxAnyEventAge
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Lists.XiEventList._maxEventListItems">
            <summary>
                This data member is the private representation of MaxEventListItems
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Lists.XiEventList._maxKeepAllEventsAge">
            <summary>
                This data member is the private representation of MaxKeepAllEventsAge
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Lists.XiEventList._items">
            <summary>
                This KeyedCollection holds the collection of XiEventListItems, each keyed by the
                MessageKey.  This allows the list to be indexed by the MessageKey.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Lists.XiEventList._inactiveAcked">
            <summary>
                Inactive, Acked integer value
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.Lists.XiListRoot">
            <summary>
                This abstract class definition allows for the implantation of methods that are
                common to two or more Xi List types.  The Xi Values maintained by this class
                must be a subclass of Xi Value Base.  In general the only time a declaration
                of this type would be used is when the data type can also be processed
                as being of type Xi Value Base.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiListRoot.#ctor(Ssz.Xi.Client.Internal.Context.XiContext)">
            <summary>
                Xi List Base is the common base class for all Xi Lists defined within
                the Client Base Assembly.
            </summary>
            <param name="context"> </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiListRoot.Dispose">
            <summary>
                This is the implementation of the IDisposable.Dispose method.  The client
                application should invoke this method when this instance is no longer needed.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiListRoot.Dispose(System.Boolean)">
            <summary>
                This method is invoked when the IDisposable.Dispose or Finalize actions are
                requested.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiListRoot.Finalize">
            <summary>
                Invoked by the .NET Framework while doing heap managment (Finalize).
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiListRoot.EnableListUpdating(System.Boolean)">
            <summary>
                <para>
                    This method is used to enable or disable updating of an entire list. When this method is called, the enabled
                    state of the list is changed, but the enabled state of the individual elements of the list is unchanged.
                </para>
                <para>
                    When a list is disabled, the server excludes it from participating in callbacks and polls. However, at the
                    option of the server, the server may continue updating its cache for the elements of the list.
                </para>
                <para> Calling this method also causes the local copy of the list attributes to be updated. </para>
            </summary>
            <param name="enableUpdating">
                Indicates, when TRUE, that updating of the list is to be enabled, and when FALSE, that
                updating of the list is to be disabled.
            </param>
            <returns> Returns TRUE if the list was successfully enabled or disabled. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiListRoot.ModifyListAttributes(System.Nullable{System.UInt32},System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet)">
            <summary>
                This method is used to change the update rate, buffering rate, and/or
                filter set of a list.  The new value replace the old values if they exist.
            </summary>
            <param name="updateRate">
                The new update rate of the list. The server will negotiate this rate to one that it can
                support. GetListAttributes can be used to obtain the current value of this parameter. Null if the update rate is
                not to be updated.
            </param>
            <param name="bufferingRate">
                The new buffering rate of the list. The server will negotiate this rate to one that it can
                support. GetListAttributes can be used to obtain the current value of this parameter. Null if the buffering rate is
                not to be updated.
            </param>
            <param name="filterSet">
                The new set of filters. The server will negotiate these filters to those that it can support.
                GetListAttributes can be used to obtain the current value of this parameter. Null if the filters are not to be
                updated.
            </param>
            <returns>
                The revised update rate, buffering rate, and filter set. Attributes that were not updated are set to null in
                this response.
            </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiListRoot.GetListAttributes">
            <summary>
                This method is used to retrieve the attributes of this list from the server.
            </summary>
            <returns> The attributes of this list. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiListRoot.TouchList">
            <summary>
                <para> This method is used to cause a list to be "touched". </para>
                <para>
                    For lists that contain data objects, this method causes the server to update all data objects in the list
                    that are currently enabled (see the XiDataList EnableListElementUpdating() method), mark them as changed (even
                    if their values did not change), and then return them all to the client in the next callback or poll.
                </para>
                <para>
                    For lists that contain events, this method causes the server to mark all alarms/event in the list as
                    changed, and then return them all to the client in the next callback.
                </para>
            </summary>
            <returns> The result code for the operation. See XiFaultCodes class for standardized result codes. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiListRoot.ReplaceEndpointInList(Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot,Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot)">
            <summary>
                Use this method to update this Xi List with a replacement Xi Endpoint.
                The method is used when an endpoint loses communication and is replaced
                by a new endpoint
            </summary>
            <param name="failedEndpoint"> The failed endpoint </param>
            <param name="replacementEndpoint"> The endpoint that replaces the failed endpoint </param>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiListRoot.Context">
            <summary>
                This property provides the Xi Context to which this list belongs.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiListRoot.ListTypeAsString">
            <summary>
                Use this property to obtain the List Type as a string value.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiListRoot.ClientListId">
            <summary>
                The Client LocalId provides a handle by which this Xi List is known within
                the client code.  This value is established by the client code.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiListRoot.ServerListId">
            <summary>
                The Server LocalId provides a handle by which this Xi List is known within
                the server code.  This value is established by the server code.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiListRoot.StandardListType">
            <summary>
                This property identifies the Standard Xi List Type of this list.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiListRoot.ListAttributes">
            <summary>
                This property returns a copy of the Xi List Attributes from the server.
                The ModifyListAttributes method is used oo change the List Attribute.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiListRoot.ClientTag">
            <summary>
                This property is provided for the Xi Client application to associate this list
                with an object of its choosing.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiListRoot.Endpoints">
            <summary>
                List of Xi Endpoints to which this Xi List has been added.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiListRoot.Readable">
            <summary>
                This property indicates whether this subscription can be used to read values from the server.
                Setting this property to TRUE causes this subscription to open an endpoint with the server
                for reading.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiListRoot.Writeable">
            <summary>
                This property indicates whether this subscription can be used to write values to the server.
                Setting this property to TRUE causes this subscription to open an endpoint with the server
                for writing.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiListRoot.Callbackable">
            <summary>
                This property indicates whether this subscription can be used to read values from the server.
                Setting this property to TRUE causes this subscription to open an endpoint with the server
                for reading.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.Lists.XiListRoot.Pollable">
            <summary>
                This property indicates whether this subscription can be used to read values from the server.
                Setting this property to TRUE causes this subscription to open an endpoint with the server
                for reading.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiListRoot.AddListToEndpoint(Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot)">
            <summary>
                This method is used to add an XiList to an Xi Endpoint.
            </summary>
            <param name="endpoint"> The endpoint to which the list is to be added. </param>
            <returns> The result code for the operation. See XiFaultCodes class for standardized result codes. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.Lists.XiListRoot.RemoveListFromEndpoint(Ssz.Xi.Client.Internal.Endpoints.XiEndpointRoot)">
            <summary>
                This method removes this list from the specified Xi Endpoint.
            </summary>
            <param name="endpoint"> The endpoint from which this list is to be removed. </param>
            <returns> The result code. </returns>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Lists.XiListRoot._context">
            <summary>
                This data member is the private representation of
                the public Context property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.Lists.XiListRoot._endpoints">
            <summary>
                List of Xi Endpoints to which this Xi List has been added.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.XiAeSorter">
            <summary>
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiAeSorter.DoCompare(Ssz.Xi.Client.Internal.ListItems.XiEventListItem,Ssz.Xi.Client.Internal.ListItems.XiEventListItem)">
            <summary>
                This method is a placeholder for comparing two XiEventListItem objects.  The implementer
                should complete this method if desired.
            </summary>
            <param name="eventValueA"> The first XiEventListItem to compare. </param>
            <param name="eventValueB"> The second XiEventListItem to compare. </param>
            <returns>
                Returns 0 if eventValueA equals eventValueB, 1 if eventValueB is greater than eventValueA, and -1 if
                eventValueB is less than eventValueA.
            </returns>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.XiCallback">
            <summary>
                This class provides the method for the ICallback interface
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiCallback.Xi#Contracts#ICallback#Abort(System.String,Xi.Contracts.Data.ServerStatus,System.String)">
            <summary>
                <para>
                    This callback method is implemented by the client to be notified when the server server state changes to
                    Aborting. Clients that use the poll interface instead of this callback interface can add the ServerDescription
                    object to a data object list to be notified when the server state transitions to the aborting state.
                </para>
            </summary>
            <param name="contextId"> The context identifier. </param>
            <param name="serverStatus"> The ServerStatus object that describes the server that is shutting down. </param>
            <param name="reason"> The reason the context is being closed. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiCallback.Xi#Contracts#ICallback#InformationReport(System.String,System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
                <para> This callback method is implemented by the client to receive data changes. </para>
                <para>
                    Servers send data changes to the client that have not been reported to the client via this method. Changes
                    consists of:
                </para>
                <para> 1) values for data objects that were added to the list, </para>
                <para>
                    2) values for data objects whose current values have changed since the last time they were reported to the
                    client via this interface. If a deadband filter has been defined for the list, floating point values are not
                    considered to have changed unless they have changed by the deadband amount.
                </para>
                <para> 3) historical values that meet the list filter criteria, including the deadband. </para>
                <para>
                    In addition, the server may insert a special value that indicates the server or one of its wrapped servers
                    are shutting down.
                </para>
                <para>
                    This value is inserted as the first value in the list of values in the callback. Its ListId and ClientId are
                    both 0 and its data type is ServerStatus.
                </para>
            </summary>
            <param name="contextId"> The context identifier. </param>
            <param name="clientListId"> The client identifier of the list for which data changes are being reported. </param>
            <param name="updatedValues"> The values being reported. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiCallback.Xi#Contracts#ICallback#EventNotification(System.String,System.UInt32,Xi.Contracts.Data.EventMessage[])">
            <summary>
                <para> This callback method is implemented by the client to receive alarms and events. </para>
                <para>
                    Servers send event messages to the client via this interface. Event messages are sent when there has been a
                    change to the specified event list. A new alarm or event that has been added to the list, a change to an alarm
                    already in the list, or the deletion of an alarm from the list constitutes a change to the list.
                </para>
                <para>
                    Once an event has been reported from the list, it is automatically deleted from the list. Alarms are only
                    deleted from the list when they transition to inactive and acknowledged.
                </para>
            </summary>
            <param name="contextId"> The context identifier. </param>
            <param name="clientListId"> The client identifier of the list for which alarms/events are being reported. </param>
            <param name="eventsArray"> The list of alarms/events are being reported. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiCallback.Xi#Contracts#ICallback#PassthroughCallback(System.String,System.Int32,Xi.Contracts.Data.PassthroughResult)">
            <summary>
                This method returns the results of invoking an asynchronous passthrough.
            </summary>
            <param name="contextId"> The context identifier. </param>
            <param name="invokeId"> The identifier for this invocation of the passthrough defined by the client in the request. </param>
            <param name="passthroughResult">
                The result of executing the passthrough, consisting of the result code, the invokeId
                supplied in the request, and a byte array. It is up to the client application to interpret this byte array.
            </param>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.XiContextNotification">
            <summary>
                Use a method of this type to receive notifications from the Context.
            </summary>
            <param name="sender"> The calling object. </param>
            <param name="notificationData"> The data contained in the notification. </param>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.XiContextNotificationData">
            <summary>
                The data contained in a context notification.  The ReasonForNotification property specifies
                why the notification is being sent.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiContextNotificationData.#ctor(Ssz.Xi.Client.Internal.XiContextNotificationType,System.Object)">
            <summary>
                This constructor creates an XiContextNotificationData object from the reason for the
                notification and the accompanying data.
            </summary>
            <param name="reasonForNotification"> The reason for the notification. </param>
            <param name="data"> The details of the notification. </param>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiContextNotificationData.ReasonForNotification">
            <summary>
                This property specifies the reason for the notification.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiContextNotificationData.Data">
            <summary>
                This property contains the details about the notification.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationData._data">
            <summary>
                This data member is the private representation of the Data property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationData._reasonForNotification">
            <summary>
                This data member is the private representation of the ReasonForNotification property.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.XiContextNotificationType">
            <summary>
                This enumeration indicates why the notification is being sent.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationType.Shutdown">
            <summary>
                The server shutting down.
                The Data property contains a string that describes the reason for the shutdown.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationType.ResourceManagementDisconnected">
            <summary>
                The WCF connection to the resource management endpoint has been unexpectedly disconnected.
                The Data property contains a string that describes the failure.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationType.ResourceManagementFail">
            <summary>
                The WCF connection to the resource management endpoint has been unexpectedly disconnected and is not recoverable.
                The Data property contains a string that describes the failure.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationType.EndpointDisconnected">
            <summary>
                The WCF connection to a non-resource management endpoint has been unexpectedly disconnected.
                The Data property contains a string that describes the failure.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationType.EndpointFail">
            <summary>
                The WCF connection to a non-resource management endpoint has been unexpectedly disconnected and is not recoverable.
                The Data property contains a string that describes the failure.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationType.Discards">
            <summary>
                Data updates or event messages cached by the server for polling have been discarded by the server due to failure to
                receive a poll for them.
                The Data property contains a uint that indicates the number discarded.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationType.TypeConversionError">
            <summary>
                A type conversion error has occurred in the client on received data.
                The Data property contains a string that describes the conversion error.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationType.ClientKeepAliveException">
            <summary>
                A FaultException was received from the server for a ClientKeepAlive request that was issued by the ClientBase.
                The FaultException type accompanies this notification type.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationType.ServerKeepAliveError">
            <summary>
                Callback from server hasn't been recieved > CallbackRate.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationType.ReInitiateException">
            <summary>
                A FaultException was received from the server for a ReInitiate request that was issued by the ClientBase.
                The FaultException type accompanies this notification type.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationType.PollException">
            <summary>
                A FaultException was received from the server for Poll request that was issued by the ClientBase.
                The FaultException type accompanies this notification type.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiContextNotificationType.GeneralException">
            <summary>
                A general Exception was received for a request that was issued by the ClientBase.
                The Exception type accompanies this notification type.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet">
            <summary>
                This class is used to represent a sample set from a historical read.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.#ctor(Ssz.Xi.Client.Internal.ListItems.XiDataJournalListItem,Ssz.Utils.DataAccess.TypeId)">
            <summary>
                Constructor for a Data Journal List Value List that will
                be associated with a Data Journal List Value.
            </summary>
            <param name="owningXiDataJournalListItem">
                Identifies the historical data object to which this historical value set
                belongs.
            </param>
            <param name="calculationTypeId"> The CalculationTypeId associated with the value set. </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.Dispose">
            <summary>
                This method disposes of the object.  It is invoked by the client application, client base, or
                the destructor of this object.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.Dispose(System.Boolean)">
            <summary>
                This method disposes of the object.  It is invoked by the parameterless Dispose()
                method of this object.
            </summary>
            <param name="disposing">
                <para>
                    This parameter indicates, when TRUE, this Dispose() method was called directly or indirectly by a user's
                    code. When FALSE, this method was called by the runtime from inside the finalizer.
                </para>
                <para>
                    When called by user code, references within the class should be valid and should be disposed of properly.
                    When called by the finalizer, references within the class are not guaranteed to be valid and attempts to
                    dispose of them should not be made.
                </para>
            </param>
            <returns> Returns TRUE to indicate that the object has been disposed. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.Finalize">
            <summary>
                The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.GetCalculationTypeLocalId(Ssz.Utils.DataAccess.TypeId)">
            <summary>
                The LocalId portion of the CalculationTypeId. Set to 0 if the LocalId is not a uint.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.GetCalculationTypeId(System.UInt32)">
            <summary>
                The LocalId portion of the CalculationTypeId. Set to 0 if the LocalId is not a uint.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                This method gets the non-typed enumerator for values in the historical data object value set.
            </summary>
            <returns> Returns the enumerator for the list of objects in the historical data object value set. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.System#Collections#Generic#IEnumerable{Ssz#Utils#DataAccess#ValueStatusTimestamp}#GetEnumerator">
            <summary>
                This method returns the typed enumerator for the list of values in the historical data object value set.
                This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns> Returns the enumerator for list of values in the historical data object value set. </returns>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.OwningXiDataJournalListItem">
            <summary>
                This property contains the interface for the historical data object to
                which this historical value set belongs.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.CalculationTypeId">
            <summary>
                The type of calculation used to create the value set as defined by the
                StandardMib.DataJournalOptions.MathLibrary of the server and by
                Xi.Contracts.Constants.JournalDataSampleTypes. The historical data object
                for which this value set is defined may not have two value sets with the
                same CalculationTypeId.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.ResultCode">
            <summary>
                This property contains the Result Code associated with reading this value
                set from the server. See XiFaultCodes class for standardized result codes.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.StartTime">
            <summary>
                This property defines the starting time for this list historical values.
                Values in the value set will be between the StartTime and EndTime. The
                read method used to access the values specifies whether or not values
                with the starting or ending times are to be included in this value set.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.EndTime">
            <summary>
                This property defines the ending time for this list historical values.
                Values in the value set will be between the StartTime and EndTime. The
                read method used to access the values specifies whether or not values
                with the starting or ending times are to be included in this value set.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.Count">
            <summary>
                This property contains the number of values in this value set.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.Tag">
            <summary>
                The property defines an object that the client application can use to
                associate this value set with an object of its choice.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.Reset">
            <summary>
                This method clears the value set
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet.UpdateValueSet(Xi.Contracts.Data.JournalDataValues)">
            <summary>
                This method updates the values of the value set.
            </summary>
            <param name="journalDataValues"> The new values used to update the value set. </param>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet._owningXiDataJournalListItem">
            <summary>
                The private representation of the OwningHistoricalDataObject interface property and the
                _owningXiDataJournalListItem public property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet._calculationTypeId">
            <summary>
                The private representation of the CalculationTypeId and CalculationTypeLocalId interface properties.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet._disposed">
            <summary>
                This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiDataJournalValueStatusTimestampSet._xiValueStatusTimestampsList">
            <summary>
                The private representation of the _xiValueStatusTimestampsList interface property.
            </summary>
        </member>
        <member name="T:Ssz.Xi.Client.Internal.XiServerInfo">
            <summary>
                This class is used to locate a server and obtain its list of ServiceEndpoints.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiServerInfo.#ctor(Xi.Contracts.Data.ServerEntry,System.Collections.Generic.List{Xi.Contracts.Data.EndpointConfigurationEx},System.String)">
            <summary>
                This constructor creates an XiEndpointDiscovery instance from a ServerEntry
                Preconditions: serverEntry is not null.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiServerInfo.Dispose">
            <summary>
                This method disposes of the object.  It is invoked by the client application, client base, or
                the destructor of this object.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiServerInfo.Dispose(System.Boolean)">
            <summary>
                This method disposes of the object.  It is invoked by the parameterless Dispose()
                method of this object.
            </summary>
            <param name="disposing">
                <para>
                    This parameter indicates, when TRUE, this Dispose() method was called directly or indirectly by a user's
                    code. When FALSE, this method was called by the runtime from inside the finalizer.
                </para>
                <para>
                    When called by user code, references within the class should be valid and should be disposed of properly.
                    When called by the finalizer, references within the class are not guaranteed to be valid and attempts to
                    dispose of them should not be made.
                </para>
            </param>
            <returns> Returns TRUE to indicate that the object has been disposed. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiServerInfo.Finalize">
            <summary>
                The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiServerInfo.GetServiceEndpointsByScheme(System.String,System.String)">
            <summary>
                This method searches the list of endpoints for the endpoint with the specified contractType and
                protocol scheme.
            </summary>
            <param name="contractType"> The contractType type of the desired endpoints. </param>
            <param name="scheme"> The protocol scheme of the desired endpoints. </param>
            <returns> Returns the endpoints with the specified contractType and protocol scheme. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiServerInfo.GetServiceEndpointsByBinding(System.String,System.Type)">
            <summary>
                This method searches the list of endpoints for the endpoint with the specified contractType and
                binding type.
            </summary>
            <param name="contractType"> The contractType type of the desired endpoints. </param>
            <param name="binding"> The binding type of the desired endpoints. </param>
            <returns> Returns the endpoint with the specified contractType and binding type. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiServerInfo.RankReadWriteSubscribeEndpoints(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
                This method ranks the Read, Write, or Subscribe endpoints.  Those with the same binding type
                as the Resource Management endpoint used to connect to the server are ranked first, followed
                by tcp, wshttp, and basic http. This method is called after the client connects to the server.
            </summary>
            <param name="connectedResourceManagementServiceEndpoint">
                The resource management endpoint to which the client is
                connected.
            </param>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiServerInfo.GetRankedReadWriteSubscribeServiceEndpoints(System.String)">
            <summary>
                This method searches the list of endpoints for the endpoints with the specified contractType type
            </summary>
            <param name="contractType"> The contractType type of the desired endpoint. </param>
            <returns> Returns the endpoints with the specified contractType type </returns>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiServerInfo.ServerEntry">
            <summary>
                The ServerEntry for the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiServerInfo.ResourceManagementServiceEndpoints">
            <summary>
                The list of ranked resource management endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiServerInfo.ReadServiceEndpoints">
            <summary>
                The list of ranked read endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiServerInfo.WriteServiceEndpoints">
            <summary>
                The list of ranked write endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiServerInfo.PollServiceEndpoints">
            <summary>
                The list of ranked poll endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiServerInfo.RegisterForCallbackServiceEndpoints">
            <summary>
                The list of ranked callback endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.Internal.XiServerInfo.ServerDiscoveryEndpoint">
            <summary>
                The ServiceEndpoint object of the server's Server Discovery Enpoint.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiServerInfo.FillAllServiceEndpointsCollection(System.Collections.Generic.IEnumerable{Xi.Contracts.Data.EndpointConfigurationEx})">
            <summary>
                This method loads the endpoint/binding configuration
                and builds the lists for each service contractTypeName.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiServerInfo.GetServiceEndpointsByBindingInternal(System.String,System.Type)">
            <summary>
                This method searches the list of endpoints for the endpoint with the specified contractType and
                binding type.
            </summary>
            <param name="contractType"> The contractType type of the desired endpoints. </param>
            <param name="bindingType"> The binding type of the desired endpoints. </param>
            <returns> Returns the endpoint with the specified contractType and binding type. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiServerInfo.RankReadWriteSubscribeEndpoints(System.ServiceModel.Description.ServiceEndpoint,System.Collections.Generic.List{System.ServiceModel.Description.ServiceEndpoint})">
            <summary>
                This method ranks the Read, Write, or Subscribe endpoints.  Those with the same binding type
                as the Resource Management endpoint used to connect to the server are ranked first, followed
                by tcp, wshttp, and basic http. This method is called after the client connects to the server.
            </summary>
            <param name="connectedResourceManagementServiceEndpoint">
                The resource management endpoint to which the client is
                connected.
            </param>
            <param name="serviceEndpoints"> The list of read, write, and subscribe ServiceEndpoint retrieved by MEX. </param>
            <returns> The list of ranked endpoints. </returns>
        </member>
        <member name="M:Ssz.Xi.Client.Internal.XiServerInfo.ModifyEndpoint(System.ServiceModel.Description.ServiceEndpoint,Xi.Contracts.Data.EndpointConfiguration)">
            <summary>
                This method applies the EndpointConfiguration info contained in the ServerEntry
                of the server to the endpoint definitions retrieved by MEX.
            </summary>
            <param name="serviceEndpoint"> The ServiceEndpoint to update. </param>
            <param name="epc"> The EndpointConfiguration for the ServiceEndpoint. </param>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo.LocalhostBytes">
            <summary>
                This static data member contains the local IP address bytes. The local IP address is always 127.0.0.1.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo.LocalhostIpAddress">
            <summary>
                This data member contains the local IP address of 127.0.0.1
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo._serverEntry">
            <summary>
                This data member is the private representation of the ServerEntry interface property
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo._pollServiceEndpoints">
            <summary>
                This data member is the private representation of the PollServiceEndpoints interface property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo._readServiceEndpoints">
            <summary>
                This data member is the private representation of the ReadServiceEndpoints interface property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo._registerForCallbackServiceEndpoints">
            <summary>
                This data member is the private representation of the RegisterForCallbackServiceEndpoints interface property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo._resourceManagementServiceEndpoints">
            <summary>
                This data member is the private representation of the ResourceManagementServiceEndpoints interface property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo._serverDiscoveryEndpoint">
            <summary>
                This data member contains the ServiceEndpoint definition of the server's Server Discovery endpoint
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo._writeServiceEndpoints">
            <summary>
                This data member is the private representation of the WriteServiceEndpoints interface property.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo._disposed">
            <summary>
                This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo._allServiceEndpointsCollection">
            <summary>
                This data member is the collection of server endpoints retrieved by MEX
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo._syncRoot">
            <summary>
                This data member is used to lock the list.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.Internal.XiServerInfo._mexReliableEnabled">
            <summary>
                Mex WsHttpBinding constructor parameter
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.Dispose(System.Boolean)">
            <summary>
                This method is invoked when the IDisposable.Dispose or Finalize actions are
                requested.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.XiDataAccessProvider.ServerAddress">
            <summary>
                Xi Server connection string.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.XiDataAccessProvider.SystemNameToConnect">
            <summary>
                Xi System Name.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.XiDataAccessProvider.ClientApplicationName">
            <summary>
                Used in Xi Context initialization.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.XiDataAccessProvider.ClientWorkstationName">
            <summary>
                Used in Xi Context initialization.
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.XiDataAccessProvider.ContextParams">
            <summary>
                Used in Xi Context initialization.
                Can be null
            </summary>
        </member>
        <member name="P:Ssz.Xi.Client.XiDataAccessProvider.DataGuid">
            <summary>
                If guid the same, the data is guaranteed not to have changed.
            </summary>
        </member>
        <member name="E:Ssz.Xi.Client.XiDataAccessProvider.ValueSubscriptionsUpdated">
            <summary>
                Is called using сallbackDoer, see Initialize(..).
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.Initialize(Ssz.Utils.ElementIdsMap,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,Ssz.Utils.CaseInsensitiveDictionary{System.String})">
            <summary>
                You can set updateValueItems = false and invoke PollElementValuesChangesAsync(...) manually.
            </summary>
            <param name="elementIdsMap"></param>
            <param name="elementValueListCallbackIsEnabled"></param>
            <param name="eventListCallbackIsEnabled"></param>
            <param name="serverAddress"></param>
            <param name="clientApplicationName"></param>
            <param name="clientWorkstationName"></param>
            <param name="systemNameToConnect"></param>
            <param name="contextParams"></param>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.Close">
            <summary>
                Tou can call Dispose() instead of this method.
                Closes without waiting working thread exit.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.CloseAsync">
            <summary>
                Tou can call DisposeAsync() instead of this method.
                Closes WITH waiting working thread exit.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.ReInitialize">
            <summary>
                Re-initializes this object with same settings.
                Items must be added again.
                If not initialized then does nothing.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.AddItem(System.String,Ssz.Utils.DataAccess.IValueSubscription)">
            <summary>        
                Returns id actully used for OPC subscription, always as original id.
                valueSubscription.Update() is called using сallbackDoer, see Initialize(..).        
            </summary>
            <param name="elementId"></param>
            <param name="valueSubscription"></param>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.RemoveItem(Ssz.Utils.DataAccess.IValueSubscription)">
            <summary>        
                If valueSubscription is not subscribed - does nothing.
            </summary>
            <param name="valueSubscription"></param>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.PollElementValuesChangesAsync">
            <summary>                
                If call to server failed returns null, otherwise returns changed ValueSubscriptions.        
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.Write(Ssz.Utils.DataAccess.IValueSubscription,Ssz.Utils.DataAccess.ValueStatusTimestamp,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            
            </summary>
            <param name="valueSubscription"></param>
            <param name="valueStatusTimestamp"></param>
            <param name="userFriendlyLogger"></param>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.WriteAsync(Ssz.Utils.DataAccess.IValueSubscription[],Ssz.Utils.DataAccess.ValueStatusTimestamp[])">
            <summary>     
                No values mapping and conversion.       
                returns failed ValueSubscriptions.
                If connection error, failed ValueSubscriptions is all clientObjs.        
            </summary>
            <param name="valueSubscriptions"></param>
            <param name="valueStatusTimestamps"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.PassthroughAsync(System.String,System.String,System.Byte[])">
            <summary>
                Throws if any errors.
            </summary>
            <param name="recipientId"></param>
            <param name="passthroughName"></param>
            <param name="dataToSend"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.LongrunningPassthroughAsync(System.String,System.String,System.Byte[],System.Action{Ssz.Utils.DataAccess.LongrunningPassthroughCallback})">
            <summary>
                Returns true if succeeded.
            </summary>
            <param name="recipientId"></param>
            <param name="passthroughName"></param>
            <param name="dataToSend"></param>
            <param name="progressCallbackAction"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.BeginInvoke(System.Action{System.Threading.CancellationToken})">
            <summary>
                Invokes Action in working thread with cancellation support.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.DoWork(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="nowUtc"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.Unsubscribe(System.Boolean)">
            <summary>
                Working thread.
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.XiDataListItemsManagerOnElementValuesCallback(System.Object[],Ssz.Utils.DataAccess.ValueStatusTimestamp[])">
            <summary>
                Called using сallbackDoer.
            </summary>
            <param name="changedClientObjs"></param>
            <param name="changedValues"></param>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.AddItem(Ssz.Xi.Client.XiDataAccessProvider.ValueSubscriptionObj)">
            <summary>
                Preconditions: must be Initialized.
                Returns MappedElementIdOrConst
            </summary>
            <param name="valueSubscriptionObj"></param>
            <returns></returns>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.RemoveItem(Ssz.Xi.Client.XiDataAccessProvider.ValueSubscriptionObj)">
            <summary>
                Preconditions: must be Initialized.
            </summary>
            <param name="valueSubscriptionObj"></param>
        </member>
        <member name="F:Ssz.Xi.Client.XiDataAccessProvider._serverAddress">
            <summary>
                Xi Server connection string.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.XiDataAccessProvider._systemNameToConnect">
            <summary>
                Xi System Name.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.XiDataAccessProvider._clientApplicationName">
            <summary>
                Used in Xi Context initialization.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.XiDataAccessProvider._elementValueListCallbackIsEnabled">
            <summary>
                Used in Xi DataList initialization.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.XiDataAccessProvider._clientWorkstationName">
            <summary>
                Used in Xi Context initialization.
            </summary>
        </member>
        <member name="F:Ssz.Xi.Client.XiDataAccessProvider._contextParams">
            <summary>
                Used in Xi Context initialization.
            </summary>
        </member>
        <member name="E:Ssz.Xi.Client.XiDataAccessProvider.EventMessagesCallback">
            <summary>
                Is called using сallbackDoer, see Initialize(..).        
            </summary>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.JournalAddItem(System.String,System.Object)">
            <summary>        
                valueSubscription.Update() is called from сallbackDoer.
            </summary>
            <param name="elementId"></param>
            <param name="valueSubscription"></param>
        </member>
        <member name="M:Ssz.Xi.Client.XiDataAccessProvider.JournalRemoveItem(System.Object)">
            <summary>        
                If valueSubscription is not subscribed - does nothing.
            </summary>
            <param name="valueSubscription"></param>
        </member>
        <member name="T:Xi.Contracts.Constants.AlarmStateChangeCodes">
            <summary>
            This class holds a set of constants used to inform a client 
            as to the cause / reason for the event message to be sent.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.Active">
            <summary>
            The Active State has changed
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.Acknowledge">
            <summary>
            The Acknowledge State has changed. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.Disable">
            <summary>
            The Disable State has changed.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.Priority">
            <summary>
            The Priority has changed.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.Subcondition">
            <summary>
            The Subcondition has changed.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.Message">
            <summary>
            The Message has changed.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.RequestedField">
            <summary>
            One or more of the Requested Fields has changed.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.ContextOptions">
            <summary>
            <para>Context Options provides a set of flags that may be set as part 
            of the IResourceManagement.Initiate() method to allow for debug/tracing 
            and other options to be set for the client's context with the server.
            The implementation of ContextOptions is vendor-specific.</para>
            <para>Values below 0xFFFFFF (the low order 24-bits) are reserved. 
            Vendors may use the high order 8 bits.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.NoOptions">
            <summary>
            No options are set for the Context.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableEnhancedErrorInfo">
            <summary>
            ErrorInfo objects with non-empty ErrorMessages are enabled 
            for the Context.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableMethodTrace">
            <summary>
            Enable tracing of Xi Server method invocations for 
            this context.  When enabled, all calls to Xi Contract
            methods are logged by the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableDetailTrace">
            <summary>
            Enable tracing of internal method invocations. 
            Implementation is server dependent.  It is 
            intended to provide additional details to the
            method invocations logged by EnableMethodTrace.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableErrorLogging">
            <summary>
            Enable the logging of error conditions that occur while
            the server is running.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnablePerfCounters">
            <summary>
            Performance counters are enabled for the Context.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.AllowDifferentClientIpAddress">
            <summary>
            Allows a ReInitiate() request to be issued from a 
            different IpAddress than that used by the previously 
            connected WCF client connection.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.UseServerOptions">
            <summary>
            <para>Requests the server to use context options selected or 
            configured for the server.  How these options are selected by or 
            configured is server-specific.</para>
            <para>These options may include any of the defined context options 
            whose values are less than this option and may also include additional 
            server-specific options.  Selection of this option causes all of the 
            included context options to be used, even if they were not individually
            selected.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableDataAccess">
            <summary>
            Selectively enable access to the server for data.
            If one of the EnableAccessTo bits is not set,
            then all types of access are enabled. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableAlarmsAndEventsAccess">
            <summary>
            Connect to the server for Alarms and Events Access.
            If one of the EnableAccessTo bits is not set,
            then all types of access are enabled. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableJournalDataAccess">
            <summary>
            Connect to the server for Historical Data Access.
            If one of the EnableAccessTo bits is not set,
            then all types of access are enabled. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableJournalAlarmsAndEventsAccess">
            <summary>
            Connect to the server for Historical Alarms and Events Access.
            If one of the EnableAccessTo bits is not set,
            then all types of access are enabled. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.FilterOperandNames">
            <summary>
            A string that represents the name of operand of a single filter criterion.  
            All values are case independent and should be up-shifted or down-shifted by 
            the server when used in comparisons.. They are defined here in camel case 
            for read-ability in displays.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.AccessRight">
            <summary>
            <para>The access rights of an object.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are FilterOperandValues.Read 
            and FilterOperandValues.Write. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.BranchOrLeaf">
            <summary>
            <para>The default behavior for filtering is to select both branches 
            and leaves. This filter operand allows the client to select one 
            or the other. </para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are FilterOperandValues.Branch 
            and FilterOperandValues.Leaf. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.DataType">
            <summary>
            <para>The name of the data type.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are constructed by using the ToString() method 
            for the TypeId of the data type.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.Name">
            <summary>
            <para>The name of the object.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid names are strings.  Servers may optionally support 
            the use of the '?' character to represent any single character 
            and the '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.StartingObjectAttributes">
            <summary>
            <para>An operand with an integer value that specifies whether the server 
            is to return ObjectAttributes only for the object identified by the 
            starting path or for it plus the objects found below it.  The default 
            behavior when this filter operand is omitted is to return ObjectAttributes 
            only for the objects found below the object identified by the starting path.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are the integer representations 
            of the StartingObjectFilterValues enumeration.</para>
            <para>For example, (int)StartingObjectFilterValues.AllObjects
            is used to return ObjectAttributes for the starting object and all 
            objects below it. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.AlarmState">
            <summary>
            <para>The alarm state of an alarm message.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values are defined by the AlarmState enumeration.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.Area">
            <summary>
            <para>The area of an event message.</para> 
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values for this operand are objects whose role is 
            ObjectRole.AreaRoleId. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.EventCategory">
            <summary>
            <para>The category of an event message.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are the categoryIds of the 
            categories defined by the EventCategoryConfigurations Mib element. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.EventConditionName">
            <summary>
            <para>The string representation of the InstanceId of an Event Condition 
            of an event message.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid names are strings generated using the InstanceId ToString() 
            method.  Servers may optionally support the use of the '?' character 
            to represent any single character and the '*' to represent multiple 
            characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.EventPriority">
            <summary>
            <para>The priority of an event message.</para>  
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>The valid values for this operand are integer values. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.EventSourceId">
            <summary>
            <para>The string representation of the InstanceId of an Event Source 
            of an event message.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid names are strings generated using the InstanceId ToString() 
            method.  Servers may optionally support the use of the '?' character 
            to represent any single character and the '*' to represent multiple 
            characters in the LocalId property of the InstanceId.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.EventType">
            <summary>
            <para>The type of an event message.</para> 
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values for this operand are defined by the 
            EventType enumeration. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.MultiplexedAlarmContainer">
            <summary>
            <para>The name of a grouped or eclipsed alarm of an event message.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid names are strings.  Servers may optionally support 
            the use of the '?' character to represent any single character 
            and the '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.OperatorName">
            <summary>
            <para>The operator name of an event message.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.OccurrenceId">
            <summary>
            <para>The occurrence id of an event message.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.OccurrenceTime">
            <summary>
            <para>The occurrence time of an event.</para>  
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>The valid values for this operand are DateTime values. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.TextMessage">
            <summary>
            <para>The text message of an event message.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.TimeLastActive">
            <summary>
            <para>The last active time of an alarm.</para>  
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>The valid values for this operand are DateTime values. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.AbsoluteDeadband">
            <summary>
            <para>The absolute deadband for a floating point value.  If a value has changed by 
            this absolute amount it is considered to have changed for subscription purposes, and 
            will be returned in a poll response or in a callback.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are double values. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.PercentDeadband">
            <summary>
            <para>The percent deadband for a floating point value.  If a value has changed by 
            this percent it is considered to have changed for subscription purposes, and will 
            be returned in a poll response or in a callback.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are double values. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.Archiving">
            <summary>
            <para>The flag that indicates, when TRUE, that a data journal is 
            collecting history a value. </para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The value of this operand is a boolean value. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.DataObjectId">
            <summary>
            <para>The id of the data object within the server that generated a 
            historical value.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.DerivingEquation">
            <summary>
            <para>The equation used to derive a value.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.EngineeringUnits">
            <summary>
            <para>The engineering units of a value. </para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.ExceptionDeviation">
            <summary>
            <para>The minimum change in a data value that causes the value of a data 
            object to be recorded by the data journal. The ExceptionDeviationType 
            indicates whether the change is calcuated using absolute value, percent of span, 
            or percent of value.  </para>
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>Valid values are doubles.  </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.ExceptionDeviationType">
            <summary>
            <para>Indicates whether ExceptionDeviation is expressed in absolute value, 
            percent of span, or percent of value.  </para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are FilterOperandValues.AbsoluteValue, 
            FilterOperandValues.PercentOfSpan, and FilterOperandValues.PercentOfValue. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.MaxTimeInterval">
            <summary>
            <para>The maximum time interval between entries of a historical value. </para>
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>Valid values are TimeSpans.  </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.MaxValue">
            <summary>
            <para>The highest valid value for a data object (its top of span).</para>
            <para>All operators defined by the FilterOperator class are valid, except for 
            "GTE" and "GT".</para>
            <para>The valid values for this operand are dependent on the type of the value. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.MinValue">
            <summary>
            <para>The highest valid value for a data object (its bottom of span).</para>
            <para>All operators defined by the FilterOperator class are valid, except for 
            "LTE" and "LT".</para>
            <para>The valid values for this operand are dependent on the type of the value. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.NormalMaximum">
            <summary>
            <para>The upper limit for the normal maximum of a historical value.</para>
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>Valid values are the string respresentations of the data object value.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.NormalMinimum">
            <summary>
            <para>The lower limit for the normal minimum of a historical value.</para>
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>Valid values are the string respresentations of the data object value.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.OpcHdaTimestampExpression">
            <summary>
            <para>The timestamp of a value represented by an expression.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are defined by the OPC HDA 
            specification. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.ServerMachineName">
            <summary>
            <para>The name or IP address of the machine which the server that 
            generated a historical data value runs.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.ServerName">
            <summary>
            <para>The name the server that generated a historical data value runs.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.ServerType">
            <summary>
            <para>The type of server that generated a historical value.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values include the ToString("G") values for the ServerType 
            enumeration.  </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.Stepped">
            <summary>
            <para>The flag that indicates, when TRUE, that a data journal value 
            is stepped. When FALSE, it is interpolated. </para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The value of this operand is a boolean value. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.Timestamp">
            <summary>
            <para>The timestamp of a value in DateTime format.</para>  
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>The valid values for this operand are DateTime values. </para>
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.FilterOperandValues">
            <summary>
            This class defines standard constant values for filter operands.
            All values are case independent and should be up-shifted or down-shifted by 
            the server when used in comparisons.. They are defined here in camel case 
            for read-ability in displays.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.Branch">
            <summary>
            A valid value for FilterOperand.BranchOrLeaf.  
            This value is used to select objects that are branches.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.Leaf">
            <summary>
            A valid value for FilterOperand.BranchOrLeaf.
            This value is used to select objects that are leaves.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.Read">
            <summary>
            A valid value for FilterOperand.AccessRight.
            This value is used to select readable objects.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.Write">
            <summary>
            A valid FilterOperand.AccessRight value.
            This value is used to select writable objects.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.AbsoluteValue">
            <summary>
            A valid FilterOperand.ExceptionDeviationType value.
            This value is used to select values whose change is calcuated 
            using absolute value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.PercentOfSpan">
            <summary>
            A valid FilterOperand.ExceptionDeviationType value.
            This value is used to select values whose change is calcuated 
            using percent of span.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.PercentOfValue">
            <summary>
            A valid FilterOperand.ExceptionDeviationType value.
            This value is used to select values whose change is calcuated 
            using percent of value.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.FilterOperator">
            <summary>
            This enumeration defines the standard operators that can be used in 
            filters to compare an operand with a value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperator.Equal">
            <summary>
            Equals.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperator.LessThan">
            <summary>
            Less than.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperator.LessThanOrEqual">
            <summary>
            Less than or equals.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperator.GreaterThan">
            <summary>
            Greater than.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperator.GreaterThanOrEqual">
            <summary>
            Greater than or equals.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperator.NotEqual">
            <summary>
            Not equals.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Constants.FilterOperator.ToString(System.UInt32)">
            <summary>
            This method converts a standard filter operator to a string.
            </summary>
            <param name="filterOperator">
            The filter operator to convert.
            </param>
            <returns>The string representation of the filter operator.</returns>
        </member>
        <member name="T:Xi.Contracts.Constants.InstanceIds">
            <summary>
            This class defines standard instance ids.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.ResourceType_MIB">
            <summary>
            The ResourceType for access to the Standard and Vendor MIBs.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.ResourceType_DA">
            <summary>
            The ResourceType for access to Data.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.ResourceType_AE">
            <summary>
            The ResourceType for access to alarms and events.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.ResourceType_HDA">
            <summary>
            The ResourceType for access to historical (journaled) data.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.ResourceType_HAE">
            <summary>
            The ResourceType for access to historical (journaled) alarms and events.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.MibCurrentVersion">
            <summary>
            The InstanceId used for subscribing to the Current Version of the 
            Standard MIB.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.ServerMibVersionId">
            <summary>
            <para>The InstanceId of the Version number of Standard MIB object.  
            This InstanceId allows the client to add this version number to a data list 
            and be notified via callbacks or polling when the state changes.</para>
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.JournalDataSampleTypes">
            <summary>
            Standard sample types for historical data
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.JournalDataSampleTypes.RawDataSamples">
            <summary>
            This is the Calculation LocalId for Raw Data Reads.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.JournalDataSampleTypes.AtTimeDataSamples">
            <summary>
            This is the Calculation LocalId for Specific Times.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.JournalDataSampleTypes.ChangedDataSamples">
            <summary>
            This is the Calculation LocalId for Changed Samples.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.JournalDataSampleTypes.DataSampleTypeUndefined">
            <summary>
            Values equal to or greater than this value for Calculation LocalId are undefined.
            They are reserved to indicated that the Calculation LocalId has not beeen set.
            value should be considered reserved.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.ListElementOptions">
            <summary>
            <para>List Element Options provides a set of flags that may be set as part 
            of adding elements to an Xi list. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ListElementOptions.Default">
            <summary>
            No options are set for the List Element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ListElementOptions.AccessAsString">
            <summary>
            Override the default type of a data object list element, 
            and access it as a string type.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.ObjectRoleIds">
            <summary>
            Object Roles are identified using TypeIds. This allows different 
            organizations to define ObjectRoles.  This class defines standard 
            ObjectRoles.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.AreaRootRoleId">
            <summary>
            <para>The TypeId for the object that represents the 
            plant area root. Plant area roots may themselves be 
            plant areas.</para> 
            <para>Each system is allowed to have only one plant area 
            root to allow clients to easily discover the areas of a 
            system.  However, plants may have multiple systems, each 
            with its own plant area root.  It is required that the  
            area root for a system is located directly below the 
            "Root" of the system.  </para>
            <para>Plant areas can always be found directly below the 
            area root object or directly under another plant area. 
            Therefore, the path of plant areas always contain the name 
            of the area root followed by one or more area names.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.AreaRoleId">
            <summary>
            The TypeId for objects that represent plant areas.  The 
            description of AreaRoot describes the organization of plant 
            areas beneath the Area Root.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.EventSourceRoleId">
            <summary>
            The TypeId for objects that represent event sources.  Event  
            soruces can always be found directly below a plant area.  It  
            is also possible that they can be found below other objects 
            in the system, but there must be at least one path to them in 
            which they are a direct child of an area.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.OpcBranchRoleId">
            <summary>
            The TypeId for objects that represent OPC DA Server Branches.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.OpcLeafRoleId">
            <summary>
            The TypeId for objects that represent OPC DA Server Leaves.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.OpcPropertyRoleId">
            <summary>
            The TypeId for objects that represent Opc Server Properties.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.HdaBranchRoleId">
            <summary>
            The TypeId for objects that represent OPC HDA Server Branches.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.HdaLeafRoleId">
            <summary>
            The TypeId for objects that represent OPC HDA Server Leaves.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.PnrpMeshNames">
            <summary>
            This class defines standard mesh names used to register Xi Servers and 
            Xi Discovery Servers
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.PnrpMeshNames.XiDiscoveryServerMesh">
            <summary>
            <para>The Peer TypeId Resolution Protocol (PNRP) standard peer name for the 
            mesh of Xi Directory Services.  The IServerDiscovery.DiscoverServers() 
            method supported by Xi Directory Services is used by clients to access 
            a list Xi Servers.</para>
            <para>Xi Directory Services maintain a list of Xi servers that it 
            discovers using PNRP XiDiscoveryServerMesh and/or other means. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.PnrpMeshNames.XiServerMesh">
            <summary>
            The standard peer name for the mesh of Xi Servers.  This mesh is used 
            by Xi Directory Services to discover Xi servers that are capable of 
            registering themselves using the Peer TypeId Resolution Protocol (PNRP).
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.ServerType">
            <summary>
            This class defines standard server types.  A server may 
            support one or more server types.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.Xi_ServerDiscoveryServer">
            <summary>
            The server is a server discovery server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.Xi_DataServer">
            <summary>
            The server is a native Xi data server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.Xi_EventServer">
            <summary>
            The server is a native Xi event server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.Xi_DataJournalServer">
            <summary>
            The server is a native Xi data journal server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.Xi_EventJournalServer">
            <summary>
            The server is a native Xi event journal server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_DA205_Wrapper">
            <summary>
            The server wraps an OPC DA 2.05 server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_AE11_Wrapper">
            <summary>
            The server wraps an OPC Alarms and Events 1.1 server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_HDA12_Wrapper">
            <summary>
            The server wraps an OPC HDA 1.2 server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_DA30_Wrapper">
            <summary>
            The server wraps an OPC DA 3.0 server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_XMLDA_Wrapper">
            <summary>
            The server wraps an OPC XMLDA server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_UA_DA_Wrapper">
            <summary>
            The server wraps an OPC UA Data Access server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_UA_AC_Wrapper">
            <summary>
            The server wraps an OPC UA Alarms and Conditions server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_UA_HDA_Wrapper">
            <summary>
            The server wraps an OPC UA Historical Data Access server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.Xi_BaseServer">
            <summary>
            The base Xi server that wraps one or more OPC servers.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Constants.ServerType.ToString(System.UInt32)">
            <summary>
            This method constructs a string that contains each of the server 
            types specified by the serverTypes parameter.
            </summary>
            <param name="serverTypes">
            A bit-mask that identifies each of the server types.
            </param>
            <returns>
            The string representation of the server types.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Constants.ServerType.ConvertToContextOptions(System.UInt32)">
            <summary>
            This method returns the context options for the Server Type.
            </summary>
            <param name="serverType">The server type to be converted to the corresponding ContextOptions</param>
            <returns></returns>
        </member>
        <member name="T:Xi.Contracts.Constants.SortType">
            <summary>
            This enumeration specifies how a list is sorted.
            The sort keys are defined by the list attributes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.SortType.NotSorted">
            <summary>
            The list is not sorted.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.SortType.Ascending">
            <summary>
            The list is sorted in ascending order.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.SortType.Descending">
            <summary>
            The list is sorted in descending order.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.StandardListType">
            <summary>
            This enumeration specifies the standard types of lists.
            The enumerated values between 0 and 4095 inclusive are reserved 
            for standard types.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.StandardListType.DataList">
            <summary>
            The type of list that contains data objects.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.StandardListType.DataJournalList">
            <summary>
            The type of list that contains historical data objects.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.StandardListType.EventList">
            <summary>
            The type of list that contains alarms and events.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.StandardListType.EventJournalList">
            <summary>
            The type of list that contains historical alarms and events.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.StartingObjectFilterValues">
            <summary>
            This enumeration defines the valid values for the StartingObjectAttributes 
            filter operand.  All values for this operand are passed in FilterCriterion as 
            integers.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.StartingObjectFilterValues.StartingObjectOnly">
            <summary>
            A valid FilterOperand.StartingObjectAttributes value.
            This value is used to specify that the server is to return 
            ObjectAttributes only for the object identified by the starting 
            path.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.StartingObjectFilterValues.AllObjects">
            <summary>
            A valid FilterOperand.StartingObjectAttributes value.
            This value is used to specify that the server is to return 
            ObjectAttributes for the object identified by the starting 
            path AND for the objects found below it.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiFaultCodes">
            <summary>
            <para>This class defines standard Xi success and fault codes.
            Xi servers can report error to the client as:</para>
            <para>a)	Exceptions, if the handling of a request completely fails</para>
            <para>b)	Result codes. These are uint values that hold any HResult code.</para> 
            <para>c)	Status codes. These are used only in methods that return data values. </para>
            <para>	The uint status code merges OPC quality and a subset of HResult codes. </para>
            <para>	Additional error info can be passed in the associated ErrorInfo object.</para>
            <para>NOTE: Entries in this file should have a corresponding entry in either ErrorCodes.xml
            or ErrorCodesOpc.xml except Win32/COM error code values that are defined here with the
            exact values from WinError.h or other Microsoft defined error codes.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.S_OK">
            <summary>
            This code indicates success.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.S_FALSE">
            <summary>
            This code is used to indicate success with additional failure information;
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_NOTIMPL">
            <summary>
            <para>Win32 Error Code</para>
            This is the standard error code for not implemented.  
            It is used as both a result code and in exceptions 
            when a function is not implemented.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_FAIL">
            <summary>
            <para>Win32 Error Code</para>
            This code indicates a general failure.  The error text 
            associated with this error code may be more 
            specific.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_NOCONTEXT">
            <summary>
            This code indicates failure.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_BADLISTID">
            <summary>
            This code indicates that an invalid list id was used.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_BADENDPOINTID">
            <summary>
            This code indicates that an invalid endpoint id was used.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_ALIASNOTFOUND">
            <summary>
            No match was found for the server alias supplied.
            Alias value (client alias) is returned as the client alias.
            No translation to server alias is possible.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_SEEERRORINFO">
            <summary>
            See the Error Info structure for information.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_NOTFOUND">
            <summary>
            This code indicates that the requested object was not found.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_LISTDISABLED">
            <summary>
            This code indicates that the requested operation could not be completed 
            because the list was in the disabled state.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_BADARGUMENT">
            <summary>
            This code indicates that the request contained a bad parameter value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_INCONSISTENTUSEAGE">
            <summary>
            This code indicates that parameter of a method identifies an object whose 
            type is inconsistent with the method. For example, EnableListElementUpdating() 
            returns E_INCONSISTENTUSEAGE for a serverAlias if that serverAlias does not 
            identify a list element whose type is not DataListValue.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_INVALIDREQUEST">
            <summary>
            The requested action is invalid.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_ENDPOINTERROR">
            <summary>
            The requested operation failed due to an Endpoint related error condition.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_INCONSISTENT_TRANSPORTDATATYPE">
            <summary>
            The Transport Data Type is not valid or is inconsistent.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_SERVER_SHUTDOWN">
            <summary>
            The server has shutdown.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_WRAPPEDSERVER_NOT_ACCESSIBLE">
            <summary>
            The wrapped server is not accessible.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_WRAPPEDSERVER_EXCEPTION">
            <summary>
            An exception occured in a COM server method
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_LISTNOTATTACHEDTOENDPOINT">
            <summary>
            This code indicates that the requested operation could not be completed 
            because the list was not attached to the appropriate endpoint.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_LISTELEMENTDISABLED">
            <summary>
            This code indicates that the requested operation could not be completed 
            because the list element was in the disabled state.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_INVALIDVALUE_BADSTATUS">
            <summary>
            This Error code is used when an exception was caught and the message 
            from that exception is being returned.
            This Error Code value is duplicated from Xi.Contract.Data.XiFault
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_LISTDELETED">
            <summary>
            This code indicates that an invalid list id was used.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_XIMESSAGEFROMTEXT">
            <summary>
            This Error Code is used when an internal Xi Server fault has occurred.
            This Error Code value is duplicated from Xi.Contract.Data.XiFault
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_XIMESSAGEFROMEXCEPTION">
            <summary>
            This Error code is used when an exception was caught and the message 
            from that exception is being returned.
            This Error Code value is duplicated from Xi.Contract.Data.XiFault
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDHANDLE">
            <summary>
            MessageId: OPC_E_INVALIDHANDLE
            MessageText:
            An invalid handle was passed.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_BADTYPE">
            <summary>
            MessageId: OPC_E_BADTYPE
            MessageText:
            The server cannot convert between the passed or requested data type and the canonical type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_PUBLIC">
            <summary>
            MessageId: OPC_E_PUBLIC
            MessageText:
            The requested operation cannot be done on a public group.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_BADRIGHTS">
            <summary>
            MessageId: OPC_E_BADRIGHTS
            MessageText:
            The item's AccessRights do not allow the operation.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_UNKNOWNITEMID">
            <summary>
            MessageId: OPC_E_UNKNOWNITEMID
            MessageText:
            The item definition does not exist within the servers address space.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDITEMID">
            <summary>
            MessageId: OPC_E_INVALIDITEMID
            MessageText:
            The item definition does not conform to the server's syntax.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDFILTER">
            <summary>
            MessageId: OPC_E_INVALIDFILTER
            MessageText:
            The filter string is not valid.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_UNKNOWNPATH">
            <summary>
            MessageId: OPC_E_UNKNOWNPATH
            MessageText:
            The item's access path is not known to the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_RANGE">
            <summary>
            MessageId: OPC_E_RANGE
            MessageText:
            The value passed to WRITE was out of range.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_DUPLICATE_NAME">
            <summary>
            MessageId: OPC_E_DUPLICATE_NAME
            MessageText:
            A group with a duplicate name already exists in the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_UNSUPPORTEDRATE">
            <summary>
            MessageId: OPC_S_UNSUPPORTEDRATE
            MessageText:
            The server does not support the requested rate, but will use the closest available.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_CLAMP">
            <summary>
            MessageId: OPC_S_CLAMP
            MessageText:
            A value passed to WRITE was accepted, but was clamped.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_INUSE">
            <summary>
            MessageId: OPC_S_INUSE
            MessageText:
            The operation  cannot be completed because the object still has references that exist.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDCONFIGFILE">
            <summary>
            MessageId: OPC_E_INVALIDCONFIGFILE
            MessageText:
            The server's configuration file is an invalid format.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_NOTFOUND">
            <summary>
            MessageId: OPC_E_NOTFOUND
            MessageText:
            The server could not locate the requested object.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALID_PID">
            <summary>
            MessageId: OPC_E_INVALID_PID
            MessageText:
            The server does not recognise the passed property ID.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_MAXEXCEEDED">
            <summary>
            MessageId: OPC_E_MAXEXCEEDED
            MessageText:
             The maximum number of values requested exceeds the server's limit.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_NODATA">
            <summary>
            MessageId: OPC_S_NODATA
            MessageText:
             There is no data within the specified parameters.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_MOREDATA">
            <summary>
            MessageId: OPC_S_MOREDATA
            MessageText:
             There is more data satisfying the query than was returned.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDAGGREGATE">
            <summary>
            MessageId: OPC_E_INVALIDAGGREGATE
            MessageText:
             The aggregate requested is not valid.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_CURRENTVALUE">
            <summary>
            MessageId: OPC_S_CURRENTVALUE
            MessageText:
             The server only returns current values for the requested item attributes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_EXTRADATA">
            <summary>
            MessageId: OPC_S_EXTRADATA
            MessageText:
             Additional data satisfying the query was found.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_W_NOFILTER">
            <summary>
            MessageId: OPC_W_NOFILTER
            MessageText:
             The server does not support this filter.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_UNKNOWNATTRID">
            <summary>
            MessageId: OPC_E_UNKNOWNATTRID
            MessageText:
             The server does not support this attribute.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_NOT_AVAIL">
            <summary>
            MessageId: OPC_E_NOT_AVAIL
            MessageText:
             The requested aggregate is not available for the specified item.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDDATATYPE">
            <summary>
            MessageId: OPC_E_INVALIDDATATYPE
            MessageText:
             The supplied value for the attribute is not a correct data type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_DATAEXISTS">
            <summary>
            MessageId: OPC_E_DATAEXISTS
            MessageText:
             Unable to insert - data already present.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDATTRID">
            <summary>
            MessageId: OPC_E_INVALIDATTRID
            MessageText:
             The supplied attribute ID is not valid.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_NODATAEXISTS">
            <summary>
            MessageId: OPC_E_NODATAEXISTS
            MessageText:
             The server has no value for the specified time and item ID.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_INSERTED">
            <summary>
            MessageId: OPC_S_INSERTED
            MessageText:
             The requested insert occurred.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_REPLACED">
            <summary>
            MessageId: OPC_S_REPLACED
            MessageText:
             The requested replace occurred.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_ALREADYACKED">
            <summary>
            MessageId: OPC_S_ALREADYACKED
            MessageText:
             The condition has already been acknowleged
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_INVALIDBUFFERTIME">
            <summary>
            MessageId: OPC_S_INVALIDBUFFERTIME
            MessageText:
             The buffer time parameter was invalid
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_INVALIDMAXSIZE">
            <summary>
            MessageId: OPC_S_INVALIDMAXSIZE
            MessageText:
             The max size parameter was invalid
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDBRANCHNAME">
            <summary>
            MessageId: OPC_E_INVALIDBRANCHNAME
            MessageText:
             The string was not recognized as an area name
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDTIME">
            <summary>
            MessageId: OPC_E_INVALIDTIME
            MessageText:
             The time does not match the latest active time
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_BUSY">
            <summary>
            MessageId: OPC_E_BUSY
            MessageText:
             A refresh is currently in progress
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_NOINFO">
            <summary>
            MessageId: OPC_E_NOINFO
            MessageText:
             Information is not available
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiFeatures">
            <summary>
            This enumeration assigns a flag value to each of the Xi 
            features and then defines standard sets of features required  
            for all data, event, data journal, and event journal servers.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFeatures.CustomDataType_Feature">
            <summary>
            The server supports custom data types.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFeatures.AbsoluteDeadband_Feature">
            <summary>
            The server supports the use of absolute deadband filters in 
            addition to the standard percent deadband filters.  Percent 
            deadband filters define the the percent of change relative 
            to the valid value range for a data object, while absolute 
            deadband defines the percentage of change relative to the 
            value (the range is not taken into account).
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFeatures.IndexedAccess_Feature">
            <summary>
            The server supports the capability to access individual elements 
            of arrays and structures. Individual elements are identified 
            using 0-based indexes for arrays and 1-based indexes for 
            structures.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFeatures.IndexedRangeAccess_Feature">
            <summary>
            The server supports the capability to access a range of array 
            elements or fields of a structure. Ranges are identified using 
            a pair of indexes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFeatures.MibVersionSubscribe_Feature">
            <summary>
            The server supports the capability to add the Standard MIB 
            Version number to a list.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFeatures.BufferingRate_Feature">
            <summary>
            The server supports the bufferingRate parameter of the 
            IResourceManagement.DefineList() method.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiNamespace">
            <summary>
            This class defines the standard namespaces defined for the Xi specification.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.Xi">
            <summary>
            The Xi namespace. The string for the Xi Namespace is null because 
            the .NET namespace is embedded in the type id when calling the 
            TypeId.ToString() method to create a TypeId string.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.OPCDA205">
            <summary>
            The OPC DA 2.05 namespace.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.OPCDA30">
            <summary>
            The OPC DA 3.0 namespace.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.OPCAEAttribute">
            <summary>
            The namespace for OPC Alarms and Events Attributes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.OPCAECategory">
            <summary>
            The namespace for OPC Alarms and Events Categories.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.OPCHDA">
            <summary>
            The OPC HDA 1.2 namespace.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.OPCUA10">
            <summary>
            The OPC UA 1.0 namespace.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiSchemaType">
            <summary>
            This enumeration specifies the standard Xi schema types.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.Xi">
            <summary>
            <para>This SchemaType indicates that the type is defined by the 
            Xi Interface Contracts or by the .NET CLS, and that LocalId member 
            of the Xi TypeId is the string representation of the type using the 
            typeof() method. For this schema type, the Namespace element of the 
            TypeId is always null, since the namespace is incorporated into the 
            .NET type name.  </para> 
            <para>E.g. "typeof(double).ToString()" results in a TypeId as follows:</para>
            <para>	SchemaType = null</para>
            <para>	Namespace = null</para>
            <para>	LocalId = "System.Double"</para>
            <para>The string for the Xi SchemaType is null to 
            allow the TypeId.ToString() method to create a simple 
            TypeId string.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.LocalServer">
            <summary>
            This SchemaType indicates that the type is defined by the 
            local server and that type of the LocalId member of the TypeId 
            is one of the standard CLS scalar types (e.g. int, string). 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.Xml">
            <summary>
            This SchemaType indicates that the type is defined using 
            a W3C XML Schema.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.ASN1">
            <summary>
            This SchemaType indicates that the type is defined using 
            the CCITT X.680 Abstract Syntax Notation One (ASN.1). 
            ASN.1 is used for defining data types.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.EDDL">
            <summary>
            <para>This SchemaType indicates that the type is defined 
            using the IEC 61804 EDDL language. The EDDL SchemaType 
            is used to define object types for device parameters 
            and blocks. Example parameters include Setpoint and 
            ProcessVariable, and example blocks include PID, AI, 
            and AO blocks.</para>
            <para>The EDDL SchemaType is also used to define the data 
            types for device blocks and parameters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.FmsOdIndex">
            <summary>
            <para>This SchemaType indicates that the type is defined 
            using the IEC 61158 FMS Object Dictionary (FMS OD). The 
            FMS OD SchemaType is used to define data types for device 
            data, including function block data, network management 
            data, and system management data.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.FFProfileNumber">
            <summary>
            <para>This SchemaType indicates that the type is defined 
            by the Fieldbus Foundation using a profile number.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.OPC">
            <summary>
            This SchemaType indicates that the LocalId of the TypeId 
            identifies the semantic type of an OPC element, such as a 
            DA Property, AE Attribute, AE Condition, or HDA Attribute. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType">
            <summary>
            The AdditionalDetailType indicates how the 16-bit AdditionalDetail 
            property of the StatusCode is used. Unused values are reserved. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.AdditionalDetailTypeMask">
            <summary>
            This mask value may be used to keep only the Additional Detail Type code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.AdditionalDetailMask">
            <summary>
            Use this mask to keep the Additional Details Value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.NotUsed">
            <summary>
            The AdditionalDetail property is not used and should be ignored.
            Its value should be set to 0. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.VendorSpecificDetail">
            <summary>
            The AdditionalDetail property contains a vendor-specific value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.VendorSpecificDetailBits">
            <summary>
            The AdditionalDetail property contains a vendor-specific value
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.DefaultHResult">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of the default HRESULT (Facility Code = 0). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.DefaultHResultBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of the default HRESULT (Facility Code = 0). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.XiHResult">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of an Xi HRESULT (Facility Code = 0x777). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.XiHResultBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of an Xi HRESULT (Facility Code = 0x777). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.IO_ERROR_CODE">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a FACILITY_IO_ERROR_CODE NTSTATUS (Facility Code = 4). The 
            StatusCode.HRESULT() method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.IO_ERROR_CODEBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a FACILITY_IO_ERROR_CODE NTSTATUS (Facility Code = 4). The 
            StatusCode.HRESULT() method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.ITF_HResult">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a COM FACILITY_ITF HRESULT (Facility Code = 4). The 
            StatusCode.HRESULT() method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.ITF_HResultBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a COM FACILITY_ITF HRESULT (Facility Code = 4). The 
            StatusCode.HRESULT() method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.Win32HResult">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a Win32 HRESULT (Facility Code = 5). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.Win32HResultBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a Win32 HRESULT (Facility Code = 5). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.AdditionalErrorCode">
            <summary>
            <para>This code is used to indicate that an additional HRESULT 
            accompanies this StatusCode.  The additional HRESULT is contained 
            in the HResult member of an ErrorInfo object that is located in the 
            ErrorInfo list contained in the DataValueArrays in which this StatusCode 
            is present.</para>  
            <para>This code does not have to be present if the Context was opened 
            with ContextOptions set to DebugErrorMessages using either the 
            Initiate() or ReInitiate() method.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.AdditionalErrorCodeBits">
            <summary>
            <para>This code is used to indicate that an additional HRESULT 
            accompanies this StatusCode.  The additional HRESULT is contained 
            in the HResult member of an ErrorInfo object that is located in the 
            ErrorInfo list contained in the DataValueArrays in which this StatusCode 
            is present.</para>  
            <para>This code does not have to be present if the Context was opened 
            with ContextOptions set to DebugErrorMessages using either the 
            Initiate() or ReInitiate() method.</para>
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.VendorSpecific(System.UInt32)">
            <summary>
            This property returns the AdditionalDetail as a 16-bit vendor-specific value 
            if the AdditionalDetailType is set to AdditionalDetailType.VendorSpecific.  
            If the AdditionalDetailType is set to a different value, 0 is returned.
            </summary>
            <param name="statusCode">
            The 32-bit status code from which AdditionalDetail is to be extracted. 
            </param>
            <returns>
            The vendor-specific AdditionalDetail value. 0 if the AdditionalDetailType 
            indicates that the AdditionalDetail does not contain a vendor-specific value.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType">
            <summary>
            The HistoricalValueType is a 3-bit property that describes the 
            the historical data value associated with the Status Code.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.HistoricalValueTypeMask">
            <summary>
            This value may be used to mask (keep) the bits 
            used to convey the historical data value type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.HistoricalValueTypeShiftCount">
            <summary>
            This value provides the number of bits to shift 
            the historical data value type bits into the 
            low bits or into the Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.NotUsed">
            <summary>
            The historical value type is not used. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.RawValue">
            <summary>
            The value is the raw value.  If the value is a raw value with more 
            than one raw value at the same timestamp, then the ExtraValue 
            enumeration should be used instead of this one.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.RawValueBits">
            <summary>
            The value is the raw value.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.NoValue">
            <summary>
            No value exists in the journal for the requested data object 
            that meets the specified selection criteria.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.NoValueBits">
            <summary>
            No value exists in the journal for the requested data object 
            that meets the specified selection criteria.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.ExtraValue">
            <summary>
            The value is a raw value, and more than one raw value exists at same timestamp. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.ExtraValueBits">
            <summary>
            More than one value exists at same timestamp. 
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.LostValue">
            <summary>
            Collection started / stopped / lost.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.LostValueBits">
            <summary>
            Collection started / stopped / lost.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.InterpolatedValue">
            <summary>
            The value has been interpolated.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.InterpolatedValueBits">
            <summary>
            The value has been interpolated.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.CalculatedValue">
            <summary>
            The value has been calculated.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.CalculatedValueBits">
            <summary>
            The value has been calculated.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.PartialCalculatedValue">
            <summary>
            The value is a calculated value for an incomplete interval.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.PartialCalculatedValueBits">
            <summary>
            The value is a calculated value for an incomplete interval.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.HistoricalNoBoundingFlg">
            <summary>
            Xi Status Code Flag bit for historical data with no upper or lower bounding values. 
            This flag is not part of the HistoricalValueType bits, but is the bit just before them 
            (from the right) in the Xi Status code. Its definition is included in this class because 
            of its relationship to the other historical bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.HistoricalConversionErrorFlg">
            <summary>
            Flag bit for Historical Conversion Error. 
            This flag is not part of the HistoricalValueType bits, but is the second bit just before them 
            (from the right) in the Xi Status code. Its definition is included in this class because 
            of its relationship to the other historical bits.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiStatusCodeLimitBits">
            <summary>
            The Limit bits indicates whether a value is liimited or not.
            It is valid regardless of the values of the StatusBits and SubstatusBits. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.LimitBitsMask">
            <summary>
            This value may be used to mask (keep) the bits 
            used to convey the limited status of the value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.LimitBitsShiftCount">
            <summary>
            This value provides the number of bits to shift 
            the limit bits into the low bits or into the 
            Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.NotLimited">
            <summary>
            The value is free to move up or down. This value is 
            used as the default value when the limit bits do not apply.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.NotLimitedBits">
            <summary>
            The value is free to move up or down. This value is 
            used as the default value when the limit bits do not apply.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.LowLimited">
            <summary>
            The value has ‘pegged’ at some lower limit and 
            cannot move any lower.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.LowLimitedBits">
            <summary>
            The value has ‘pegged’ at some lower limit and 
            cannot move any lower.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.HighLimited">
            <summary>
            The value has ‘pegged’ at some high limit and 
            cannot move any higher.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.HighLimitedBits">
            <summary>
            The value has ‘pegged’ at some high limit and 
            cannot move any higher.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.Constant">
            <summary>
            The value is a constant and cannot move.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.ConstantBits">
            <summary>
            The value is a constant and cannot move.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiStatusCodeStatusBits">
            <summary>
            <para>The Status Bits are the high-order 6 bits of the high-order byte (the StatusByte) of the XiStatus 
            code as defined in Xi.Contracts.Data.XiStatusCode.  The high-order two bits of the Status Bits are the 
            Status Group bits. They indicate whether a value is good, bad, or uncertain and when bad, whether or 
            not the bad status was assigned by the server. Server assigned bad status codes are typically assigned 
            when the server is unable to retrieve the value from the underlying system.</para>  
            <para>The four bits following the two Status Group bits indicate the reason associated with the Status 
            Group bits value.  The final two bits of the StatusByte are the limit bits. Their values are defined 
            in Xi.Contracts.Contstants.XiStatusCodeLimitBits.  This layout is summarized as follows.</para>
            <para>GGRRRRLL, where </para>
            <para>    GG     = Status Group Bits</para>
            <para>    RRRR   = Reason Bits </para>
            <para>    LL     = Limit Bits </para>
            <para>In the value definitions for the StatusBits, GG values are individually defined, but the 
            Reason Bit values are defined in combination with the Group Bits as GGRRRR. The Limit Bits are 
            separately defined in Xi.Contracts.Contstants.XiStatusCodeLimitBits.</para>
            <para>This class defines values for the 2-bit Status Group Bits, the 6-bit Status Bits, and 
            additional values for their manipulation, such as bit masks and shift values.</para>
            <para>In general there are two definitions for each 2-bit Status Group Bits value and each 6-bit 
            Status Bits value.  One value is the hex representation of the two-bit value or the six-bit value. 
            The other is the hex representation in the context of the full 32-bit Xi Status Code. For example,
            the GG bits for the Uncertain value are 01. Therefore, the two definitions for it are: </para>
            <para>StatusCodeStatusGroupUncertain = 0x1,  // two-bit value</para>
            <para>StatusCodeStatusGroupUncertainBits = 0x40000000, // 32-bit value</para>
            <para>The BadServerAccess values are used to indicate that the Xi server was unable to access 
            the data object value from the underlying OPC Classic server or from the underlying system.</para>
            <para>In general an HRESULT value of SUCCEEDED(hr) returned by the OPC Classic server indicates 
            successful access of the data object. In these cases, the Xi server would normally use the OPC 
            Quality returned with the data object value to construct the Xi Status Code.</para>
            <para>However, there can be HRESULT values that are SUCCEEDED(hr), but that indicates that the OPC 
            Classic server was unable to access the data object, and where the OPC Quality returned is not useful. 
            In these cases, the Xi server can construct an Xi Status Code that indicates BAD SERVER ACCESS. 
            BAD SERVER ACCESS can also be constructed by the Xi Server when the returned HRESULT indicates 
            failure.</para>
            <para>See ValueStatusCode in both Xi Common Support and Xi OPC Com API for additional 
            details on the encoding of HRESULT values.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusByteMask">
            <summary>
            Mask used to obtain the full Status Byte
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusMask">
            <summary>
            The mask for the Status Bits (the high-order six bits) of the Xi Status Code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeShiftCount">
            <summary>
            The StatusCodeShiftCount is used to shift the Status Bits (the high-order six bits) 
            of the Xi Status Code uint to its low-order six bits, or to initially set the Status 
            Bits value into a uint that is to become the Xi Status Code and then shift them to 
            the high-order six bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.SubStatusBitsShiftedMask">
            <summary>
            Mask used to keep the shifted sub status code bits
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusByteShiftCount">
            <summary>
            The StatusCodeStatusByteShiftCount is used to shift the Status Byte (the high-order 
            byte) of the Xi Status Code uint to its low-order byte, or to initially set the 
            Status Byte value into a uint that is to become the Xi Status Code and then shift 
            them to the high-order byte. Note that the Xi Status Byte uses the same bit pattern 
            as the low order byte of the OPC DA Quality so it can be copied the Xi Status Code 
            uint and then shifted to the proper byte position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupMask">
            <summary>
            The mask for the Status Group Bits (the high order two bits) of the Xi Status Code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeSubstatusBitsMask">
            <summary>
            The mask for the SubStatus bits of the Xi Status Code. The substatus bits are the 
            four bits that follow the Status Group Bits (the two high order bits).
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupShiftCount">
            <summary>
            The StatusCodeStatusGroupShiftCount is used to shift the Status Group Bits (the high-order 
            two bits) of the Xi Status Code uint to its low-order two bits, or to initially set the Status 
            Group Bits value into a uint that is to become the Xi Status Code and then shift them to 
            the high-order two bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupBad">
            <summary>
            The 2-bit value for bad status. This value can be used to test for bad 
            status after shifting the Status Group bits of a Xi Status Code uint to its 
            low-order two bits. It can also be used to set the high-order two bits 
            to indicate bad status by setting the Xi Status Code uint to this value and 
            then shifting it to the high-order two bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupBadBits">
            <summary>
            The 32-bit value for bad status. This value can be used to test for 
            bad status after masking off the lower 30 bits of the Xi Status Code. 
            It can also be used when constructing a bad status code by setting the 
            Xi Status Code uint to this value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupUncertain">
            <summary>
            The 2-bit value for uncertain status. This value can be used to test for uncertain 
            status after shifting the Status Group bits of a Xi Status Code uint to its 
            low-order two bits. It can also be used to set the high-order two bits 
            to indicate uncertain status by setting the Xi Status Code uint to this value and 
            then shifting it to the high-order two bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupUncertainBits">
            <summary>
            The 32-bit value for uncertain status. This value can be used to test for 
            uncertain status after masking off the lower 30 bits of the Xi Status Code. 
            It can also be used when constructing an uncertain status code by setting the 
            Xi Status Code uint to this value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupServerBad">
            <summary>
            The 2-bit value for bad server access status. This value can be used to test for 
            bad server access status after shifting the Status Group bits of a Xi Status Code 
            uint to its low-order two bits. It can also be used to set the high-order two bits 
            to indicate bad server access status by setting the Xi Status Code uint to this 
            value and then shifting it to the high-order two bits.  Bad server access indicates 
            that the Xi server was unable to access the underlying data source (e.g. OPC DA server) 
            for the value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupServerBadBits">
            <summary>
            The 32-bit value for bad server access status. This value can be used to test for 
            bad server access status after masking off the lower 30 bits of the Xi Status Code. 
            It can also be used when constructing a bad server access status code by setting the 
            Xi Status Code uint to this value.  Bad server access indicates that the Xi server 
            was unable to access the underlying data source (e.g. OPC DA server) for the value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupGood">
            <summary>
            The 2-bit value for good status. This value can be used to test for good status 
            after shifting the Status Group bits of a Xi Status Code uint to its low-order two bits. 
            It can also be used to set the high-order two bits to indicate good status by setting 
            the Xi Status Code uint to this value and then shifting it to the high-order two bits.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupGoodBits">
            <summary>
            The 32-bit value for good status. This value can be used to test for good status after
            masking off the lower 30 bits of the Xi Status Code. 
            It can also be used when constructing a good status code by setting the Xi Status Code 
            uint to this value.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadNonSpecific">
            <summary>
            The value is bad but no specific reason is known.
            Use Bad Non Specific when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadNonSpecificBits">
            <summary>
            The value is bad but no specific reason is known.
            Use Bad Non Specific Bits when the value is in the Xi defined high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadConfigError">
            <summary>
            There is some server specific problem with the 
            configuration. For example the item in question has 
            been deleted from the configuration.
            Use Bad Config Error when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadConfigErrorBits">
            <summary>
            There is some server specific problem with the 
            configuration. For example the item in question has 
            been deleted from the configuration.
            Use Bad Config Error Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadNotConnected">
            <summary>
            The input is required to be logically connected to 
            something but is not. This quality may reflect that no 
            value is available at this time, for reasons like the 
            value may have not been provided by the data source.
            Use Bad Not Connected when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadNotConnectedBits">
            <summary>
            The input is required to be logically connected to 
            something but is not. This quality may reflect that no 
            value is available at this time, for reasons like the 
            value may have not been provided by the data source.
            Use Bad Not Connected Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadDeviceFailure">
            <summary>
            A device failure has been detected.
            Use Bad Device Fallure when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadDeviceFailureBits">
            <summary>
            A device failure has been detected.
            Use Bad Device Failure Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadSensorFailure">
            <summary>
            A sensor failure had been detected (the ’Limits’ field 
            can provide additional diagnostic information in some 
            situations).
            Use Bad Sensor Fallure when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadSensorFailureBits">
            <summary>
            A sensor failure had been detected (the ’Limits’ field 
            can provide additional diagnostic information in some 
            situations).
            Use Bad Sensor Failure Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadLastKnownValue">
            <summary>
            Communications have failed. However, the last known value 
            is available. Note that the ‘age’ of the value may be 
            determined from its timestamp.
            Use Bad Last Known Value when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadLastKnownValueBits">
            <summary>
            Communications have failed. However, the last known value 
            is available. Note that the ‘age’ of the value may be 
            determined from its timestamp.
            Use Bad Last Known Value Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadCommFailure">
            <summary>
            Communications have failed. There is no last known 
            value available.
            Use Bad Comm Fallure when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadCommFailureBits">
            <summary>
            Communications have failed. There is no last known 
            value available.
            Use Bad Comm Failure Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadOutOfService">
            <summary>
            The block is off scan or otherwise locked. This code 
            is also used when the Monitored Item or Subscription
            is disabled.
            Use Bad Out of Service when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadOutOfServiceBits">
            <summary>
            The block is off scan or otherwise locked. This code 
            is also used when the Monitored Item or Subscription
            is disabled.
            Use Bad Out of Service Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadWaitingForInitialData">
            <summary>
            After Items are added to a group, it may take some time 
            for the server to actually obtain values for these items. 
            In such cases the client might perform a read (from cache), 
            or establish a ConnectionPoint based subscription and/or 
            execute a Refresh on such a subscription before the values 
            are available. This substatus is only available from 
            OPC DA 3.0 or newer servers.
            Use Bad Waiting For Initial Data when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadWaitingForInitialDataBits">
            <summary>
            After Items are added to a group, it may take some time 
            for the server to actually obtain values for these items. 
            In such cases the client might perform a read (from cache), 
            or establish a ConnectionPoint based subscription and/or 
            execute a Refresh on such a subscription before the values 
            are available. This substatus is only available from 
            OPC DA 3.0 or newer servers.
            Use Bad Waiting For Initial Data when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainNonSpecific">
            <summary>
            There is no specific reason why the value is uncertain.
            Use Uncertain Non Specific when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainNonSpecificBits">
            <summary>
            There is no specific reason why the value is uncertain.
            Use Uncertain Non Specific Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainLastUsableValue">
            <summary>
            Whatever was writing this value has stopped doing so. The 
            returned value should be regarded as ‘stale’. Note that this 
            differs from a BAD value with Substatus = Last Known Value. 
            That status is associated specifically with a detectable 
            communications error on a ‘fetched’ value. This error is 
            associated with the failure of some external source to ‘put’ 
            something into the value within an acceptable period of time. 
            Note that the ‘age’ of the value can be determined from 
            the timestamp. 
            Use Uncertain Last Usable Value when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainLastUsableValueBits">
            <summary>
            Whatever was writing this value has stopped doing so. The 
            returned value should be regarded as ‘stale’. Note that this 
            differs from a BAD value with Substatus = Last Known Value. 
            That status is associated specifically with a detectable 
            communications error on a ‘fetched’ value. This error is 
            associated with the failure of some external source to ‘put’ 
            something into the value within an acceptable period of time. 
            Note that the ‘age’ of the value can be determined from 
            the timestamp. 
            Use Uncertain Last Usable Value Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainSensorNotAccurate">
            <summary>
            Either the value has ‘pegged’ at one of the sensor limits 
            (in which case the limit field should be set to LowLimited 
            or HighLimited) or the sensor is otherwise known to be out 
            of calibration via some form of internal diagnostics (in 
            which case the limit field should be NotLimited). 
            Use Uncertain Sensor Not Accurate when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainSensorNotAccurateBits">
            <summary>
            Either the value has ‘pegged’ at one of the sensor limits 
            (in which case the limit field should be set to LowLimited 
            or HighLimited) or the sensor is otherwise known to be out 
            of calibration via some form of internal diagnostics (in 
            which case the limit field should be NotLimited). 
            Use Uncertain Sensor Not Accurate Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainEngineeringUnitsExceeded">
            <summary>
            The returned value is outside the limits defined for this 
            parameter. Note that in this case (per the Fieldbus 
            Specification) the ‘Limits’ field indicates which limit 
            has been exceeded but does NOT necessarily imply that the 
            value cannot move farther out of range. 
            Use Uncertain Engineering Units Exceeded when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainEngineeringUnitsExceededBits">
            <summary>
            The returned value is outside the limits defined for this 
            parameter. Note that in this case (per the Fieldbus 
            Specification) the ‘Limits’ field indicates which limit 
            has been exceeded but does NOT necessarily imply that the 
            value cannot move farther out of range. 
            Use Uncertain Engineering Units Exceeded Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainSubNormal">
            <summary>
            The value is derived from multiple sources and has less 
            than the required number of Good sources.
            Use Uncertain Sub Normal when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainSubNormalBits">
            <summary>
            The value is derived from multiple sources and has less 
            than the required number of Good sources.
            Use Uncertain Sub Normal Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessNonSpecific">
            <summary>
            Deprecated.
            The value is bad but no specific reason is known.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessInstanceIdInvalid">
            <summary>
            Deprecated.
            The format of the InstanceId is not valid. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessObjectUnknown">
            <summary>
            Deprecated.
            The InstanceId refers to a object that could not be found.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessObjectElementUnknown">
            <summary>
            Deprecated.
            The InstanceId refers to element of an object and that 
            element could not be found.         
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessAccessDenied">
            <summary>
            Deprecated.
            Access to the value was denied.
            {The Additional Detail Value must be zero.}
            <para>*** Encode Win32 Access Denied as Xi Status Code 0x98000005 ***</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessNonSpecificBits">
            <summary>
            This bit pattern is used for not transformed HRESULT / NTSTATUS / Win32 codes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessWithSuccessHResult">
            <summary>
            In general HRESULT value that are SUCCEEDED(hr) are 
            not encoded as Bad Server Access.  It is assumed that 
            such values are usable and should be encoded using 
            one either a good or uncertain quality.  Allowing 
            these to be encoded here is done for completeness only.  
            Any use a SUCCEEDED(hr) is considered a deviation from 
            the Xi Specification.
            This value represents a SUCCEEDED(hr) S R C N bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessWithSuccessHResultBits">
            <summary>
            In general HRESULT value that are SUCCEEDED(hr) are 
            not encoded as Bad Server Access.  It is assumed that 
            such values are usable and should be encoded using 
            one either a good or uncertain quality.  Allowing 
            these to be encoded here is done for completeness only.  
            Any use a SUCCEEDED(hr) is considered a deviation from 
            the Xi Specification.
            This value represents a SUCCEEDED(hr) S R C N bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultFailNTStatusWarning">
            <summary>
            This value represents a FAILED(hr) S bit set with the R C N bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultFailNTStatusWarningBits">
            <summary>
            This value represents a FAILED(hr) S bit set with the R C N bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessNTStatusInformational">
            <summary>
            In general Win32 NTSTATUS value with a severity of 
            Success are not encoded as Bad Server Access.  It is 
            assumed that such values are usable and should be 
            encoded using one either a good or uncertain quality.  
            Allowing these to be encoded here is done for completeness 
            only.  Any use a Success severity is considered a deviation 
            from the Xi Specification.
            This value represents a Win32 status with N bit set and S R C bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessSuccessNTStatusInfoBits">
            <summary>
            In general Win32 NTSTATUS value with a severity of 
            Success are not encoded as Bad Server Access.  It is 
            assumed that such values are usable and should be 
            encoded using one either a good or uncertain quality.  
            Allowing these to be encoded here is done for completeness 
            only.  Any use a Success severity is considered a deviation 
            from the Xi Specification.
            This value represents a Win32 status with N bit set and S R C bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessNTStatusError">
            <summary>
            In general Win32 NTSTATUS value with a severity of 
            Informational are not encoded as Bad Server Access.  It is 
            assumed that such values are usable and should be 
            encoded using one either a good or uncertain quality.  
            Allowing these to be encoded here is done for completeness 
            only.  Any use a Informational severity is considered a deviation 
            from the Xi Specification.
            This value represents a Win32 status with N R bits set and S C bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessNTStatusErrorBits">
            <summary>
            In general Win32 NTSTATUS value with a severity of 
            Informational are not encoded as Bad Server Access.  It is 
            assumed that such values are usable and should be 
            encoded using one either a good or uncertain quality.  
            Allowing these to be encoded here is done for completeness 
            only.  Any use a Informational severity is considered a deviation 
            from the Xi Specification.
            This value represents a Win32 status with N R bits set and S C bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusSuccess">
            <summary>
            This value represents a Win32 status with S N bits set and R C bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusSuccessBits">
            <summary>
            This value represents a Win32 status with S N bits set and R C bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusInfo">
            <summary>
            This value represents a Win32 status with S R N bits set and C bit clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusInfoBits">
            <summary>
            This value represents a Win32 status with S R N bits set and C bit clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusWarning">
            <summary>
            This value represents a SUCCEEDED(hr) C bit set and S R N bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusWarningBits">
            <summary>
            This value represents a SUCCEEDED(hr) C bit set and S R N bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusError">
            <summary>
            This value represents a FAILED(hr) S C bits set with the R N bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusErrorBits">
            <summary>
            This value represents a FAILED(hr) S C bits set with the R N bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessCustNTStatusSuccess">
            <summary>
            This value represents a Win32 status with N C bits set and S R bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessCustNTStatusSuccessBits">
            <summary>
            This value represents a Win32 status with N C bits set and S R bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessCustNTStatusInfo">
            <summary>
            This value represents a Win32 status with R C N bits set and S bit clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessCustNTStatusInfoBits">
            <summary>
            This value represents a Win32 status with R C N bits set and S bit clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAcccessCustNTStatusWarning">
            <summary>
            This value represents a Win32 status with S N C bits set and R bit clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAcccessCustNTStatusWarningBits">
            <summary>
            This value represents a Win32 status with S N C bits set and R bit clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessCustNTStatusError">
            <summary>
            This value represents a Win32 status with S R N C bits set.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessCustNTStatusErrorBits">
            <summary>
            This value represents a Win32 status with S R N C bits set.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.GoodNonSpecific">
            <summary>
            The value is good. This is the general mask for all good values.
            Use Good Non Specific when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.GoodNonSpecificBits">
            <summary>
            The value is good. This is the general mask for all good values.
            Use Good Non Specific Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.GoodLocalOverride">
            <summary>
            The value has been Overridden. Typically this is means the 
            input has been disconnected and a manually entered value has 
            been written to data object.
            Use Good Local Overrid when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.GoodLocalOverrideBits">
            <summary>
            The value has been Overridden. Typically this is means the 
            input has been disconnected and a manually entered value has 
            been written to data object.
            Use Good Local Overrid Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiStatusCodeGroups">
            <summary>
            This enumeration defines the unsigned integer values for the high order two bits of the 
            Xi Status Code.  These two bits are referred to as the StatusCodeStatusGroup.
            The values are given as two bit values from 0 to 3.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeGroups.StatusCodeStatusGroupBad">
            <summary>
            The 2-bit value for bad status. This value can be used to test for bad 
            status after shifting the Status Group bits of a Xi Status Code uint to its 
            low-order two bits. It can also be used to set the high-order two bits 
            to indicate bad status by setting the Xi Status Code uint to this value and 
            then shifting it to the high-order two bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeGroups.StatusCodeStatusGroupUncertain">
            <summary>
            The 2-bit value for uncertain status. This value can be used to test for uncertain 
            status after shifting the Status Group bits of a Xi Status Code uint to its 
            low-order two bits. It can also be used to set the high-order two bits 
            to indicate uncertain status by setting the Xi Status Code uint to this value and 
            then shifting it to the high-order two bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeGroups.StatusCodeStatusGroupServerBad">
            <summary>
            The 2-bit value for bad server access status. This value can be used to test for 
            bad server access status after shifting the Status Group bits of a Xi Status Code 
            uint to its low-order two bits. It can also be used to set the high-order two bits 
            to indicate bad server access status by setting the Xi Status Code uint to this 
            value and then shifting it to the high-order two bits.  Bad server access indicates 
            that the Xi server was unable to access the underlying data source (e.g. OPC DA server) 
            for the value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeGroups.StatusCodeStatusGroupGood">
            <summary>
            The 2-bit value for good status. This value can be used to test for good status 
            after shifting the Status Group bits of a Xi Status Code uint to its low-order two bits. 
            It can also be used to set the high-order two bits to indicate good status by setting 
            the Xi Status Code uint to this value and then shifting it to the high-order two bits.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.HResultBitCodes">
            <summary>
            This enumeration defines value that are helpful 
            while encoding and decoding HRESULT codes and
            Win32 error codes.
            See Xi Common Support ValueStatusCode class.
            See http://msdn.microsoft.com/en-us/library/cc231196(v=PROT.10).aspx 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.ShiftEncodingBits">
            <summary>
            Number of bit positions to shift the error type encoding
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.ShiftedEncodingMask">
            <summary>
            Mask for the four encoding bits
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.Failed">
            <summary>
            HRESULT Failed bit
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.Reserved">
            <summary>
            HRESULT Reserved bit - Used in encoding Win32 error into an HRESULT
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.Customer">
            <summary>
            HRESULT Customer bit - Used to indicate that this is an application defined error code
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.NTStatus">
            <summary>
            HRESULT NTStatus bit - Used to indicate that this HRESULT represents a Win32 error code
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.NTStatusSeverityMask">
            <summary>
            Win32 Severity Code mask - The top two bits of a Win32 error code generally represents the sevrity
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.NTStatusSeverityBit0">
            <summary>
            Win32 Severity Code low order bit
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.NTStatusSeverityBit2">
            <summary>
            Win32 Severity Code high order bit
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.FacilityMask">
            <summary>
            The mask for the Facility code of an HRESULT
            NOTE: Two bits take from Facilty Codes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.CodeMask">
            <summary>
            The mask for the low 16 bits of the HRESULT that provides the specifics of the error
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.FacilityAndCodeMask">
            <summary>
            This maks is used to keep the combined Facility and Code
            NOTE: Two bits take from Facilty Codes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingMask">
            <summary>
            The mask for the high-order four bits of an HRESULT
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingHResultSuccessNTStatusSuccess">
            <summary>
            HRESULT represents a SUCCEEDED(hr) after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingHResultFailNTStatusInfo">
            <summary>
            HRESULT represents a FAILED(hr) after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingNTStatusInformational">
            <summary>
            HRESULT represents a severity Informational Win32 error code after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingNTStatusWarning">
            <summary>
            HRESULT represents a severity Warning Win32 error code after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingNTStatusError">
            <summary>
            HRESULT represents a severity Error Win32 error code after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingCustSuccessHResult">
            <summary>
            HRESULT represents a Customer SUCCEEDED(hr) after applying the EncodingMask
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AddDataObjectResult">
            <summary>
            This class is used to return the results of attempting to 
            add a data object to a data list.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AddDataObjectResult.DataTypeId">
            <summary>
            The data type of a data object.  Null if the object is not a 
            data object.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AddDataObjectResult.IsReadable">
            <summary>
            Indicates, when TRUE, that the data object can be read.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AddDataObjectResult.IsWritable">
            <summary>
            Indicates, when TRUE, that the data object can be written.  
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.AddDataObjectResult.#ctor(System.UInt32,System.UInt32,System.UInt32,Xi.Contracts.Data.TypeId,System.Boolean,System.Boolean)">
            <summary>
            This constructor creates an AliasResult from a result code, 
            a client alias, and a server alias.
            </summary>
            <param name="result">
            The result code.
            </param>
            <param name="ca">
            The client alias of the data object.
            </param>
            <param name="sa">
            The server alias of the data object.
            </param>
            /// <param name="dataTypeId">
            The data type id of the data object.
            </param>
            <param name="isReadable">
            The IsReadable attribute of the data object.
            </param>
            <param name="isWritable">
            The IsWritable attribute of the data object.
            </param>
        </member>
        <member name="T:Xi.Contracts.Data.AlarmCondition">
            <summary>
            <para>This class is used to define a condition for which an 
            alarm can be detected.</para>
            <para>The concepts for alarm conditions accessible through 
            this interface are defined in EEMUA Publication 191 "Alarm 
            Systems: A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            <para>EEMUA Publication 191 describes conditions as the  
            "initiating event" that "can cause" an alarm.  Further, it 
            states "An alarm is raised or initiated when the condition 
            creating the alarm has occurred.  </para>  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AlarmCondition.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data contract 
            class by recording versioning information about it.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmCondition.Name">
            <summary>
            The name of the alarm condition.  The name of the alarm 
            conditino must be unique for its event source (two alarms 
            generated by the same event source cannot have the same name.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmCondition.TypeId">
            <summary>
            The namespace qualified name of the alarm condition.  
            Examples include HI_HI, HI, LO, and LO_LO.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmCondition.IsActive">
            <summary>
            Indicates, when TRUE, that the condition is active.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmCondition.TriggeringCriteria">
            <summary>
            The localized definition of the triggering criteria for the 
            Condition. Triggering criteria define the conditions that 
            cause the the alarm to transition to the active state. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmCondition.Priority">
            <summary>
            The priority of the Condition.    
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmCondition.TextMessage">
            <summary>
            The localized text message for the Condition. This text message 
            is included in the TextMessage field of Event Messages that 
            report the Condition (see the Event Message class definition).  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AlarmDescription">
            <summary>
            <para>This class is used to provide the description 
            of an alarm.</para>  
            <para>The concepts for alarms and events accessible through 
            this interface are defined in EEMUA Publication 191 "Alarm 
            Systems: A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            <para>EEMUA Publication 191 describes alarms as "signals which 
            are annunciated to the operator, typically by an audible sound, 
            some form of visual indication, using flashing, and by the 
            presentation of a message or some other identifier."</para>  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AlarmDescription.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmDescription.MultiplexedAlarmContainer">
            <summary>
            The namespace qualified name of the container for alarms with 
            multiple conditions, such as grouped or eclipsed alarms. .  
            Null if the alarm is not a grouped or eclipsed alarm. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmDescription.AlarmConditionNames">
            <summary>
            The namespace qualified name of the alarm condition.  
            Examples include HI_HI, HI, LO, and LO_LO.  If the alarm 
            is a simple alarm, then this list contains a single 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AlarmEnabledState">
            <summary>
            The enabled state of an alarm area or source.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AlarmEnabledState.ResultCode">
            <summary>
            Result Code for the corresponding area or source.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AlarmEnabledState.Enabled">
            <summary>
            TRUE if the area/source is enabled, FALSE if it is disabled. 
            Note that the state of the area/source may be set independently of the OPC .NET server. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AlarmEnabledState.EffectiveyEnabled">
            <summary>
            TRUE if the area/source is enabled and all areas within the hierarchy of its containing areas are enabled. 
            FALSE if the area is disabled or any area within the hierarchy of its containing areas is disabled.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AlarmMessageData">
            <summary> 	/// This class defines the alarm data that is transferred in Event  	/// Messages that report an alarm. 	/// <para>The concepts for alarms and events accessible through  	/// this interface are defined in EEMUA Publication 191 "Alarm  	/// Systems: A Guide to Design, Management and Procurement". 	/// See http://www.eemua.org</para> 	/// <para>EEMUA Publication 191 generally defines messages to  	/// report alarms and events as "text information presented to  	/// the operator that describes the alarm condition."</para>   	/// <para>The members of this class represent the individual  	/// pieces of alarm information to be included in the text  	/// information that is presented to the operator for alarms.</para>   	/// </summary> 
        </member>
        <member name="F:Xi.Contracts.Data.AlarmMessageData.AlarmState">
            <summary> 		/// The current state of the alarm. 		/// </summary> 
        </member>
        <member name="F:Xi.Contracts.Data.AlarmMessageData.AlarmStateChange">
            <summary> 		/// The state change(s) that caused the alarm message to sent. 		/// The Xi.Contract.Constants.AlarmStateChangeCodes class defines  		/// the values for this member. 		/// </summary> 
        </member>
        <member name="F:Xi.Contracts.Data.AlarmMessageData.TimeLastActive">
            <summary> 		/// The time that the alarm last transitioned to the active state.   		/// This time is independent of the current state of the alarm.   		/// Null if the alarm has never been active.  		/// </summary> 
        </member>
        <member name="T:Xi.Contracts.Data.AlarmState">
            <summary>
            <para>The state of the Alarm.</para> 
            <para>The alarm states accessible through this interface 
            are defined in EEMUA Publication 191 "Alarm Systems: 
            A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmState.Initial">
            <summary>
            The default value of 0 is the starting state, 
            which is inactive (cleared), acknowledged, enabled, 
            and unsuppressed.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmState.Disabled">
            <summary>
            The generation/detection of the alarm is disabled 
            even though the base condition may be active.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmState.Active">
            <summary>
            The Alarm has been detected and its condition 
            continues to persist. This state is also referred 
            to as "raised" or "standing".  The inactive state 
            is indicated by not setting the Alarm to active.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmState.Unacked">
            <summary>
            The Alarm has not been acknowledged.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmState.Suppressed">
            <summary>
            Automatic generation/detection of the alarm is 
            disabled, even though the base condition may be active.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AlarmSummary">
            <summary>
            <para>This class defines summary information of an alarm.</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AlarmSummary.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data contract 
            class by recording versioning information about it.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.EventType">
            <summary>
            The type of the alarm. Only Event Types associated with alarms 
            are permissable.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.Name">
            <summary>
            For simple alarms, the name of the condition.
            For eclipsed and grouped alarms, the MultiplexedAlarmContainer name 
            (see the EventId and AlarmDescription classes).
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.State">
            <summary>
            The current state of the alarm.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.AlarmStateStatusCode">
            <summary>
            The status code associated with the data object used to detect 
            an occurrence of the alarm (e.g. the status of the PV parameter).
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.MostRecentActiveCondition">
            <summary>
            <para>The name of the most recent condition to become active.  
            Null if no conditions are active.</para>  
            <para>For Grouped and Eclipsed Alarms, the most recent condition 
            to become active may change while the alarm is active. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.TimeMostRecentConditionActive">
            <summary>
            <para>The time that the most recent condition became active.  
            Null if no conditions are active.</para>  
            <para>For Grouped and Eclipsed Alarms, the most recent condition 
            to become active may change while the alarm is active.  Since this 
            represents the most recent condition to become active, this is the 
            time that should be specified when acknowledging the alarm. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.TimeAlarmLastActive">
            <summary>
            The time that the alarm last transitioned to the active state.  
            This time is independent of the current state of the alarm.  
            Null if the alarm has never been active. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.TimeAlarmLastInactive">
            <summary>
            The time that the alarm last transitioned to the inactive state.  
            This time is independent of the current state of the alarm.  Null 
            if the alarm has never been active and transitioned to inactive. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.TimeLastAck">
            <summary>
            The time that the alarm last transitioned to the acknowledged state.  
            This time is independent of the current state of the alarm.  Null if 
            the alarm has never transitioned to the acknowledged state. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.AcknowledgingOperator">
            <summary>
            The name or other system-specific identifier of the operator 
            that last acknowledged the alarm. Null if the alarm was never
            acknowledged.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.OperatorLastAckComment">
            <summary>
            The operator comment that accompanied the last acknowledgement.  
            Null if the alarm was never acknowledged.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.ActiveConditions">
            <summary>
            The names of the active conditions of the alarm. 
            Null if no conditions are active.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.Conditions">
            <summary>
            The list of conditions defined for the alarm and 
            their active state.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.AlarmSummary.ServerData">
            <summary>
            Server-specific information about the alarm.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AliasAndCalculation">
            <summary>
            This class contains the changed historical data values for a specific data object.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AliasAndCalculation.ServerAlias">
            <summary>
            The server alias that identifies a data object in the data journal. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AliasAndCalculation.Calculation">
            <summary>
            The calculation to perform on the historical values of the specified data object. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.AliasResult">
            <summary>
            This class is used to return a result code along with 
            a client and server alias if the result code indicates 
            success.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AliasResult.Result">
            <summary>
            The Result Code being returned.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AliasResult.ClientAlias">
            <summary>
            The client-assigned alias (identifier) for an InstanceId. Set to 0 if unknown.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AliasResult.ServerAlias">
            <summary>
            The server-assigned alias (identifier) for an InstanceId.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.AliasResult.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            This constructor creates an AliasResult from a result code, 
            a client alias, and a server alias.
            </summary>
            <param name="result">
            The result code.
            </param>
            <param name="ca">
            The client alias.
            </param>
            <param name="sa">
            The server alias.
            </param>
        </member>
        <member name="T:Xi.Contracts.Data.AliasUpdate">
            <summary>
            This class is used to update the client alias of an object that is 
            identified by a server alias.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AliasUpdate.ExistingServerAlias">
            <summary>
            The existing server alias (identifier) of the object whose client alias is to be updated.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.AliasUpdate.NewClientAlias">
            <summary>
            The new client alias for the object.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.AliasUpdate.#ctor(System.UInt32,System.UInt32)">
            <summary>
            This constructor creates an AliasUpdate from 
            an existing alias and its new alias.
            </summary>
            <param name="existingServerAlias">
            The existing server alias.
            </param>
            <param name="newClientAlias">
            The new client alias.
            </param>
        </member>
        <member name="T:Xi.Contracts.Data.CategoryConfiguration">
            <summary>
            <para>This class defines the configuration of a category.  
            Categories are defined as groupings of alarms and events 
            for reporting purposes.</para> 
            <para>The concepts for categories accessible through 
            this interface are defined in EEMUA Publication 191 "Alarm 
            Systems: A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            <para>EEMUA Publication 191 recommends that "Grouping 
            of alarms into categories and providing facilities to select 
            alarm lists filtered on these categories is a highly desirable 
            feature."</para>  
            <para>A category may be composed of either alarms or events, 
            but not both. The EventTypes and AlarmDescriptions members of 
            this class are used to list the the alarms or events that 
            belong to the category. One of these must be present, and the 
            other must be null.</para>
            <para>Occurrences of the alarms or event type that belong to 
            this category are reported using event messages that 
            contain the fields listed in the EventMessageFields member 
            of this class.</para>
            <para>Note that alarms or events that are assigned to a 
            given category may change during the life of a system.</para>  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.CategoryConfiguration.CategoryId">
            <summary>
            The identifier for the category.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.CategoryConfiguration.Name">
            <summary>
            The name of the category.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.CategoryConfiguration.Description">
            <summary>
            The text description of the category.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.CategoryConfiguration.EventType">
            <summary>
            The event type associated with this category.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.CategoryConfiguration.EventMessageFields">
            <summary>
            Event message fields supported by the server that the client 
            can add to event messages sent for the category.  A flag is 
            included for each field that indicates whether or not it 
            can be used for filtering.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.CategoryConfiguration.AlarmDescriptions">
            <summary>
            The list of Alarms that have been assigned to this Category.  
            If this member is null the category is configured to report 
            events.    
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.DataJournalOptions">
            <summary>
            This class contains the options supported by the server 
            for history data accessible through Journal reads and 
            writes.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataJournalOptions.MathLibrary">
            <summary>
            Historical Data Math Library supported by the server. Each 
            math/statistical function in the library is identified 
            using an InstanceId.  The namespace element of the InstanceId 
            identifies the party responsible for defining the function.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataJournalOptions.Properties">
            <summary>
            The standard and non-standard Historical Data Properties 
            supported by the server, and an indicator of which can 
            be used for filtering.    
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataJournalOptions.MaxReturnValues">
            <summary>
            The maximum number of sample value the server will return.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.DataJournalWriteResult">
            <summary>
            Result from a data journal write request
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataJournalWriteResult.ResultCode">
            <summary>
            Result code for the corresponding WriteJournalValues entry.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataJournalWriteResult.ListAlias">
            <summary>
            List alias
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.DataJournalWriteResult.ServerDataAlias">
            <summary>
            Server data alias
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.DataValueArrays">
            <summary>
            <para>This class contains three sets of arrays that are used to 
            transfer data values.  Each set is composed of an array of values, an 
            array of status codes, and an array of timestamps. Each set is 
            differentiated by the data type of the values that it holds.</para>
            <para>This class also contains a list of ErrorInfo. This list contains 
            error information as a result of:</para>
            <para>(1) a server alias not being found in the server.</para>
            <para>(2) an additional HRESULT associated with a value that the 
            server wishes to return.</para>
            <para>(3) text descriptions of errors (error messages) when requested by 
            the client when Initiating or Reinitiating the Context using the 
            EnableErrorInfo ContextOptions.  Error Messages are not permitted if 
            this option is not set.</para>
            <para>This approach was developed to optimize data transfers:</para>
            <para> - The value array in the first set is defined as an array 64-bit 
            floating point values. </para>  
            <para> - The value array in the second set is defined as an array 64-bit 
            integers. </para>  
            <para> - The value array in the third set is defined as an array of objects.
            It is used to transfer all other data types. </para>  
            <para>This class also contains optional error information to allow servers to 
            include an additional error code with a specific status code, and/or to also 
            provide a text description of the error. The additional error code can be 
            included by the server as desirec, while the error description is only used 
            when the Context is opened with ContextOptions.EnableEnhancedErrorInfo set, 
            and must be null otherwise.  ContextOptions is set using the Initiate() 
            and ReInitiate() methods.</para>
            <para>The AdditionalDetailDesc property of the StatusCode FlagsByte, when 
            set to 7, is used to specify the existence of an additional error code. 
            Normally, the value of this field will be the facility code of an HRESULTor a 
            value that indicates that the AdditionalDetail property of the XiStatusCode 
            contains a server-specifc value. (see the XiStatusCode definition for more 
            detail.</para>
            <para>For any given value in an array of values, the associated status, 
            timestamp, and error message are located at the same index in their 
            respective arrays. For example, for the fourth value in a Value array, the 
            status, timestamp, and error message are the fourth entries in their 
            respective arrays.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArrays.DoubleStatusCodes">
            <summary>
            The array of status codes. Status code values are defined by 
            the XiStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArrays.DoubleTimeStamps">
            <summary>
            The array of timestamps.  All timestamps are UTC.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArrays.DoubleValues">
            <summary>
            The array of values. 
            Used to transfer single and double floating point values.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArrays.UintStatusCodes">
            <summary>
            The array of status codes. Status code values are defined by 
            the XiStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArrays.UintTimeStamps">
            <summary>
            The array of timestamps.  All timestamps are UTC.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArrays.UintValues">
            <summary>
            The array of integer values.
            Used to transfer byte, sbyte, short, ushort, int and uint values.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArrays.ObjectStatusCodes">
            <summary>
            The array of status codes. Status code values are defined by 
            the XiStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArrays.ObjectTimeStamps">
            <summary>
            The array of timestamps.  All timestamps are UTC.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArrays.ObjectValues">
            <summary>
            The array of values.
            Used to transfer type that do not conform to the integer or float values.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArrays.ErrorInfo">
            <summary>
            <para>The error message to be returned when the Context has been opened 
            with ContextOptions.EnableEnhancedErrorInfo set. This list is always null 
            if the Context was not opened with ContextOptions.EnableEnhancedErrorInfo 
            set.</para>
            <para>When ContextOptions.EnableEnhancedErrorInfo is set, the server 
            can provide an error message that contains additional information about 
            bad values.  If additional error information is not provided for any 
            values, then the list is set to null.</para>  
            <para>Additionally, the server can provide an error message in a 
            DataValueArrays object with no values to describe an error condition that 
            is preventing values from being sent.  This would typically be done in a 
            callback or poll response.</para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor creates a DataValuesArrays object with arrays of the 
            specified sizes.  All entries in each array are set to their initial 
            values.
            </summary>
            <param name="doubleArraySize">
            The size of the arrays associated with double values.
            </param>
            <param name="uintArraySize">
            The size of the arrays associated with long values.
            </param>
            <param name="objectArraySize">
            The size of the arrays associated with object values.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.#ctor(System.UInt32[]@,System.DateTime[]@,System.Double[]@,System.UInt32[]@,System.DateTime[]@,System.UInt32[]@,System.UInt32[]@,System.DateTime[]@,System.Object[]@)">
            <summary>
            This constructor creates a DataValuesArrays object from existing arrays 
            passed in as parameters.
            </summary>
            <param name="doubleStatusCodes">
            The status code array for double values.
            </param>
            <param name="doubleTimestamps">
            The timestamp array for double values.
            </param>
            <param name="doubleValues">
            The array of double values.
            </param>
            <param name="uintStatusCodes">
            The status code array for long values.
            </param>
            <param name="uintTimestamps">
            The timestamp array for long values.
            </param>
            <param name="uintValues">
            The array of uint values.
            </param>
            <param name="objectStatusCodes">
            The status code array for object values.
            </param>
            <param name="objectTimestamps">
            The timestamp array for object values.
            </param>
            <param name="objectValues">
            The array of object values.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.Clear">
            <summary>
            This method clears the DataValuesArrays object by setting each 
            of its arrays and its ErrorInfo list to null.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.SetDouble(System.Int32,System.UInt32,System.DateTime,System.Double)">
            <summary>
            This method sets a double value, its status code, and its timestamp 
            for a given index in the DataValuesArrays object.
            </summary>
            <param name="idx">
            The index of the double value, status code, and timestamp in each of 
            the corresponding arrays.
            </param>
            <param name="statusCode">
            The status code of the value.
            </param>
            <param name="timestamp">
            The timestamp of the value.</param>
            <param name="value">
            The double value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.SetUint(System.Int32,System.UInt32,System.DateTime,System.UInt32)">
            <summary>
            This method sets a long value, its status code, and its timestamp 
            for a given index in the DataValuesArrays object.
            </summary>
            <param name="idx">
            The index of the long value, status code, and timestamp in each of 
            the corresponding arrays.
            </param>
            <param name="statusCode">
            The status code of the value.
            </param>
            <param name="timestamp">
            The timestamp of the value.
            </param>
            <param name="value">
            The long value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.SetObject(System.Int32,System.UInt32,System.DateTime,System.Object)">
            <summary>
            This method sets an object value, its status code, and its timestamp 
            for a given index in the DataValuesArrays object.
            </summary>
            <param name="idx">
            The index of the object value, status code, and timestamp in each of 
            the corresponding arrays.
            </param>
            <param name="statusCode">
            The status code of the value.
            </param>
            <param name="timestamp">
            The timestamp of the value.
            </param>
            <param name="value">
            The object value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.CreateDoubleArrays(System.UInt32[],System.DateTime[],System.Double[])">
            <summary>
            This method sets the arrays used to convey double values.
            </summary>
            <param name="statusCodeArray">
            The status code array.
            </param>
            <param name="timestampArray">
            The timestamp array.
            </param>
            <param name="valueArray">
            The value array.
            </param>
            <returns>
            True if the array could be set.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.CreateUintArrays(System.UInt32[],System.DateTime[],System.UInt32[])">
            <summary>
            This method sets the arrays used to convey integer values.
            </summary>
            <param name="statusCodeArray">
            The status code array.
            </param>
            <param name="timestampArray">
            The timestamp array.
            </param>
            <param name="valueArray">
            The value array.
            </param>
            <returns>
            True if the array could be set.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArrays.CreateObjectArrays(System.UInt32[],System.DateTime[],System.Object[])">
            <summary>
            This method sets the arrays used to convey object values.
            </summary>
            <param name="statusCodeArray">
            The status code array.
            </param>
            <param name="timestampArray">
            The timestamp array.
            </param>
            <param name="valueArray">
            The value array.
            </param>
            <returns>
            True if the array could be set.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.DataValueArraysWithAlias">
            <summary>
            This class is a subclass of DataValueArrays and adds the aliases 
            for the inherited values, statuses, timestamps.  Three arrays of 
            aliases are defined by this class, one associated with double values, 
            one associated with long values, and one associated with object values.  
            The index used for given alias is the same as that used for its value, 
            status, and timestamp in the appropriate array set (double, long, object). 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArraysWithAlias.DoubleAlias">
            <summary>
            When used in a read context (returned from the server) 
            this is the Client Alias.  When used in a write context 
            (sent to the server) this is the Server Alias.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArraysWithAlias.UintAlias">
            <summary>
            When used in a read context (returned from the server) 
            this is the Client Alias.  When used in a write context 
            (sent to the server) this is the Server Alias.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.DataValueArraysWithAlias.ObjectAlias">
            <summary>
            When used in a read context (returned from the server) 
            this is the Client Alias.  When used in a write context 
            (sent to the server) this is the Server Alias.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor creates a DataValueArraysWithAlias object 
            with empty arrays of the specified sizes.
            </summary>
            <param name="doubleArraySize">
            The number of elements in the array containing double values.
            </param>
            <param name="uintArraySize">
            The number of elements in the array containing uint values.
            </param>
            <param name="objectArraySize">
            The number of elements in the array containing object values.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.#ctor(System.UInt32[]@,System.UInt32[]@,System.DateTime[]@,System.Double[]@,System.UInt32[]@,System.UInt32[]@,System.DateTime[]@,System.UInt32[]@,System.UInt32[]@,System.UInt32[]@,System.DateTime[]@,System.Object[]@)">
            <summary>
            This constructor creates a DataValueArraysWithAlias object 
            from a set of arrays.
            </summary>
            <param name="doubleAliases">
            The array of aliases for double values.
            </param>
            <param name="doubleStatusCodes">
            The array of status codes for double values.
            </param>
            <param name="doubleTimestamps">
            The array of timestamps for double values.
            </param>
            <param name="doubleValues">
            The array of double values.
            </param>
            <param name="uintClientAliases">
            The array of aliases for uint values.
            </param>
            <param name="uintStatusCodes">
            The array of status codes for uint values.
            </param>
            <param name="uintTimestamps">
            The array of timestamps for uint values.
            </param>
            <param name="uintValues">
            The array of uint values.
            </param>
            <param name="objectClientAliases">
            The array of aliases for object values.
            </param>
            <param name="objectStatusCodes">
            The array of status codes for object values.
            </param>
            <param name="objectTimestamps">
            The array of timestamps for object values.
            </param>
            <param name="objectValues">
            The array of object values.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.Clear">
            <summary>
            This method sets the arrays of this object to null.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.SetDouble(System.Int32,System.UInt32,System.UInt32,System.DateTime,System.Double)">
            <summary>
            This method sets a double value and its associated alias, status, 
            timestamp in the appropriate arrays.
            </summary>
            <param name="idx">
            The index of the array entries to be updated.
            </param>
            <param name="clientAlias">
            The client alias of the value.
            </param>
            <param name="statusCode">
            The status of the value.
            </param>
            <param name="timestamp">
            The timestamp of the value.
            </param>
            <param name="value">
            The double value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.SetUint(System.Int32,System.UInt32,System.UInt32,System.DateTime,System.UInt32)">
            <summary>
            This method sets a long value and its associated alias, status, 
            timestamp in the appropriate arrays.
            </summary>
            <param name="idx">
            The index of the array entries to be updated.
            </param>
            <param name="clientAlias">
            The client alias of the value.
            </param>
            <param name="statusCode">
            The status of the value.
            </param>
            <param name="timestamp">
            The timestamp of the value.
            </param>
            <param name="value">
            The long value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.SetObject(System.Int32,System.UInt32,System.UInt32,System.DateTime,System.Object)">
            <summary>
            This method sets an object value and its associated alias, status, 
            timestamp in the appropriate arrays.
            </summary>
            <param name="idx">
            The index of the array entries to be updated.
            </param>
            <param name="clientAlias">
            The client alias of the value.
            </param>
            <param name="statusCode">
            The status of the value.
            </param>
            <param name="timestamp">
            The timestamp of the value.
            </param>
            <param name="value">
            The object value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.CreateDoubleArraysWithAlias(System.UInt32[],System.UInt32[],System.DateTime[],System.Double[])">
            <summary>
            This method sets the arrays used to convey double values.
            </summary>
            <param name="clientAliasArray">
            The client alias array.
            </param>
            <param name="statusCodeArray">
            The status code array.
            </param>
            <param name="timestampArray">
            The timestamp array.
            </param>
            <param name="valueArray">
            The value array.
            </param>
            <returns>
            True if the array could be set.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.CreateUintArraysWithAlias(System.UInt32[],System.UInt32[],System.DateTime[],System.UInt32[])">
            <summary>
            This method sets the arrays used to convey integer values.
            </summary>
            <param name="clientAliasArray">
            The client alias array.
            </param>
            <param name="statusCodeArray">
            The status code array.
            </param>
            <param name="timestampArray">
            The timestamp array.
            </param>
            <param name="valueArray">
            The value array.
            </param>
            <returns>
            True if the array could be set.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.DataValueArraysWithAlias.CreateObjectArraysWithAlias(System.UInt32[],System.UInt32[],System.DateTime[],System.Object[])">
            <summary>
            This method sets the arrays used to convey object values.
            </summary>
            <param name="clientAliasArray">
            The client alias array.
            </param>
            <param name="statusCodeArray">
            The status code array.
            </param>
            <param name="timestampArray">
            The timestamp array.
            </param>
            <param name="valueArray">
            The value array.
            </param>
            <returns>
            True if the array could be set.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.EndpointConfiguration">
            <summary>
            <para>This class is used pass endpoint/binding configuration settings to the client
            that are not contained in the meatadata.</para>
            <para>This client can use this data to as default settings that mach the server setting.
            The client can use different settings. The metadata doen=sn't contain this information
            because the settings don't have necessarily be the same in server and client.</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.EndpointName">
            <summary>
            The endpoint configuration name as specified by the endpoint name attribute 
            in the App.config file.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.EndpointUrl">
            <summary>
            The URL of the endpoint. This corresponds to 
            System.ServiceModel.Description.ServiceEndpoint.Address.Uri.OriginalString.
            The EndpointUrl, when combined with the ContractType, uniquely identifies 
            the endpoint.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.ContractType">
            <summary>
            <para>The type of the contract associated with this endpoint.</para>
            <para>The values are defined using the typeof(IXXX).Name property, where IXXX is 
            the contract name (e.g. IRead).  This value is also used as the value of the 
            following property: </para>
            <para> System.ServiceModel.Description.ServiceEndpoint.Contract.Name  </para>
            <para> The EndpointUrl, when combined with the ContractType, uniquely identifies 
            the endpoint.</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.MaxBufferSize">
            <summary>
            The buffer size from the server binding configuration.
            This member corresponds to the MaxBufferSize attribute in the 
            binding element associated with this endpoint in the server's 
            app.config file.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.MaxItemsInObjectGraph">
            <summary>
            The MaxItemsInObjectGraph attribute of the dataContractSerializer behavior 
            associated with the endpoint in the server.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.OpenTimeout">
            <summary>
            The timeout setting from the server binding configuration.
            This member corresponds to the openTimeout attribute in the 
            binding element associated with this endpoint in the server's 
            app.config file.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.CloseTimeout">
            <summary>
            The timeout setting from the server binding configuration.
            This member corresponds to the closeTimeout attribute in the 
            binding element associated with this endpoint in the server's 
            app.config file.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.SendTimeout">
            <summary>
            The timeout setting from the server binding configuration.
            This member corresponds to the sendTimeout attribute in the 
            binding element associated with this endpoint in the server's 
            app.config file.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfiguration.ReceiveTimeout">
            <summary>
            The timeout setting from the server binding configuration.
            This member corresponds to the receiveTimeout attribute in the 
            binding element associated with this endpoint in the server's 
            app.config file.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.EndpointConfigurationEx">
            <summary>
            <para>This class extends the EndpointConfiguration class. It is included to support Silverlight 
            clients and other clients that cannot use Metadata Exhange to retrieve complete service endpoint 
            descriptions from the server.</para>  
            <para>A list of EndpointConfigurationEx objects are returned by the IServerDiscovery.DiscoverEndpoints() 
            method. This method should not be called by client applications capable of using Metadata Exchange.</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfigurationEx.BindingType">
            <summary>
            Corresponds to "typeof(System.ServerModel.Description.ServiceEndpoint.Binding).ToString()" value 
            of the server endpoint.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfigurationEx.BindingScheme">
            <summary>
            Corresponds to "System.ServerModel.Description.ServiceEndpoint.ListenUri.Scheme" value 
            of the server endpoint.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfigurationEx.SecurityMode">
            <summary>
            Corresponds to "System.ServerModel.Description.ServiceEndpoint.Binding.Security.Mode" value 
            of the server endpoint.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointConfigurationEx.ClientCredentialType">
            <summary>
            Corresponds to "System.ServerModel.Description.ServiceEndpoint.Binding.Security.Transport.ClientCredentialType.ToString()" 
            value f the server endpoint.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.EndpointDefinition">
            <summary>
            <para>This class is used to return the definition of an endpoint 
            exposed by the server.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EndpointDefinition.EndpointDescription">
            <summary>
            This member is used locally by the server. It is not serialized and sent to the client.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointDefinition.EndpointId">
            <summary>
            The EndpointId is used to uniquely identify this endpoint definition. 
            This identifier is assigned by the server.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointDefinition.ContractType">
            <summary>
            The type of the Xi interface supported by the endpoint.  Values are 
            defined using the typeof(IXXX).Name property, where IXXX is the contract 
            name (e.g. IRead, IWrite).  This value is also used as the value for the 
            Name property of the System.ServiceModel.Description.ServiceEndpoint.Contract 
            member.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointDefinition.BindingName">
            <summary>
            <para>The type of the binding (WSHttpBinding, NetTcpBinding, etc.) 
            as defined in the config.app file.  For standard bindings,
            this is the endpoint binding attribute:</para>
            <para>  endpoint binding="wsHttpBinding"</para> 
            For custom bindings, this is the name attribute of the binding 
            element of the custom binding:
            <para>  binding name="binaryHttpBinding" </para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EndpointDefinition.Url">
            <summary>
            The URL used to access the endpoint
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.EndpointDefinition.ToString">
            <summary>
            This method represents the endpoint as a string using 
            its URL.
            </summary>
            <returns>
            The URL of the endpoint.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.ErrorInfo">
            <summary>
            <para>Objects of this class are used to associate additional error 
            information with a data value transferred in the DataValueArrays. 
            It is related to the value by the ClientAlias.  Only one ErrorInfo 
            object for a given ClientAlias may be present in the DataValuesArray.</para>
            <para>The presence of this object for a data value is indicated by the 
            value of the AdditionalDetailDesc property of the StatusCode FlagsByte.  
            When the value of the AdditionalDetailDesc property is set to 7, an 
            ErrorInfo object with an HResult must be present in the ErrorInfo list 
            of the DataValueArrays.</para>
            <para>Alternatively, if the Context has been opened with ContextOptions 
            set to DebugErrorMessages using the Initiate() or ReInitiate() methods, then 
            the server may enter ErrorInfo objects with an ErrorMessage string into the 
            ErrorInfo list of the DataValueArrays. In this case, the AdditionalDetailDesc 
            property does not have to indicate that the ErrorInfo object is present.  
            Further, the ErrorMessage string cannot be used unless ContextOptions is 
            set to DebugErrorMessages.</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ErrorInfo.ClientAlias">
            <summary>
            The ClientAlias of a value transferred in the DataValueArrays.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ErrorInfo.ServerAlias">
            <summary>
            The ServerAlias of the value transfered in the DataValueArrays.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ErrorInfo.HResult">
            <summary>
            <para>The HResult associated with the value. This capability is provided 
            to support additional HResult Facility Codes not defined by the
            XiStatusCodeAdditionalDetailType enumeration.  </para>
            <para>When present, and ContextOptions is not set to DebugErrorMessages 
            for the Context, the presence of an ErrorInfo object with a valid HResult 
            is specified using the AdditionalDetailDesc property (value = 7) of the 
            StatusCode FlagsByte.  In this case,this HResult must have a valid non-zero 
            HResult value.</para>
            <para>When the presence of the ErrorInfo object is not specified 
            by the AdditionalDetailDesc property, this HResult may be zero.  This 
            case may exist when ContextOptions is set to DebugErrorMessages for 
            the Context.</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ErrorInfo.ErrorMessage">
            <summary>
            The description of the error. ErrorMessage may only be used when 
            the Context has been opened with ContextOptions set to DebugErrorMessages 
            using either the Initiate() or ReInitiate() method.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ErrorInfo.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            This constructor initializes an ErrorInfo object with 
            the ClientAlias and HResult.  
            </summary>
            <param name="hResult">A valid non-zero HResult value. </param>
            <param name="clientAlias">The Client Alias of the associated value.</param>
            <param name="serverAlias">The Server Alias of the associated value.</param>
        </member>
        <member name="M:Xi.Contracts.Data.ErrorInfo.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            This constructor initializes an ErrorInfo object with 
            the ClientAlias and ErrorMessage.  This constructor
            may only be used when when the Context has been opened with 
            ContextOptions set to DebugErrorMessages using either the 
            Initiate() or ReInitiate() method.
            </summary>
            <param name="errorMessage">A non-empty text description of the error.</param>
            <param name="clientAlias">The Client Alias of the associated value.</param>
            <param name="serverAlias">The Server Alias of the associated value.</param>
        </member>
        <member name="M:Xi.Contracts.Data.ErrorInfo.#ctor(System.UInt32,System.String,System.UInt32,System.UInt32)">
            <summary>
            This constructor initializes an ErrorInfo object with the 
            ClientAlias, HResult, and ErrorMessage.  This constructor may 
            only be used with a non-empty ErrorMessage when the Context 
            was opened with ContextOptions set to DebugErrorMessages.
            </summary>
            <param name="hResult">A valid non-zero HResult value.</param>
            <param name="errorMessage">The text description of the error.</param>
            <param name="clientAlias">The Client Alias of the associated value.</param>
            <param name="serverAlias">The Server Alias of the associated value.</param>
        </member>
        <member name="T:Xi.Contracts.Data.EventId">
            <summary>
            This class is used in EventMessages to identify 
            the occurrence of an alarm/event.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventId.SourceId">
            <summary>
            The object that is the source of the alarm/event.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventId.MultiplexedAlarmContainer">
            <summary>
            The TypeId of the container for alarms with multiple conditions, 
            such as grouped or eclipsed alarms. The EventType enumeration defines 
            these types of alarms. 
            Null if the event is not a grouped or eclipsed alarm. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventId.Condition">
            <summary>
            <para>For system events, operator action events, simple alarms, 
            and complex alarms, the TypeId of the condition 
            that is being reported in the event message.</para>
            <para>For grouped or eclipsed alarms, the name of 
            one or more conditions that are active.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventId.OccurrenceId">
            <summary>
            A server-specific id that identifies an individual occurrence of the 
            alarm/event.  This identifier can be constructed by the server to meet 
            the server's needs for identifying alarms.  For example, if the server 
            wraps an OPC AE server, the OccurrenceId may be constructed from the 
            ActiveTime and Cookie parameters of the IOPCEventServer::AckCondition() 
            method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventId.TimeLastActive">
            <summary>
            This element is mandatory when acknowledging an alarm using the AcknowledgeAlarms() method. 
            It is set to null in all other uses.  Its value is copied from the AlarmMessageData object 
            contained in the EventMessage used to report the alarm being acknowledged.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.EventIdResult">
            <summary>
            This class is used to return an error code and the 
            event id of the event message for which the 
            requested operation failed.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EventIdResult.ResultCode">
            <summary>
            Result Code for the corresponding EventMessage or EventId.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EventIdResult.EventId">
            <summary>
            The EventId of the event message associated with 
            the error result. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.EventMessage">
            <summary>
            <para>This class defines the Event Messages that are used to 
            report the occurrence of an event or alarm.</para> 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EventMessage.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data contract 
            class by recording versioning information about it.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.OccurrenceTime">
            <summary>
            The time of the event/alarm occurrence.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.EventType">
            <summary>
            The type of the event/alarm that is being reported by this 
            event message.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.EventId">
            <summary>
            The identifier for the event/alarm occurrence.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.TextMessage">
            <summary>
            Text that describes the event occurrence.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.CategoryId">
            <summary>
            The category to which the event is assigned.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.Priority">
            <summary>
            The priority of the event.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.OperatorName">
            <summary>
            <para>For event messages that report operator action events, 
            the name of the operator who caused an operator action event 
            to be generated.</para>
            <para>For event messages that report the acknowledgement of 
            an alarm, the name of the operator who acknowledged the 
            alarm.</para>
            <para>Null for all other event messages.</para>  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.AlarmData">
            <summary>
            Data to be included in the event message for alarms.  Null 
            if the event message is not reporting an alarm.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessage.ClientRequestedFields">
            <summary>
            The fields selected by the client to be included in Event Messages 
            for the indicated Event Category.  The fields that can be selected 
            by the client to be returned in Event Messages for a given Category 
            are specified in the EventCategories member of the Event Capabilities 
            MIB Element.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.EventMessageField">
            <summary>
            This class is used to identify a non-standard event message field.  
            Each field is identified by the client alias and its object id. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.EventMessageField.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data contract 
            class by recording versioning information about it.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessageField.Name">
            <summary>
            The name of the event message field.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventMessageField.ClientAlias">
            <summary>
            The context-wide client alias for the non-standard event message field.  
            This alias is used to identify each field in list of ClientRequestedFields 
            contained in an EventMessage.  
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.EventMessageField.#ctor(System.String,System.UInt32)">
            <summary>
            This constructor initializes the EventMessageField with the 
            name and client alias.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="clientAlias">
            The client supplied alias for the field.
            </param>
        </member>
        <member name="T:Xi.Contracts.Data.EventType">
            <summary>
            <para>This enumeration defines types of events that can be 
            conveyed by this interface.</para> 
            <para>The concepts for alarms and events accessible through 
            this interface are defined in EEMUA Publication 191 "Alarm 
            Systems: A Guide to Design, Management and Procurement".
            See http://www.eemua.org</para>
            <para>EEMUA Publication 191 defines events as "a change in 
            plant or equipment condition." It further differentiates 
            alarms and events describing as "signals without a defined 
            operator response" and alarms as events that have a "defined 
            response."</para>
            <para>This generic definition provides the basis for defining 
            the types of events of this EventType enumeration.</para>  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.SystemEvent">
            <summary>
            An event generated by a condition within the system 
            that does not require operator attention.
            See EEMUA Publication 191, 2.4.1.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.OperatorActionEvent">
            <summary>
            An event generated as the result of an operator action. 
            See EEMUA Publication 191, 2.4.1.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.SimpleAlarm">
            <summary>
            The general case of an alarm as defined by See EEMUA Publication 191.  
            A simple alarm is represented by a single condition.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.EclipsedAlarm">
            <summary>
            An alarm that is composed of a set of conditions that are 
            all related to the same monitored data object, but where 
            only the one with the highest operational significance 
            can be active at a time. See EEMUA Publication 191, A8.3.2. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.GroupedAlarm">
            <summary>
            An alarm that is represented by multiple conditions, 
            any number of which can be active at the same time.  
            For alarms of this type, the alarm is active when at 
            least one of its conditions is active, and is inactive 
            when none of its conditions are active. See EEMUA 
            Publication 191, A8.2.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.Alert">
            <summary>
            An event similar to an alarm, but that is a lower 
            priority and has no significant consequences if missed. 
            Alerts are often referred to as warnings or prompts.  
            See EEMUA Publication 191, Appendix 7. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.EventType.DiscardedMessage">
            <summary>
            An event that indicates that the server has discarded 
            one or more queued messages from its poll queue. This 
            event type is only used when event polling is in use. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.FilterCriterion">
            <summary>
            This class represents a single filter criterion in terms of an expression, 
            in which the operand is compared against a value using a comparison operator.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.FilterCriterion.OperandName">
            <summary>
            The name of the operand. Standard operand names are defined by the 
            FilterOperand class.  Non-standard operands and the data types for 
            their values are defined in the Standard MIB by the Event Message Fields 
            and History Properties supported by the server.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.FilterCriterion.Operator">
            <summary>
            The name of the operator. Standard operators are defined by the 
            FilterOperator enumeration.  Operator values between 0 and 
            UInt16.MaxValue are reserved.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.FilterCriterion.ComparisonValue">
            <summary>
            The comparison value.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.FilterCriterion.CompareIdentical(Xi.Contracts.Data.FilterCriterion)">
            <summary>
            This method compares this FilterCriterion against the filterToCompare 
            to determine if they are identical. Identical FilterCriterion are are those 
            with the same operand, operator, and comparison value.
            </summary>
            <param name="filterToCompare">
            The FilterCriterion to compare against this FilterCriterion.
            </param>
            <returns>
            Returns TRUE if the FilterCriterion are identical. Otherwise returns FALSE.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.FilterSet">
            <summary>
            <para>This class is used to define the set of filters used by the server to 
            find objects.  The filter set is composed of a list of ORedFilters that 
            are logically ANDed together.  That is, to result in a value of TRUE, 
            each ORedFilters element in the list must result in TRUE.</para>
            <para>The boolean Not member is provided to allow DeMorgan's Theorem to be 
            used to convert an ORed expression of type:</para>
            <para>"((A AND B) OR (C AND D))" to 
            <para>"!((!A OR !B) AND (!C OR !D))",</para> 
            <para>where '!' represents "NOT".</para>
            </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.FilterSet.Not">
            <summary>
            Set to TRUE to negate the resuls of the Filters parameter.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.FilterSet.Filters">
            <summary>
            <para>The list of ORedFilters. Each element of the list contains its own list 
            of filters that are logically ORed together, and each element must resolve to 
            TRUE for this list of ORed filters to result in TRUE. That is, the elements of 
            this list are ANDed together, while the elements of each of the ORedFilters 
            are ORed together.</para>
            <para>For example, the expression "((A OR B) AND (C OR D))" would be represented 
            by setting "Not" to false and a "Filters" list containing two ORedFilters, one 
            that contains "(A OR B)", and one that contains "(C OR D)". </para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.FilterSet.CompareIdentical(Xi.Contracts.Data.FilterSet)">
            <summary>
            <para>This method compares this FilterSet against the setToCompare to determine 
            if they are identical. Identical FilterSets are those with the same number of 
            ORedFilters that are identical and in the same order.  </para>
            <para>Identical ORedFilters are are those with the same number of FilterCriterion 
            that are identical and in the same order. </para>
            </summary>
            <param name="setToCompare">
            The FilterSet to compare against this FilterSet.
            </param>
            <returns>
            Returns TRUE if the FilterSets are identical. Otherwise returns FALSE.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.FindCriteria">
            <summary>
            This class is used to define the criteria used by the server to 
            find objects or types.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.FindCriteria.StartingPath">
            <summary>
            <para>Identifies the position in the object/type hierarchy from which 
            this FindObjects or FindTypes request will begin. This path is specified 
            as an ordered list of object/type names that begins with either the 
            root or with a specific object/type.  Paths that begin with the root are 
            considered to be "Root Paths" and those that begin with an object/type are 
            considered to be "Relative Paths".</para>
            <para> For Root Paths, the first element of the path is an InstanceId string 
            whose LocalId is empty (e.g. DA:/").  For Relative Paths, the first element of 
            the path is set to the InstanceId string of the object used as the base of 
            the path. Note that Xi servers that wrap OPC HDA servers are not capable of 
            supporing relative paths since OPC HDA servers are not capable of changing 
            the browse position using an ItemId.</para>
            <para>Null or empty paths indicate that the find is to begin at the root.</para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.FindCriteria.FilterSet">
            <summary>
            <para>The FilterSet to be used to find objects. </para>
            <para>The default behavior for filtering is to look for both branches and 
            leaves, and therefore, the BranchOrLeaf filter operand is to select only branches 
            or only leaves.</para>  
            <para>The default behavior for filtering is to look only for objects that are 
            children of the StartingPath.  Therefore, two filter operands are defined to allow 
            the client to modify this behavior. The StartingObjectAttributes filter operand 
            allows the client to request that object attributes of the object 
            identified by the StartingPath also be selected and returned.  The 
            StartingObjectAttributesOnly filter operand, on the other hand, allows the client 
            to request that object attributes of only the object identified by the StartingPath 
            be selected and returned (the object attributes of the children are not returned).</para>  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.InstanceId">
            <summary>
            <para>The InstanceId is a string that identifies an instance that 
            can be accessed through an Xi server.  The InstanceId closely resembles 
            a URL. It contains a resource type prefix, a system name/id qualifier 
            for the local identifier, and the local identifier itself. </para>
            <para>The resource type is terminated by a ':' that is followed by an 
            optional SystemId.  The local identifier follows and is always preceded and 
            terminated by a '/', producing an InstanceId of the form:</para>
            <para>"ResourceType:System/LocalId/" (SystemId is present), or</para>
            <para>"ResourceType:/LocalId/" (SystemId is NOT present), or</para>
            <para>The InstanceId may also contain an Element Identifier that can be used 
            to identify a specific element or range of elements of the identified object 
            (e.g. an element or series of elements of an array).  When present the 
            ElementId always follows the LocalId forward slash ('/') terminator and may 
            not itself contain a forward slash. See the ElementId property description for 
            more detail.</para> 
            <para>Each of these elements of the InstanceId is defined as a 
            property of the InstanceId string. See the description of each 
            of these properties for more detail.</para>
            <para>The following are examples of valid InstanceIds:</para>
            <para>"DA:MySystem/MyObject/" - identifies a data object in MySystem.</para>
            <para>"DA:MySystem/MyObject/[4]" - identifies the fifth element (at zero-based index 4)
            of a constructed (e.g array) data object in MySystem.</para>
            <para>"DA:/MyObject/" - identifies a data object using only it local id.</para>
            <para>"MySystem/MyObject/" - identifies an object in MySystem.</para>
            <para>":MySystem/MyObject/" - identifies an object in MySystem.</para>
            <para>":MyPlant.MySystem/MyObject/" - identifies an object in MySystem that is in MyPlant.</para>
            <para>"/MyObject/" - identifies an object using only it local id.</para>
            <para>":/MyObject/" - identifies an object using only it local id.</para>
            <para>"//" - identifies the root within the server.</para>
            <para>"DA://" - identifies the root for data objects within the server.</para>
            <para>"DA:MySystem//" - identifies the root for data objects in MySystem.</para>
            <para>The following are examples of invalid InstanceIds:</para>
            <para>"D:MySystem/MyObject" - The ResourceType must be at least 2 characters and 
            MyObject should be terminated by '/'.</para>
            <para>"MyObject" - the LocalId must be preceded and terminated by a '/'</para>
            <para>":MyPlant/MySystem/MyObject/" - not invalid, but identifies an object 
            in MyPlant whose local id is "MySystem/MyObject.  It should be more 
            appropriately named ":MyPlant.MySystem/MyObject/"</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.InstanceId.RootId">
            <summary>
            The InstanceId.FullyQualifiedId string for the Root.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.InstanceId.FullyQualifiedId">
            <summary>
            <para>The complete instance identifier string composed of 
            the ResourceType, System, and LocalId.</para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.#ctor">
            <summary>
            This is the default constructor.  It creates an object 
            with a null identifier.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.#ctor(System.String)">
            <summary>
            This constructor creates an InstanceId for the local server 
            using a fully qualified identifier or a local id.
            </summary>
            <param name="theId">
            The local id or the fully qualified id.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.#ctor(System.String,System.String,System.String)">
            <summary>
            This constructor creates an InstanceId from an optional resource 
            type, an optional system and an identifier local to the system 
            that contains the instance. 
            </summary>
            <param name="resourceType">
            The ResourceType property. Null or empty if not used. If present,
            the constructor always inserts a '/' after the ResourceType during 
            construction of the FullyQualifiedId.
            </param>
            <param name="system">
            The System property. Null or empty if not used.
            </param>
            <param name="localId">
            The local id property. The constructor always inserts '/' before the 
            localId during construction of the FullyQualifiedId.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            This constructor creates an InstanceId from an optional resource 
            type, an optional system, an identifier local to the system 
            that contains the instance, and an element id that identifies a 
            specific element or range of elements. 
            </summary>
            <param name="resourceType">
            The ResourceType property. Null or empty if not used. If present,
            the constructor always inserts a '/' after the ResourceType during 
            construction of the FullyQualifiedId.
            </param>
            <param name="system">
            The System property. Null or empty if not used.
            </param>
            <param name="localId">
            The local id property. The constructor always inserts '/' before the 
            localId during construction of the FullyQualifiedId.
            </param>
            <param name="elementId">
            The local id property. The constructor always inserts '/' before the 
            localId during construction of the FullyQualifiedId.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.#ctor(Xi.Contracts.Data.InstanceId)">
            <summary>
            This constructor creates an InstanceId from another InstanceId.  
            </summary>
            <param name="instanceId">The instance id that is to be copied to 
            the InstanceId being created.</param>
        </member>
        <member name="P:Xi.Contracts.Data.InstanceId.ResourceType">
            <summary>
            <para>This optional property returns the portion of the InstanceId 
            between the beginning of the InstanceId and the first ':' character. 
            The standard ResourceTypes are defined by constants in this class.  
            The ResourceType must be at least two characters.</para>
            <para>These constants may be extended by the server by appending characters 
            (e.g. "DA1" and "DA2") to differentiate instances of the same ResourceType.  
            This is only necessary when the server wraps more than one underlying server 
            of the same ResourceType (e.g more than one OPC DA server). </para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.InstanceId.System">
            <summary>
            <para>This optional property returns the portion of the InstanceId 
            between the ResourceType and the LocalId. The ':' delimiter that 
            terminates the ResourceType and '/' delimiter that starts the LocalId 
            are not included in the System.  The System value is not permitted 
            to contain the '/' character. </para>
            <para>The System value is specific to the server, but it is recommended 
            that it identify the system that contains the instance.  If the system 
            name is qualified by one or more higher level names, such as the SiteName, 
            it is recommended that they be separated from each other by '.' characters. 
            E.g. "Site#1.System#3".</para>  
            <para>If all InstanceIds provided by server are contained within the same 
            system, the System property may be omitted from InstanceIds. In this case, the 
            system name is contained in the ServerDescription object accessible via 
            the Identify() method.</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.InstanceId.LocalId">
            <summary>
            This property returns the local id portion of the InstanceId.
            The local id identifies an instance within the identified system and site.
            It always follows the first '/' in the FullyQualifiedId.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.InstanceId.ElementId">
            <summary>
            <para>This property returns the element id portion of the InstanceId.
            The element id is a zero-based index that identifies an element 
            of an array or structure, or a list of elements. </para>
            <para>This property always follows the last '/' in the FullyQualifiedId.</para>
            <para>Each index is contained within square brackets (e.g. [6], or [4][5] 
            for a two-dimensional array. Servers are free to define other constructs 
            to identify elements. The only constraint is that the ElementId 
            cannot contain a forward slash ('/').</para>
            <para>If a range of indexes are to be specified, two indexes separated by 
            a hyphen ('-') are contained within a pair of square brackets (e.g. [3-6]).
            In this case, the order, ascending or descending is determined by which 
            index of the pair is higher. For example, [6-3] indicates a descending order 
            of indexes of 6, 5, 4, and 3.</para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.IsValid(Xi.Contracts.Data.InstanceId)">
            <summary>
            This static method checks the validity of an instance id.
            </summary>
            <param name="instanceId">
            The instance id to validate.
            </param>
            <returns>
            True if valid. False if not.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.IsValid">
            <summary>
            This method checks the validity of this instance id.
            </summary>
            <returns>
            True if valid. False if not.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.InstanceId.ToString">
            <summary>
            This override returns the LocalId as the string representation of the InstanceId.
            </summary>
            <returns>
            The string representation of the InstanceId.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.JournalDataChangedValues">
            <summary>
            This class contains the changed historical data values for a specific data object.
            <para>NOTE: The HistoricalValues parameter is null for this type!</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.ResultCode">
            <summary>
            Result Code for the corresponding server alias / client alias.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.ClientAlias">
            <summary>
            The client-assigned alias for a data object.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.Calculation">
            <summary>
            The calculation used to derive these Historical Values
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.StartTime">
            <summary>
            The servers start time for the response values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.EndTime">
            <summary>
            The servers end time for the response values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.ErrorInfo">
            <summary>
            The overall Error Info for this Journal Data Value
            or null if there is no additional error information.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataChangedValues.ModificationAttributes">
            <summary>
            The attributes that describe the changes to the HistoricalValues element of 
            the JournalDataReturnValues base class. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.JournalDataPropertyValue">
            <summary>
            This class contains the results of attmepting to access a set of historized 
            property values for a given data object.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataPropertyValue.ResultCode">
            <summary>
            The result code associated with accessing the property.  
            See XiFaultCodes claass for standardized result codes. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataPropertyValue.ClientAlias">
            <summary>
            The client-assigned alias for the historized data object.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataPropertyValue.PropertyId">
            <summary>
            The id of the property being accessed.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataPropertyValue.PropertyValues">
            <summary>
            An optional list of history properties of the historized data object.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.JournalDataValues">
            <summary>
            This class is used to return requested historical data values or 
            historical attribute values to the client.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.ResultCode">
            <summary>
            The Result Code being returned for the associated data 
            object identified by the ClientAlias and ServerAlias.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.ErrorInfo">
            <summary>
            The overall Error Info associated with this ResultCode,
            or null if there is no additional error information.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.ClientAlias">
            <summary>
            When used in a read context (returned from the server) 
            this is the Client Alias.  When used in a write context 
            (sent to the server) this is the Server Alias.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.Calculation">
            <summary>
            The calculation used to derive these Historical Values
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.StartTime">
            <summary>
            The servers start time for the response values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.EndTime">
            <summary>
            The servers end time for the response values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.JournalDataValues.HistoricalValues">
            <summary>
            The list of requested history values if the Result Code indicates success; otherwise null.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ListAttributes">
            <summary>
            Attributes for a list - includes data, journal, event and history lists.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data contract 
            class by recording versioning information about it.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.ResultCode">
            <summary>
            Result Code from the list being defined or condition of list for list attributes.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.ClientId">
            <summary>
            The client-defined identifier used to access the list
            This value is used as the listId for responses from the server.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.ServerId">
            <summary>
            The server-defined identifier used to access the list
            This value is used as the listId for requests made to 
            the server.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.ListType">
            <summary>
            Indicates the type of list to be created.
            The standard list types are defined by the Xi.Contacts.Constants.StandardListType enumeration. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.Enabled">
            <summary>
            When a list is Enabled read, write and poll operations may be 
            performed on the list elements.  Also only enabled lists will 
            report data by way of callbacks.  Note that polling and callbacks 
            are generally mutually exclusive.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.UpdateRate">
            <summary>
            The rate, expressed in milliseconds, at which the server 
            updates the elements of a list with values from the 
            underlying system.  A value of 0 indicates that updating 
            is exception-based.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.BufferingRate">
            <summary>
            <para>An optional-use member that indicates that the server is 
            to buffer data updates, rather than overwriting them, until either 
            the time span defined by the buffering rate expires or the values 
            are transmitted to the client in a callback or poll response. If 
            the time span expires, then the oldest value for a data object is 
            discarded when a new value is received from the underlying system.</para>
            <para>The value of the bufferingRate is set to 0 to indicate 
            that it is not to be used and that new values overwrite (replace) existing 
            cached values.  </para>
            <para>When used, this parameter contains the client-requested buffering 
            rate, which the server may negotiate up or down, or to 0 if the 
            server does not support the buffering rate. </para>
            <para>The FeaturesSupported member of the StandardMib is used to indicate 
            server support for the buffering rate.</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.CurrentCount">
            <summary>
            The current number of the elements in the list.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.HowSorted">
            <summary>
            Specifies if and how the list is sorted.
            Standard values are defined by the SortType enumeration.
            The high-order 8 bits are used to define non-standard sort 
            orders. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.SortKeys">
            <summary>
            <para>Specifies the sort keys for the list.  The sort keys 
            are identified by their names or their InstanceIds.</para>
            <para>For example, if the list is a list of EventMessages that 
            is sorted on the OccurrenceTime and then on the 
            SourceId, this list will contain "OccurrenceTime" and 
            "SourceId".</para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ListAttributes.FilterSet">
            <summary>
            The current Filter Set for this list.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ListInstanceId">
            <summary>
            This class identifies a data object to be added 
            to a list. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ListInstanceId.ObjectElementId">
            <summary>
            The Object LocalId for the object, typically obtained 
            using the FindObjects() method, plus an optional 
            element identifier for elements of a constructed 
            data type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ListInstanceId.ClientAlias">
            <summary>
            The client-assigned alias for the data object.
            This alias is used to refer to the data object 
            within the context of the list to which it is 
            added. The value 0 is reserved and cannot be used. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ListInstanceId.ListElementOptions">
            <summary>
            Specifies additional options for the list element
            (e.g., treat a data object as a string type)
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.MexEndpointInfo">
            <summary>
            This class defines the details of a MEX endpoint to give the
            client enough information to select an endpoint in case the
            server has multiple MEX endpoints and to access this MEX endpoint.
            The Binding details cannot be communicated and must be standardized.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.MexEndpointInfo.Description">
            <summary>
            The description of the endpoint.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.MexEndpointInfo.EndpointName">
            <summary>
            The names of the metaDataExchange endpoint.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.MexEndpointInfo.Url">
            <summary>
            The URL the client needs to use to access the endpoint.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ModificationAttributesList">
            <summary>
            This class defines attributes that describe modifications 
            performed to a history value. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.DoubleModificationTimestamps">
            <summary>
            The time that the modification was performed.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.DoubleModificationTypes">
            <summary>
            The type of modification performed. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.DoubleOperatorNames">
            <summary>
            The name or other system-specific identifier of the 
            operator who performed the modification. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.LongModificationTimestamps">
            <summary>
            The time that the modification was performed.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.LongModificationTypes">
            <summary>
            The type of modification performed. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.LongOperatorNames">
            <summary>
            The name or other system-specific identifier of the 
            operator who performed the modification. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.ObjectModificationTimestamps">
            <summary>
            The time that the modification was performed.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.ObjectModificationTypes">
            <summary>
            The type of modification performed. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModificationAttributesList.ObjectOperatorNames">
            <summary>
            The name or other system-specific identifier of the 
            operator who performed the modification. 
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ModificationAttributesList.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor initializes a ModificationAttributesList object with arrays of the 
            specified sizes.
            </summary>
            <param name="doubleArraySize">The size of the DoubleModificationTimestamps, 
            DoubleModificationTypes, and the DoubleOperatorNames arrays.</param>
            <param name="longArraySize">The size of the LongModificationTimestamps, 
            LongModificationTypes, and the LongOperatorNames arrays.</param>
            <param name="objectArraySize">The size of the ObjectModificationTimestamps, 
            ObjectModificationTypes, and the ObjectOperatorNames arrays.</param>
        </member>
        <member name="M:Xi.Contracts.Data.ModificationAttributesList.SetDouble(System.Int32,System.DateTime,Xi.Contracts.Data.ModificationType,System.String,System.UInt32,System.DateTime,System.Double)">
            <summary>
            This method is used to set the entries at a specific index in the 
            DoubleModificationTimestamps, DoubleModificationTypes, and the 
            DoubleOperatorNames arrays.
            </summary>
            <param name="idx">The index of the entries to be updated.</param>
            <param name="modificationTimestamp">The modificationTimestamp to be set for the entry.</param>
            <param name="modificationType">The modificationType to be set for the entry.</param>
            <param name="operatorName">The operatorName to be set for the entry.</param>
            <param name="statusCode">The statusCode to be set for the entry.</param>
            <param name="timestamp">The timestamp to be set for the entry.</param>
            <param name="value">The double value to be set for the entry.</param>
        </member>
        <member name="M:Xi.Contracts.Data.ModificationAttributesList.SetUint(System.Int32,System.DateTime,Xi.Contracts.Data.ModificationType,System.String,System.UInt32,System.DateTime,System.UInt32)">
            <summary>
            This method is used to set the entries at a specific index in the 
            LongModificationTimestamps, LongModificationTypes, and the 
            LonOperatorNames arrays
            </summary>
            <param name="idx">The index of the entries to be updated.</param>
            <param name="modificationTimestamp">The modificationTimestamp to be set for the entry.</param>
            <param name="modificationType">The modificationType to be set for the entry.</param>
            <param name="operatorName">The operatorName to be set for the entry.</param>
            <param name="statusCode">The statusCode to be set for the entry.</param>
            <param name="timestamp">The timestamp to be set for the entry.</param>
            <param name="value">The long value to be set for the entry.</param>
        </member>
        <member name="M:Xi.Contracts.Data.ModificationAttributesList.SetObject(System.Int32,System.DateTime,Xi.Contracts.Data.ModificationType,System.String,System.UInt32,System.DateTime,System.Object)">
            <summary>
            This method is used to set the entries at a specific index in the 
            ObjectModificationTimestamps, ObjectModificationTypes, and the 
            ObjectOperatorNames arrays.
            </summary>
            <param name="idx">The index of the entries to be updated.</param>
            <param name="modificationTimestamp">The modificationTimestamp to be set for the entry.</param>
            <param name="modificationType">The modificationType to be set for the entry.</param>
            <param name="operatorName">The operatorName to be set for the entry.</param>
            <param name="statusCode">The statusCode to be set for the entry.</param>
            <param name="timestamp">The timestamp to be set for the entry.</param>
            <param name="value">The object value to be set for the entry.</param>
        </member>
        <member name="T:Xi.Contracts.Data.ModificationType">
            <summary>
            This enumeration identifies the type of modification to 
            perform for a given journal entry.  For the Insert, 
            Replace, and Insert/Replace, the server receives a new  
            journal entry, and attempts to locate a journal entry 
            for the same data object with the same timestamp, or for 
            the same event based on the event id.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ModificationType.Insert">
            <summary>
            Inserts a new entry in the journal in timestamp order. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ModificationType.Replace">
            <summary>
            Replaces an existing entry in the journal.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ModificationType.InsertReplace">
            <summary>
            Replaces an existing entry in the journal if it exists,
            and inserts a new entry in timestamp order if it does 
            not exist.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ModificationType.Delete">
            <summary>
            Deletes an existing entry from the journal.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ModifyListAttrsResult">
            <summary>
            This class contains list attributes that can be modified. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModifyListAttrsResult.RevisedUpdateRate">
            <summary>
            The updated Update Rate.  Null if UpdateRate was not modified.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModifyListAttrsResult.RevisedBufferingeRate">
            <summary>
            The updated Buffering Rate.  Null if BufferingRate was not modified.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ModifyListAttrsResult.RevisedFilterSet">
            <summary>
            The updated FilterSet.  Null if FilterSet was not modified.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ObjectAttributeFlags">
            <summary>
            <para>The boolean attributes of an object.</para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.IsReadable">
            <summary>
            Indicates, when TRUE, that the object can be read.  
            The value is FALSE if the object is not a data object.
            IsReadable is nullable to allow it to be set to null when 
            the server does not know whether or not the object is readable.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.IsWritable">
            <summary>
            Indicates, when TRUE, that the object can be written.  
            The value is FALSE if the object is not a data object.  
            IsWritable is nullable to allow it to be set to null when 
            the server does not know whether or not the object is writable.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.IsLeaf">
            <summary>
            Indicates, when TRUE, that this object is not permitted to have 
            children in the tree.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.IsCollectingHistory">
            <summary>
            Indicates, when TRUE, that the object is currently 
            collecting historical values.  This attribute applies to 
            data objects and to objects that are Event Sources (for 
            event/alarm collection)
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.IsDataList">
            <summary>
            Indicates, when TRUE, that this object is a data list.  The members of 
            the list are leaves of this object.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.IsEventList">
            <summary>
            Indicates, when TRUE, that this object is an event list.  Event list 
            objects must have a leaf item beneath them of type FilterSet that 
            defines (selects) the members of the list.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributeFlags.NotAccessible">
            <summary>
            Indicates, when FALSE, that the object can be accessed.  
            The value is TRUE if the object cannot be accessed. This 
            may occur if, for example, the object represents a wrapped 
            server and that server is not currently accessible by the 
            Xi server wrapper.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ObjectAttributes">
            <summary>
            This class is used to return the attributes of an object.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.Name">
            <summary>
            This string provides the display name.  Names are not permitted 
            to contain the forward slash ('/') character.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.Description">
            <summary>
            This string provides the description of the object.  Null if unknown.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.ObjectFlags">
            <summary>
            This unsigned integer contains a set of bit flags, each of which 
            defines some boolean aspect of the object.  The ObjectAttributeFlags 
            enumeration defines values for this object attribute.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.InstanceId">
            <summary>
            <para>The identifier for the object instance.</para>
            <para>If the object is a data object that can be added to 
            a list, this is the identifier used for that purpose. </para>
            <para>This identifier is not used for the ObjectAttributes 
            of members of types (see the MemberPath element of TypeAttributes). </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.ObjectTypeId">
            <summary>
            <para>The identifier of the object type.  Setpoint, Process 
            Variable, and PID Block are all examples of object types.</para>  
            <para>Null if the object type is unknown.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.DataTypeId">
            <summary>
            The data type of a data object.  Null if the object is not a 
            data object.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.ListDimensions">
            <summary>
            <para>The number of elements in this list specifies 
            the number of dimensions of a List object. The value 
            of each entry in this list specifies the maximum number 
            of elements in each dimension. A value of zero indicates 
            that there is no maximum.</para>
            <para>Null if this object is not a list.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.FastestScanRate">
            <summary>
            The fastest the server can collect values from the 
            underlying system for the object (in milliseconds).  
            The value 0 indicates that there is no maximum rate, 
            or that the maximum is unknown.  Null if unused. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectAttributes.Roles">
            <summary>
            The list of roles defined for this Xi object. 
            See the ObjectRole class for more information about roles.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.IsReadable">
            <summary>
            This property represents the IsReadable bit in the ObjectFlags data member.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.IsWritable">
            <summary>
            This property represents the IsWritable bit in the ObjectFlags data member.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.IsLeaf">
            <summary>
            This property represents the IsLeaf bit in the ObjectFlags data member.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.NotAccessible">
            <summary>
            This property represents the NotAccessible bit in the ObjectFlags data member.
            The set accessor is available to allow the client application  to mark this 
            object as not accessible.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.IsCollectingHistory">
            <summary>
            This property represents the IsCollectingHistory bit in the ObjectFlags data member.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.IsDataList">
            <summary>
            This property represents the IsDataList bit in the ObjectFlags data member.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectAttributes.IsEventList">
            <summary>
            This property represents the IsEventList bit in the ObjectFlags data member.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ObjectPath">
            <summary>
            The path to a specific object or type. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ObjectPath.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectPath.Elements">
            <summary>
            <para>The path to an object (or type), either from the root or from another 
            object (or type).  The first element in the list is always an InstanceId string 
            or a TypeId string.  The InstanceId or TypeId for the root is "//".</para>
            <para>The remaining elements are object/type names (the Name member of the 
            ObjectAttributes or TypeAttributes class). Clients may construct this portion 
            of the path using the names of objects/types returned by the server in FindObjects() 
            or FindTypes() calls.  </para>
            <para>The last element in the list is always the name of an object/type, and 
            the intervening elements represent the names of objects/types (or branches) between 
            the root and the object/type identified by last element.</para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectPath.#ctor(System.Boolean)">
            <summary>
            This constructor creates an object path with a root element.
            </summary>
            <param name="rootPath">
            Indicates, when TRUE, that the path is to be a root path that 
            starts with the root element.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectPath.#ctor(Xi.Contracts.Data.ObjectPath)">
            <summary>
            This constructor creates a copy of an existing path.
            </summary>
            <param name="path">
            The existing path to copy to the new path.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectPath.#ctor(System.String,System.String)">
            <summary>
            This constructor creates an object path from a starting InstanceId 
            or TypeId string and a '/' delimited string of object/type names.
            </summary>
            <param name="startingIdString">
            The starting InstanceId.FullyQualifiedId or the TypeId string obtained 
            using the TypeId.ToString() method.
            </param>
            <param name="stringPath">
            The '/' delimited string of object/type names.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectPath.ToString">
            <summary>
            This method converts an object path to a string, using '/' characters to delimit 
            elements of the path.
            </summary>
            <returns>
            A string of '/' delimited path elements.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectPath.Clear">
            <summary>
            This method sets the list of elements to null.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectPath.IsEqualToOrChildOf(Xi.Contracts.Data.ObjectPath,Xi.Contracts.Data.ObjectPath)">
            <summary>
            This method compares two paths and determines if the first path is 
            equal to or a parent of the second path. 
            </summary>
            <param name="firstPath">
            The first path in the comparison.
            </param>
            <param name="secondPath">
            The second path in the comparison.
            </param>
            <returns>
            The results of the comparison. 0 if the first path is equal to 
            the second path and 1 if the second path is the parent of the 
            first path. -1 if neither.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.ObjectRole">
            <summary>
            <para>This class is used by the server to define the roles 
            for objects that it supports. Roles can be assigned to 
            objects to allow them to be found using the FindObjects() 
            method.</para>  
            <para>Note that the role of an object may be relative 
            to another object or the role of an object may be independent 
            of its relationship with another object.  For example, a company 
            may be a customer (role) of one company, and a supplier (role) 
            of another.  Or the company may just have the role of 
            manufacturer.</para>
            <para>Two standard relationship independent roles are defined 
            for control systems, Area and EventSource.  Each is defined 
            using a constant.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectRole.RoleId">
            <summary>
            TypeId of the Role. Standard RoleIds are defined by the 
            Xi.Contracts.Constants.ObjectRoleId class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectRole.Name">
            <summary>
            TypeId of the Role. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ObjectRole.Description">
            <summary>
            Description of the Role. 
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectRole.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectRole.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This constructor initializes an Object Role with the supplied namespace and 
            id of the role's InstanceId, and the name and description of the role.
            </summary>
            <param name="schemaType">
            The schemaType component of the role's TypeId.
            </param>
            <param name="roleNamespace">
            The namespace component of the role's TypeId.
            </param>
            <param name="roleId">
            The identifier for the role's TypeId.
            </param>
            <param name="name">
            The name of the role.
            </param>
            <param name="description">
            The text description of the role.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.ObjectRole.IsRole(Xi.Contracts.Data.TypeId[],Xi.Contracts.Data.TypeId)">
            <summary>
            Determines if the specified list of roles contains the specified role.
            </summary>
            <param name="roles">The list of roles.</param>
            <param name="role">The specified role.  </param>
            <returns>TRUE, if the specified role is in the list.
            Otherwise, FALSE.</returns>
        </member>
        <member name="T:Xi.Contracts.Data.ORedFilters">
            <summary>
            This class defines a list of FilterCriterion that are logically ORed 
            together.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ORedFilters.FilterCriteria">
            <summary>
            The list of FilterCriterion that are to be ORed together.  If at least 
            one of the FilterCriterion results in TRUE, then the results for the 
            list are TRUE.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ORedFilters.CompareIdentical(Xi.Contracts.Data.ORedFilters)">
            <summary>
            <para>This method compares this ORedFilters against the filtersToCompare to determine 
            if they are identical. Identical ORedFilters are are those with the same number of 
            identical FilterCriterion that are in the same order. </para>
            <para>identical FilterCriterion are are those with the same operand, operator, and 
            comparison value.</para>
            </summary>
            <param name="filtersToCompare">
            The FilterSet to compare against this FilterSet.
            </param>
            <returns>
            Returns TRUE if the FilterSets are identical. Otherwise returns FALSE.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.ParameterDefinition">
            <summary>
            This class is used to define parameters, fields, and properties.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ParameterDefinition.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ParameterDefinition.Name">
            <summary>
            The display name of the parameter, field, or property.  Names 
            are not permitted to contain the forward slash ('/') character.  
            This name is used as the FilterOperand in FilterCriterion.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ParameterDefinition.Description">
            <summary>
            The optional description of the parameter, field, or property.  
            Null if unused.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ParameterDefinition.ObjectTypeId">
            <summary>
            The object type of the parameter, field, or property.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ParameterDefinition.DataTypeId">
            <summary>
            The data type of the parameter, field, or property.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.PassthroughMessage">
            <summary>
            This class defines the attributes of passthrough messages.  
            Passthrough messages are messages sent by the client to the 
            server, who forwards them unchanged to the recipient. The 
            recipient represents the entity responsible for processing 
            or otherwise consuming the message.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughMessage.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data contract 
            class by recording versioning information about it.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughMessage.Name">
            <summary>
            The name of the Passthrough as known by the Recipient.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughMessage.Description">
            <summary>
            The text description of the Passthrough.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughMessage.Asynch">
            <summary>
            Indicates, when TRUE, that the Passthrough returns its response 
            asynchrononously via the callback or poll interface.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughMessage.InParameters">
            <summary>
            The definition of the Passthrough's input message parameters.  
            The server is responsible for passing these parameters to the 
            recipient.  It is possible that the entire input passthrough 
            message is defined by a single data type.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughMessage.OutParameters">
            <summary>
            The definition of the Passthrough's output message parameters.
            The server is responsible for passing these parameters from the 
            recipient.  It is possible that the entire output passthrough 
            message is defined by a single data type. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.PassthroughResult">
            <summary>
            This class defines the response messsage that is returned  
            to the client for a passthrough request.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughResult.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughResult.ResultCode">
            <summary>
            The Result Code returned by the passthrough mechanism.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughResult.InvokeId">
            <summary>
            The InvokeId passed in the Passthrough() request.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.PassthroughResult.ReturnData">
            <summary>
            The data returned by the passthough mechanism.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.RecipientPassthroughs">
            <summary>
            This class defines the passthrough messages that 
            can be sent a given recipient.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.RecipientPassthroughs.RecipientId">
            <summary>
            The identifier of the recipient of one or more passthrough 
            messages.  The recipient represents the entity to which 
            the client sends the messages and that is responsible for 
            processing or otherwise consuming the message.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.RecipientPassthroughs.PassthroughMessages">
            <summary>
            The list of Passthough messages that can be sent to the 
            recipient.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.RequestedString">
            <summary>
            This class defines the results of attempting to retrieve 
            a string.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.RequestedString.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.RequestedString.ResultCode">
            <summary>
            The Result Code associated with retrieving the string.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.RequestedString.String">
            <summary>
            The requested string.  If the ResultCode for this string 
            indicates failure, this string is null.   
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ServerDescription">
            <summary>
            This class contains descriptive information about the 
            server.   
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ServerDescription.ServerDiscoveryUrl">
            <summary>
            The URL used to access the server's IServerDiscoveryEndpoint.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ServerDescription.XiContractsVersionNumber">
            <summary>
            The version number of the Xi Contracts used by this server.
            The version number is defined by the version number of the 
            Xi Contracts assembly.  If this member is null, then the version 
            number defaults to 1.0.0.0.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.ServerTypes">
            <summary>
            The server types supported by this server. Standard types are defined 
            by the ServerType class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.VendorName">
            <summary>
            <para>Name of the server software vendor.  </para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.VendorNamespace">
            <summary>
            <para>Namespace for types defined by this vendor.  This may or 
            may not be the same as the VendorName.  Null or empty if not used.</para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.ServerName">
            <summary>
            <para>Name of the server software.</para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.ServerNamespace">
            <summary>
            <para>Namespace for server-specific types. Null or empty if not used.</para> 
            <para>This name is typically a concatentation of the VendorNamespace 
            and the ServerName (separated by a '/' character) 
            (e.g "MyVendorNamespace/MyServer").</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.HostName">
            <summary>
            <para>The HostName of the machine in which the server resides (runs).  The 
            HostName is used as part of the object path in InstanceIds of the 
            server's objects.</para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.ServiceName">
            <summary>
            <para>The name of the WCF service provided by the server. </para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.SystemName">
            <summary>
            <para>The name of the system that contains the objects accessible 
            through the server.  Null or empty if the server provides access 
            to objects from more than one system. </para> 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.InstanceIdSystemProperties">
            <summary>
            The list of InstanceId System property values supported by the server. 
            See the description of InstanceId for the description of valid values. 
            May be null if the server provides access to only one system.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.SecurityTokenServiceUrl">
            <summary>
            The URL for the Security Token Service. Null if the Security 
            Token Service is not present.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.SupportedLocaleIds">
            <summary>
            Supported locale ids (the native language is first entry)
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.UserInfo">
            <summary>
            User/deployment-specific information about the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDescription.ServerDetails">
            <summary>
            Detailed information about the server.
            Set to null if the ServerDescription is being 
            accessed without a client context.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ServerDetails">
            <summary>
            This class contains descriptive information about the server.   
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDetails.StartTime">
            <summary>
            The time the server was last started.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDetails.BuildNumber">
            <summary>
            The build number of the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDetails.Version">
            <summary>
            The version of the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerDetails.VendorInfo">
            <summary>
            Vendor-specific information about the server.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ServerEntry">
            <summary>
            This class defines the resource management endpoints of a server.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ServerEntry.ServerDescription">
            <summary>
            The description of the server.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ServerEntry.MexEndpoints">
            <summary>
            The names of available metaDataExchange endpoints.
            These names can only be used as a selection choice for the client.
            The Mex endpoint communication settings must be standardized.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.ServerEntry.EndpointServerSettings">
            <summary>
            Endpoint configuration settings that are not in the endpoint metadata.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ServerState">
            <summary>
            This enumeration defines the standard server state values.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.Operational">
            <summary>
            The server is operational - this is the normal running state for a server
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.Diagnostics">
            <summary>
            The server is running, but in diagonstics mode.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.Initializing">
            <summary>
            The server is not operational because it is starting up.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.Faulted">
            <summary>
            The server is not operational due to a fault.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.NeedsConfiguration">
            <summary>
            The server is not operational because it has not been configured.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.OutOfService">
            <summary>
            The server is not operational because it has been taken out 
            of service.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.NotConnected">
            <summary>
            The server is not operational because it is not connected to 
            its underlying system/devices.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.Aborting">
            <summary>
            The server is operational but it is shutting down and aborting 
            all of its client contexts.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerState.NotOperational">
            <summary>
            The server is not operational, but the reason is not known.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ServerStatus">
            <summary>
            This class contains dynamic information about the server.   
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerStatus.ServerName">
            <summary>
            The name of the Xi server or wrapped server. For the Xi server, 
            this is the ServerName contained in the ServerDescription object.  
            For wrapped OPC COM servers, the Prog Id of the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerStatus.ServerType">
            <summary>
            The type of the server for which the status is being reported.
            The Xi.Contracts.Constants.ServerType enumeration is used to 
            identify the type of the server. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerStatus.CurrentTime">
            <summary>
            The current time in the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerStatus.ServerState">
            <summary>
            The current state of the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.ServerStatus.Info">
            <summary>
            Text string specific to the current state of the server.
            for example, when the server state is aborting, this string contains the reason.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.SetCallbackResult">
            <summary>
            This class is used to return a result code along with 
            the negotiated KeepAliveSkipCount and CallbackRate.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.SetCallbackResult.Result">
            <summary>
            The Result Code being returned.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.SetCallbackResult.KeepAliveSkipCount">
            <summary>
            The server-negotiated KeepAliveSkipCount.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.SetCallbackResult.CallbackRate">
            <summary>
            The server-negotiated callback rate.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.SetCallbackResult.#ctor(System.UInt32,System.UInt32,System.TimeSpan)">
            <summary>
            This constructor creates a SetCallbackResult from a result code, 
            a keepAliveSkipCount, and a callbackRate.
            </summary>
            <param name="result">
            The result code.
            </param>
            <param name="keepAliveSkipCount">
            The KeepAliveSkipCount.
            </param>
            <param name="callbackRate">
            The callback rate.
            </param>
        </member>
        <member name="T:Xi.Contracts.Data.MibElementIds">
            <summary>
            <para>This enum contains the element ids for each of the 
            StandardMib elements that can be included in the list of  
            ChangedMibElementIds.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.MethodsSupported">
            <summary>
            The identifier for the OptionalMethodsSupported MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.FeaturesSupported">
            <summary>
            The identifier for the OptionalFeaturesSupported MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.RecipientPassthroughs">
            <summary>
            The identifier for the RecipientPassthroughs MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.ObjectRoles">
            <summary>
            The identifier for the ObjectRoles MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.EventMessageFilters">
            <summary>
            The identifier for the EventMessageFilters MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.EventCategoryConfigurations">
            <summary>
            The identifier for the CategoryConfiguration MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.DataJournalFilters">
            <summary>
            The identifier for the DataJournalFilters MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.DataJournalOptions">
            <summary>
            The identifier for the DataJournalOptions MIB element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.MibElementIds.EventJournalMessageFilters">
            <summary>
            The identifier for the EventJournalMessageFilters MIB element.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.StandardMib">
            <summary>
            <para>This class defines the standard Management Objects of the 
            server.  Management objects in this class that are not supported 
            by the server are set to null.</para>  
            <para>See the Xi GetStandardMib and GetVendorMib methods for 
            additional information.</para> 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StandardMib.CurrentVersion">
            <summary>
            The current version of the standard MIB. Each time a MIB 
            element changes, the version number of the MIB is incremented.  
            The InstanceId of the Current Version of the MIB is 
            "Xi:MIB/CurrentVersion".  Clients may add the Current 
            Version to a List to detect MIB Changes.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.ChangedMibElementIds">
            <summary>
            Ids of the standard MIB Elements that changed causing the  
            current version to be incremented.  Each time the Current 
            Version is updated, the ChangeFlags are cleared, and then 
            reset to identify the newly changed standard MIB Elements.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.MethodsSupported">
            <summary>
            The list of optional Xi Methods supported by the server.  
            This list may be different depending on the security access 
            restrictions placed on the context.  The Xi methods are 
            defined by the XiMethods enumeration.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.FeaturesSupported">
            <summary>
            The list of optional Xi Features supported by the server.  
            The Xi features are defined by the XiFeatures enumeration.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StandardMib.RecipientPassthroughsList">
            <summary>
            The list of Recipients and the Passthroughs that can be 
            sent to them.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StandardMib.ObjectRoles">
            <summary>
            The list of Object Roles supported by the server.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.EventMessageFilters">
            <summary>
            <para>Names of the event message fields that can be used for filtering.  
            Standard field names that can be used in filters are defined in the 
            FilterOperand class.</para> 
            <para>Names of non-standard event message fields that a server can include 
            in this list are defined in the EventMessageFields element for each 
            CategoryConfiguration contained in the EventCategoryConfigurations 
            StandardMib element. </para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StandardMib.EventCategoryConfigurations">
            <summary>
            The configuration of the server's Event Categories.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.DataJournalFilters">
            <summary>
            <para>Names of the historical data properties that can be used for filtering.  
            Standard historical data properties that can be used in filters are defined 
            in the FilterOperand class.</para> 
            <para>Names of non-standard historical data properties that a server can 
            include in this list are contained in the DataJournalOptions StandardMib 
            element. </para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StandardMib.DataJournalOptions">
            <summary>
            The Data Journal options supported by the server. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.EventJournalMessageFilters">
            <summary>
            <para>Names of the event message fields that can be used for filtering 
            historical alarms and events.  Standard field names that can be used in 
            filters are defined in the FilterOperand class.</para> 
            <para>The server may include the names of additional, non-standard 
            event message fields in this list. </para>
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StandardMib.EventJournalCategoryConfiguration">
            <summary>
            The configuration of the Event Journal's Event Categories.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.StandardMib.VendorMibObjects">
            <summary>
            The identities and descriptions of Vendor objects included 
            in the MIB.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.StringTableEntry">
            <summary>
            This class defines an element of a string table.  
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StringTableEntry.Index">
            <summary>
            The index of the element.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.StringTableEntry.StringValue">
            <summary>
            The string associated with the index.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.TypeAttributes">
            <summary>
            This class provides a type attributes for a data type or 
            an object type.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.TypeAttributes.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
            <summary>
            This member supports the addition of new members to a data 
            contract class by recording versioning information about it.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeAttributes.TypeId">
            <summary>
            The identifier for the type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeAttributes.Name">
            <summary>
            This string provides the display name.  Names are not permitted 
            to contain the forward slash ('/') character.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeAttributes.Description">
            <summary>
            The description of the type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeAttributes.MemberPath">
            <summary>
            The ObjectPath for the Branch that contains the list of members for 
            this type. The list of members and their ObjectAttributes can be 
            retrieved by calling FindObjects() using the MemberPath.  The  
            InstanceId of these ObjectAttributes is set to null since these 
            ObjectAttributes describe all instances of the member, and  
            instances of the member description inherit its ObjectAttributes. 
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.TypeAttributes.Schema">
            <summary>
            A byte-string that contains a detailed specification of the type.  
            The SchemaType element of the TypeId indicates the format of 
            the schema.  Null if unknown or unused.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.TypeId">
            <summary>
                This class defines the identifier for data types and object types.  Each
                element of the TypeId is case-sensitive.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.TypeId.#ctor">
            <summary>
                The default constructor.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.TypeId.#ctor(System.Type)">
            <summary>
                Construct a Type LocalId given a .NET / CLI Type.
                Preconditions: id != Null.
            </summary>
            <param name="id">
                The .NET / CLI Type for which the TypeId is being constructed.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.TypeId.#ctor(System.String,System.String,System.String)">
            <summary>
                This constructor initializes a new TypeId object.
            </summary>
            <param name="schemaType">
                The SchemaType.
            </param>
            <param name="nameSpace">
                The Namespace.
            </param>
            <param name="id">
                The LocalId.
            </param>
        </member>
        <member name="F:Xi.Contracts.Data.TypeId.SchemaType">
            <summary>
                <para>
                    This string identifies the type of the type definition
                    (the type of its schema).  Standard values are defined by the XiSchemaType
                    enumeration.
                </para>
                <para>
                    For Data Types, the value XiSchemaType.Xi, whose value is null,
                    is used for the standard .NET data types and those defined by the Xi.
                </para>
                <para>
                    The forward slash '/'character and the dot character, '.',
                    cannot be used in the SchemaType string.
                </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeId.Namespace">
            <summary>
                <para>
                    This member is used to identify the context for the
                    Identifier. The context defines which organization defined
                    the type and any additional qualifying information. For CLS
                    data types, the SchemaType is set to XiSchemaType.Xi and the
                    namespace is set to XiNamespace.Xi. Both the XiSchemaType.Xi
                    and XiNamespace.Xi strings are defined to have null values.
                </para>
                <para>
                    For example, data types for Fieldbus Foundation devices
                    are defined either by the Fieldbus Foundation or by device
                    manufacturers. When defined by the Fieldbus Foundation, the
                    Namespace would be composed of a single string
                    with a value of "FF", and if defined by a device manufacturer,
                    the path would be composed of the Manufacturer LocalId registered by
                    the Fieldbus Foundation, the device type, and the device revision.
                    If the type is an EDDL type, the EDD revision is also needed.
                </para>
                <para>Set to XiNamespace.Xi (null) for .NET defined data types.</para>
                <para>
                    For types defined by the server vendor for use in multiple
                    Xi servers, the ServerDescription VendorName should be used as
                    the namespace.
                </para>
                <para>
                    The forward slash '/' character is not permitted to be used
                    within the namespace.  Instead, the dot '.' character should be used
                    to separate elements of the namespace.
                </para>
                <para>
                    Following the example above, if the vendor defines the type
                    specifically for a given server, then the ServerDescription ServerName,
                    separated by a '.' should be appended after the vendor name.
                    (e.g. "MyVendor.MyServer").
                </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.TypeId.LocalId">
            <summary>
                The string representation of the identifier for the type.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.TypeId.Compare(Xi.Contracts.Data.TypeId)">
            <summary>
                This method compares this TypeId with a TypeId passed-in as a parameter.
            </summary>
            <param name="typeId">
                The TypeId to compare against this TypeId.
            </param>
            <returns>
                True if the two TypeIds are the same, and false if not.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.TypeId.ToString">
            <summary>
                <para>
                    This method converts a type id to a string. The string form of the TypeId
                    closely resembles a URL, containing a resource type prefix, a namespace qualifier,
                    and the identifier with the exception that the namespace qualifier and the local
                    identifier are separated by the dot '.' character.
                </para>
                <para>  SchemaType:Namespace.Identifier</para>
                <para>
                    If the SchemaType is present, it is terminated with the colon ':' character,
                    and followed by the Namespace.
                </para>
                <para>
                    If the SchemaType is not present, the Namespace is the first element of the
                    string.
                </para>
                <para>
                    If the Namespace is present, it is terminated with the dot '.' character, and
                    followed by the LocalId.
                </para>
                <para>If the Namespace is not present, the LocalId follows immediately. </para>
                <para>
                    For example, if the type is the CLS Int32 type, the string representation would be
                    "System.Int32".
                </para>
            </summary>
            <returns>
                The resulting string.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Data.TypeIdResult">
            <summary>
            This class is used to return an error code and the 
            identifier of the entity for which the requested 
            operation failed.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.TypeIdResult.ResultCode">
            <summary>
            The Error Code being returned.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.TypeIdResult.Id">
            <summary>
            The TypeId of the entity associated with the error result. 
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.TypeIdResult.#ctor(System.UInt32,Xi.Contracts.Data.TypeId)">
            <summary>
            This constructor initializes the ResultCode and the TypeId based 
            on the corresponding input parameters.
            </summary>
            <param name="resultCode">
            The ResultCode to be set.
            </param>
            <param name="id">
            The TypeId to be set.</param>
        </member>
        <member name="T:Xi.Contracts.Data.WriteJournalValues">
            <summary>
            This class is used to specify a data object to write and the 
            value to write.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteJournalValues.ListAlias">
            <summary>
            Identifies the list that contains the data objects 
            to write.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteJournalValues.HistoricalValues">
            <summary>
            The list of data object values to write. Each data object 
            is identified by its server alias. When used to write 
            historical values using the WriteJournalData() method, 
            the timestamp is used to identify a specific journal 
            entry for the data object.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.WriteValueArrays">
            <summary>
            This class is used to transfer the server-assigned alias of 
            a data object and its value.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteValueArrays.DoubleServerAlias">
            <summary>
            The array of server-assigned aliases of the double values to be written.
            The size and order of this array matches the size and order of the 
            DoubleValues array.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteValueArrays.UintServerAlias">
            <summary>
            The array of server-assigned aliases of the uint values to be written.
            The size and order of this array matches the size and order of the 
            UintValues array.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteValueArrays.ObjectServerAlias">
            <summary>
            The array of server-assigned aliases of the object values to be written.
            The size and order of this array matches the size and order of the 
            ObjectValues array.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteValueArrays.DoubleValues">
            <summary>
            The array of double values to be written.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteValueArrays.UintValues">
            <summary>
            The array of integer values to be written.
            Used to transfer byte, sbyte, short, ushort, int and uint values.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.WriteValueArrays.ObjectValues">
            <summary>
            The array of object values to be written.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.WriteValueArrays.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor initializes a WriteValueList object with empty  
            lists of server aliases and object values.
            </summary>
            <param name="doubleArraySize">
            The size of the arrays associated with double values.
            </param>
            <param name="uintArraySize">
            The size of the arrays associated with long values.
            </param>
            <param name="objectArraySize">
            The size of the arrays associated with object values.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.WriteValueArrays.SetDouble(System.Int32,System.UInt32,System.Double)">
            <summary>
            This method adds a double value to a WriteValueList
            </summary>
            <param name="idx">
            The array index of the value to be added.  The same index 
            is used to add the server alias to associated server alias array.
            </param>
            <param name="serverAlias">
            The server-alias of the value.
            </param>
            <param name="value">
            The double value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.WriteValueArrays.SetUint(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            This method adds a long value to a WriteValueList
            </summary>
            <param name="idx">
            The array index of the value to be added.  The same index 
            is used to add the server alias to associated server alias array.
            </param>
            <param name="serverAlias">
            The server-alias of the value.
            </param>
            <param name="value">
            The long value.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.WriteValueArrays.SetObject(System.Int32,System.UInt32,System.Object)">
            <summary>
            This method adds an object value to a WriteValueList
            </summary>
            <param name="idx">
            The array index of the value to be added.  The same index 
            is used to add the server alias to associated server alias array.
            </param>
            <param name="serverAlias">
            The server-alias of the value.
            </param>
            <param name="value">
            The object value.
            </param>
        </member>
        <member name="T:Xi.Contracts.Data.XiFault">
            <summary>
            This class provides the Detail for the FaultException class used to 
            return fault / exception data back to the Xi Client.
            The static FaultHelpers class provides static methods which may be
            used to create instance of this class returning a FaultException instance.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiFault.E_XIMESSAGEFROMTEXT">
            <summary>
            This Error Code is used when an internal Xi Server fault has occurred.
            This Error Code value is duplicated in XiFaultCodes.cs.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiFault.E_XIMESSAGEFROMEXCEPTION">
            <summary>
            This Error code is used when an exception was caught and the message 
            from that exception is being returned.
            This Error Code value is duplicated in XiFaultCodes.cs.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.XiFault.ErrorCode">
            <summary>
            A server-specific error code value.  For wrapped COM servers, 
            it may contain a COM error code.
            </summary>
        </member>
        <member name="P:Xi.Contracts.Data.XiFault.ErrorText">
            <summary>
            Optional text that describes the error. 
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.XiFault.#ctor(System.String)">
            <summary>
            This constructor creates a general failure XiFault that is described by 
            a specific error string.
            </summary>
            <param name="errorText">
            The error message associated with the error code.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.XiFault.#ctor(System.Exception)">
            <summary>
            This constructor creates a general failure XiFault that is described by 
            an inner exception.
            </summary>
            <param name="exception">
            The exception whose message is to be copied into the details error text.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.XiFault.#ctor(System.UInt32,System.String)">
            <summary>
            This constructor creates an XiFault from a specific error code and  
            error string.
            </summary>
            <param name="errorCode">
            The error code.
            </param>
            <param name="message">
            The error string.
            </param>
        </member>
        <member name="T:Xi.Contracts.Data.XiMethods">
            <summary>
            This enumeration assigns a flag value to each of the Xi 
            methods and then defines standard sets of methods required  
            for all data, event, data journal, and event journal servers.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IServerDiscovery_DiscoverServers">
            <summary>
            The server supports the IServerDiscovery.DiscoverServers() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IServerDiscovery_DiscoverServerInfo">
            <summary>
            The server supports the IServerDiscovery.DiscoverServerInfo() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_Initiate">
            <summary>
            The server supports the IResourceManagement.Initiate() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_ReInitiate">
            <summary>
            The server supports the IResourceManagement.ReInitiate() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_Conclude">
            <summary>
            The server supports the IResourceManagement.Conclude() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_ClientKeepAlive">
            <summary>
            The server supports the IResourceManagement.ClientKeepAlive() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_Identify">
            <summary>
            The server supports the IResourceManagement.Identify() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_Status">
            <summary>
            The server supports the IResourceManagement.Status() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_LookupResultCodes">
            <summary>
            The server supports the IResourceManagement.LookupResultCodes() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_FindObjects">
            <summary>
            The server supports the IResourceManagement.FindObjects() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_FindTypes">
            <summary>
            The server supports the IResourceManagement.FindTypes() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_FindRootPaths">
            <summary>
            The server supports the IResourceManagement.FindRootPaths() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_GetStandardMib">
            <summary>
            The server supports the IResourceManagement.GetStandardMib() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_GetVendorMib">
            <summary>
            The server supports the IResourceManagement.GetVendorMib() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_OpenEndpoint">
            <summary>
            The server supports the IResourceManagement.OpenEndpoint() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_AddListToEndpoint">
            <summary>
            The server supports the IResourceManagement.AddListToEndpoint() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_RemoveListsFromEndpoint">
            <summary>
            The server supports the IResourceManagement.RemoveListsFromEndpoint() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_CloseEndpoint">
            <summary>
            The server supports the IResourceManagement.CloseEndpoint() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_DefineList">
            <summary>
            The server supports the IResourceManagement.DefineList() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_GetListAttributes">
            <summary>
            The server supports the IResourceManagement.GetListAttributes() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_RenewAliases">
            <summary>
            The server supports the IResourceManagement.RenewAliases() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_DeleteLists">
            <summary>
            The server supports the IResourceManagement.DeleteLists() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_AddDataObjectsToList">
            <summary>
            The server supports the IResourceManagement.AddDataObjectsToList() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_RemoveDataObjectsFromList">
            <summary>
            The server supports the IResourceManagement.RemoveDataObjectsFromList() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_ModifyListAttributes">
            <summary>
            The server supports the IResourceManagement.ModifyListAttributes() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_EnableListUpdating">
            <summary>
            The server supports the IResourceManagement.EnableListUpdating() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_EnableListElementUpdating">
            <summary>
            The server supports the IResourceManagement.EnableListElementUpdating() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_AddEventMessageFields">
            <summary>
            The server supports the IResourceManagement.AddEventMessageFields() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_TouchDataObjects">
            <summary>
            The server supports the IResourceManagement.TouchDataObjects() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_TouchList">
            <summary>
            The server supports the IResourceManagement.TouchList() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_GetAlarmSummary">
            <summary>
            The server supports the IResourceManagement.GetAlarmSummary() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_EnableAlarms">
            <summary>
            The server supports the IResourceManagement.EnableAlarms() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IResourceManagement_GetAlarmsEnabledState">
            <summary>
            The server supports the IResourceManagement.GetAlarmsEnabledState() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadData">
            <summary>
            The server supports the IRead.ReadData() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalDataForTimeInterval">
            <summary>
            The server supports the IRead.ReadJournalDataForTimeInterval() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalDataNext">
            <summary>
            The server supports the IRead.ReadJournalDataNext() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalDataAtSpecificTimes">
            <summary>
            The server supports the IRead.ReadJournalDataAtSpecificTimes() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalDataChanges">
            <summary>
            The server supports the IRead.ReadJournalDataChanges() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalDataChangesNext">
            <summary>
            The server supports the IRead.ReadJournalDataChangesNext() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadCalculatedJournalData">
            <summary>
            The server supports the IRead.ReadCalculatedJournalData() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalDataProperties">
            <summary>
            The server supports the IRead.ReadJournalDataProperties() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadEvents">
            <summary>
            The server supports the IRead.ReadEvents() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalEvents">
            <summary>
            The server supports the IRead.ReadJournalEvents() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRead_ReadJournalEventsNext">
            <summary>
            The server supports the IRead.ReadJournalEventsNext() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IWrite_WriteValues">
            <summary>
            The server supports the IWrite.WriteValues() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IWrite_WriteVST">
            <summary>
            The server supports the IWrite.WriteVST() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IWrite_WriteJournalData">
            <summary>
            The server supports the IWrite.WriteJournalData() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IWrite_WriteJournalEvents">
            <summary>
            The server supports the IWrite.WriteJournalEvents() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IWrite_AcknowledgeAlarms">
            <summary>
            The server supports the IWrite.AcknowledgeAlarms() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IWrite_Passthrough">
            <summary>
            The server supports the IWrite.Passthrough() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.ICallback_Abort">
            <summary>
            The server supports the ICallback.Abort() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.ICallback_InformationReport">
            <summary>
            The server supports the ICallback.InformationReport() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.ICallback_EventNotification">
            <summary>
            The server supports the ICallback.EventNotification() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.ICallback_PassthroughCallback">
            <summary>
            The server supports the ICallback.PassthroughCallback() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRegisterForCallback_SetCallback">
            <summary>
            The server supports the IRegisterForCallback.SetCallback() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IPoll_PollDataChanges">
            <summary>
            The server supports the IPoll.PollDataChanges() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IPoll_PollEventChanges">
            <summary>
            The server supports the IPoll.PollEventChanges() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IPoll_PollPassthroughResponses">
            <summary>
            The server supports the IPoll.PollPassthroughResponses() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.IRestRead_ReadData">
            <summary>
            The server supports the IRestRead.RestReadData() method.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.ServerCommonMethods">
            <summary>
            The methods required of all servers except for server discovery servers.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.BasicDataServerMethodProfile">
            <summary>
            The methods required of all data servers.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.PolledDataServerMethodProfile">
            <summary>
            The methods required of all data servers that support polling.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.CallbackDataServerMethodProfile">
            <summary>
            The methods required of all data servers that support callbacks.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.FullDataServerMethodProfile">
            <summary>
            The methods required of all data servers that support polling and callbacks.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.BasicEventServerMethodProfile">
            <summary>
            The methods required of all event servers.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.PolledEventServerMethodProfile">
            <summary>
            The methods required of all event servers that support polling.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.CallbackEventServerMethodProfile">
            <summary>
            The methods required of all event servers that support callbacks.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.FullEventServerMethodProfile">
            <summary>
            The methods required of all event servers that support polling and callbacks.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.DataJournalMethodProfile">
            <summary>
            The methods required of all data journals.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Data.XiMethods.EventJournalMethodProfile">
            <summary>
            The methods required of all event journals.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.XiStatusCode">
            <summary>
            <para>The Xi status code is a structured 32-bit unsigned integer.  This class 
            defines the structure and provides properties used to extract and set 
            bit-fields of the 32-bit status code.  </para>
            <para>The structure of the status code is defined as follows, where bit 32 
            is the Most Significant Bit (MSB):</para>
            <para>Bits    Property</para>
            <para>32-25   StatusByte</para>
            <para>24-17   FlagsByte</para>
            <para>16-1    AdditionalDetail</para>
            <para>The StatusByte contains the success/error code associated with the value. </para>
            <para>The FlagsByte contains codes that further describe the status of historical values,
            and that identify the format of the AdditionalDetail bits. </para>
            <para>The AdditionalDetail is a 16-bit value that allows the server to provide 
            additional detail about the value. These bits can contain a vendor-specific 
            code or an HRESULT as indicated by the FlagsByte.  The values for the 
            AdditionalDetail are defined by Xi.Contracts.Constants.AdditionalDetailType.</para>
            <para>16-1    AdditionalDetail</para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.MakeStatusCode(System.Byte,System.Byte,System.UInt16)">
            <summary>
            This method creates a status code from the status byte, flags byte, and additional detail.
            </summary>
            <param name="statusByte">
            The StatusByte to be incorporated into the Status Code.
            </param>
            <param name="flagsByte">
            The FlagsByte to be incorporated into the Status Code.
            </param>
            <param name="additionalDetail">
            The AdditionalDetail to be incorporated into the Status Code.
            </param>
            <returns>
            The newly constructed Status Code.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.MakeStatusByte(System.Byte,System.Byte)">
            <summary>
            This method creates a status byte from status bits and limit bits.
            </summary>
            <param name="statusBits">
            The StatusBits to be incorporated into the Status Byte.
            </param>
            <param name="limitBits">
            The LimitBits to be incorporated into the Status Byte.
            </param>
            <returns>
            The newly constructed Status Byte.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.StatusByte(System.UInt32)">
            <summary>
            <para>StatusByte is an 8-bit property that specifies the status of the 
            data value. It is formatted as follows:</para>
            <para>  SSBBBBLL, where</para>
            <para>      SSBBBB   = StatusBits (most significant bits)</para>
            <para>          LL   = LimitBits</para>
            </summary>
            <param name="statusCode">
            The 32-bit status code from which the status byte is to be extracted. 
            </param>
            <returns>
            The 8-bit status byte.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.StatusBits(System.UInt32)">
            <summary>
            StatusBits contains a 2-bit value that indicates whether the value is good, 
            bad, or uncertain, that is followed by a 4-bit value that provides a description 
            of the status.
            </summary>
            <param name="statusCode">The 32-bit status code from which the status bits are 
            to be extracted. 
            </param>
            <returns>
            The byte value of this 2-bit property.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.LimitBits(System.UInt32)">
            <summary>
            LimitBits is a 2-bit property that describes if and how the associated value 
            is limited.  It value is independent of the value of the StatusBits.
            </summary>
            <param name="statusCode">The 32-bit status code from which the limit bits are 
            to be extracted. 
            </param>
            <returns>
            The byte value of this 2-bit property.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.MakeFlagsByte(System.Byte,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            <para>This method creates the FlagsByte from its components. It is 
            formatted as follows:</para>
            <para>  VVVNCAAA, where</para>
            <para>      VVV  = Historical Value Type (most significant bits)</para>
            <para>      N    = Historical No Bounding</para>
            <para>      C    = Historical Conversion Error</para>
            <para>      AAA  = Additional Detail Desc</para>
            </summary>
            <param name="historicalValueType">
            The 3-bit property that defines how the HistoricalValue property is used. 
            The XiStatusCodeHistoricalValueType enum defines the values for this property.
            </param>
            <param name="historicalNoBounding">
            The boolean that indicates whether or not a bounding value was included 
            in the historical value associated with this StatusCode. 
            </param>
            <param name="historicalConversionError">
            The boolean that indicates whether or not a a scaling / conversionm error 
            occurred for the historical value associated with this StatusCode. 
            </param>
            <param name="additionalDetailDesc">
            The 3-bit description of the AdditionalDetail property. 
            The XiStatusCodeAdditionalDetailType enum defines the values for this property.
            </param>
            <returns>
            The FlagsByte.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.FlagsByte(System.UInt32)">
            <summary>
            <para>FlagsByte is an 8-bit property composed of bitfields that define how 
            the AdditionalDetail property is to be interpreted and that provide historical 
            status information for historical data values.  It is formatted as follows:</para>
            <para>  VVVNCAAA, where</para>
            <para>      VVV  = Historical Value Type (most significant bits)</para>
            <para>      N    = Historical No Bounding</para>
            <para>      C    = Historical Conversion Error</para>
            <para>      AAA  = Additional Detail Desc</para>
            </summary>
            <param name="statusCode">
            The 32-bit status code from which the flags byte is to be extracted. 
            </param>
            <returns>
            The 8-bit flags byte.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.HistoricalValueType(System.UInt32)">
            <summary>
            <para>The HistoricalValueType is a 3-bit property that describes the 
            the historical data value associated with this status code.  The
            StatusCodeHistoricalValueType enumeration defines the values for 
            this property.  </para>
            </summary>
            <param name="statusCode">
            The 32-bit status code from which HistoricalValueTypeBits is to be extracted. 
            </param>
            <returns>
            The HistoricalValueTypeBits value.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.NoBoundingDataFlag(System.UInt32)">
            <summary>
            NoBoundingDataFlag is an 1-bit property that indicates whether or not 
            bounding data was included in the historical data value associated with this 
            status code.
            </summary>
            <param name="statusCode">
            The 32-bit status code from which NoBoundingDataFlag is to be extracted. 
            </param>
            <returns>
            The NoBoundingDataFlag boolean value.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.ConversionErrorFlag(System.UInt32)">
            <summary>
            ConversionErrorFlag is an 1-bit property that indicates whether or not 
            the historical data value associated with this status code had a 
            conversion/scaling error.
            </summary>
            <param name="statusCode">
            The 32-bit status code from which ConversionErrorFlag is to be extracted. 
            </param>
            <returns>
            The ConversionErrorFlag boolean value.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Data.XiStatusCode.AdditionalDetailType(System.UInt32)">
            <summary>
            <para>AdditionalDetailType is an 3-bit property that indicates how the 
            AdditionalDetail property is used.  The StatusCodeAdditionalDetailType 
            enumeration defines the values for this property.</para>
            </summary>
            <param name="statusCode">
            The 32-bit status code from which AdditionalDetailType is to be extracted. 
            </param>
            <returns>
            The AdditionalDetailType value.
            </returns>
        </member>
        <member name="T:Xi.Contracts.ICallback">
            <summary>
            This interface is composed of methods to be implemented by the 
            client and called by the server to send data, alarms, and 
            events to the client.
            </summary>
        </member>
        <member name="M:Xi.Contracts.ICallback.Abort(System.String,Xi.Contracts.Data.ServerStatus,System.String)">
            <summary>
            <para>This callback method is implemented by the client to 
            be notified when the server server state changes to Aborting,
            or if the server wraps other servers, when the wrapped server 
            state changes to Aborting. The Aborting state is entered when the 
            server begins shutting down.
            Clients that use the poll interface instead of this callback 
            interface are notified of aborting servers by calling the Status() 
            method, by receiving exceptions that are thrown when attempting to 
            access a server that is shutting down, or by the XiStatusCode that 
            indicates a wrapped server is not communicating.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="serverStatus">
            The ServerStatus object that describes the server that is shutting down.
            </param>
            <param name="reason">
            The reason the context is being closed.
            </param>
        </member>
        <member name="M:Xi.Contracts.ICallback.InformationReport(System.String,System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            <para>This callback method is implemented by the client 
            to receive data changes. </para> 
            <para> Servers send data changes to the client that have 
            not been reported to the client via this method.  
            Changes consists of:</para>
            <para>1) values for data objects that were added to the list,</para> 
            <para>2) values for data objects whose current values 
            have changed since the last time they were reported to the 
            client via this interface.  If a deadband filter has been 
            defined for the list, floating point values are not considered 
            to have changed unless they have changed by the deadband amount.</para>
            <para>3) historical values that meet the list filter criteria, 
            including the deadband.</para> 
            <para>In addition, the server may insert a special value that 
            indicates the server or one of its wrapped servers are shutting down.  </para>
            <para>This value is inserted as the first value in the list of values 
            in the callback. Its ListId and ClientId are both 0 and its data type is 
            ServerStatus. </para>
            <para>Finally, if the server does not have any values to send within the time period 
            established with the IRegisterForCallback.SetCallback() method, then the server should 
            call the ElementValuesCallback() method with a null updatedValues parameter, and the client 
            should interpret this call as a keep-alive for the ICallback endpoint connection. </para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The client identifier of the list for which data changes are being 
            reported.
            </param>
            <param name="updatedValues">
            The values being reported.
            </param>
        </member>
        <member name="M:Xi.Contracts.ICallback.EventNotification(System.String,System.UInt32,Xi.Contracts.Data.EventMessage[])">
            <summary>
            <para>This callback method is implemented by the client to 
            receive alarms and events.</para> 
            <para> Servers send event messages to the client via this 
            interface.  Event messages are sent when there has been a 
            change to the specified event list. A new alarm or event 
            that has been added to the list, a change to an alarm already 
            in the list, or the deletion of an alarm from the list 
            constitutes a change to the list.</para>
            <para>Once an event has been reported from the list, it 
            is automatically deleted from the list.  Alarms are only 
            deleted from the list when they transition to inactive and 
            acknowledged.  </para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The client identifier of the list for which alarms/events are being 
            reported.
            </param>
            <param name="eventList">
            The list of alarms/events are being reported, transferred as an array.
            </param>
        </member>
        <member name="M:Xi.Contracts.ICallback.PassthroughCallback(System.String,System.Int32,Xi.Contracts.Data.PassthroughResult)">
            <summary>
            This method returns the results of invoking an asynchronous passthrough.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="invokeId">
            The identifier for this invocation of the passthrough defined by the client 
            in the request.  
            </param>
            <param name="passthroughResult">
            The result of executing the passthrough, consisting of the result code, the invokeId 
            supplied in the request, and a byte array.  It is up to the client application to 
            interpret this byte array.  
            </param>
        </member>
        <member name="T:Xi.Contracts.IRegisterForCallback">
            <summary>
            This interface is used to register for callbacks so that list updates are passed
            back asynchronously.
            </summary>
        </member>
        <member name="M:Xi.Contracts.IRegisterForCallback.SetCallback(System.String,System.UInt32,System.TimeSpan)">
            <summary>
            This method is invoked to allow the client to set or change the 
            keepAliveSkipCount and callbackRate. The first time this method is 
            invoked the server obtains the callback interface from the client.  
            Therefore, this method must be called at least once for each 
            callback endpoint to enable the server to make the callbacks.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="keepAliveSkipCount">
            The client-requested keepAliveSkipCount for lists that the server may negotiate 
            up or down. The keepAliveSkipCount indicates the number of consecutive 
            UpdateRate cycles for a list that occur with nothing to send before an empty 
            callback is sent to indicate a keep-alive message. For example, if the value 
            of this parameter is 1, then a keep-alive callback will be sent each UpdateRate 
            cycle for each list assigned to the callback for which there is nothing to send. 
            A value of 0 indicates that keep-alives are not to be sent for any list assigned 
            to the callback.
            </param>
            <param name="callbackRate">
            <para>The callback rate indicates the maximum time between callbacks that are sent 
            to the client. The server may negotiate this value up or down, but a null value or 
            a value representing 0 time is not valid.  </para>
            <para>If there are no callbacks to be sent containing data or events for this period 
            of time, an empty callback will be sent as a keep-alive.  The timer for this 
            time-interval starts when the SetCallback() response is returned by the server.  </para>
            </param>
            <returns>
            The results of the operation, including the negotiated keep-alive skip count and callback rate.
            </returns>
        </member>
        <member name="T:Xi.Contracts.IPoll">
            <summary>
            <para>This interface is composed of methods called by the client to 
            poll the server for data, alarms, events, and asynchronous passthrough 
            responses.</para>
            <para>The server returns poll responses from a queue or similar mechanism 
            that stores data, alarms, events, and asynchronous passthrough 
            responses that are returned via callbacks when the callback interface is 
            used by the client.  To protect against indeterminate queue sizes, the 
            server is permitted to define the maximum number of entries that can be 
            stored in the queue. This number should be large enough to hold entries 
            for two update rates for the lists assigned to the Poll endpoint.  </para>
            <para>When the queue becomes full, the server is permitted to discard 
            the oldest entry in the queue when a new entry is to be added.  </para>
            <para>When entries are discarded, a new entry is added to the head of the 
            queue that indicates how many entries have been discarded, including the 
            entry that was discarded to make room for this status entry. See each 
            Poll method below for the definition of this status entry.</para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.IPoll.PollDataChanges(System.String,System.UInt32)">
            <summary>
            <para>This method is used to poll the endpoint for changes 
            to a specific data list.  It is also used as a keep-alive for the 
            poll endpoint by setting the listId parameter to 0. In this case,
            null is returned immediately.</para>    
            <para>Changes consists of:</para>
            <para>1) values for data objects that were added to the list,</para> 
            <para>2) values for data objects whose current values 
            have changed since the last time they were reported to the 
            client via this interface.  If a deadband filter has been 
            defined for the list, floating point values are not considered 
            to have changed unless they have changed by the deadband amount.</para>
            <para>3) historical values that meet the list filter criteria, 
            including the deadband.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier for the list whose changes are to be returned (reported).
            Null if this is a keep-alive.
            </param>
            <returns>
            <para>The list of changed values or null if this is a keep-alive.  The 
            following two standard data objects can also be returned. </para>  
            <para>The first is identified by a ListId of 0 and a ClientAlias of 0.  It 
            contains a ServerStatus object value that indicates to the client that 
            the server or one of its wrapped servers is shutting down.  When present, 
            this will always be the first value in the returned OBJECT value array.</para>
            <para>The second is identified by its ListId and a ClientAlias of 0.  It contains 
            a UInt32 value that indicates to the client how many data changes have been 
            discarded for the specified list since the last poll response.  If this 
            condition persists, the client should increase its poll frequency. 
            When present, this will always be the first value in the returned 
            UINT value array.</para>
            </returns>
        </member>
        <member name="M:Xi.Contracts.IPoll.PollEventChanges(System.String,System.UInt32,Xi.Contracts.Data.FilterSet)">
             <summary>
             <para>This method is used to poll the endpoint for changes to 
             a specific event list.  Event messages are sent when there 
             has been a change to the specified event list. A new alarm 
             or event that has been added to the list, a change to an 
             alarm already in the list, or the deletion of an alarm from 
             the list constitutes a change to the list.</para>para>
             <para>Once an event has been reported from the list, it 
             is automatically deleted from the list.  Alarms are only 
             deleted from the list when they transition to inactive and 
             acknowledged.  </para>
             </summary>
             <param name="contextId">
             The context identifier.
             </param>
             <param name="listId">
             The server identifier for the list whose changes are to be returned 
             (reported).
             </param>
             <param name="filterSet">
             Optional set of filters to further refine the selection from 
             the alarms and events in the list. The event list itself is 
             created using a filter.
             </param>
             <returns>
             <para>A list consisting of alarm/event messages for new alarms/events 
             in the Event List, and alarm/event messages that represent state changes 
             to alarms that are already in the list, including alarm/event messages 
             that identify state changes that caused alarms to tbe deleted from the list.</para> 
             <para>Null is returned as a keep-alive message when there have been no new 
             alarm/event messages since the last poll.</para>
             <para>In addition, a special event message is included as the first entry 
             in the list to indicate to the client that one or more event message have 
             been discarded due to queue size limitations.  All fields of this message 
             are set to null with the exception of the following:
            <para>	OccurrenceTime = current time of the response</para>
            <para>	EventType = EventType.DiscardedMessage</para>
            <para>	TextMessage = the number of event/alarm messages discarded since 
            last poll response was returned.</para>
             </para>
             </returns>
        </member>
        <member name="M:Xi.Contracts.IPoll.PollPassthroughResponses(System.String)">
            <summary>
            This method returns the results of invoking one or more asynchronous passthrough 
            requests.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <returns>
            The results of executing the passthroughs. Each result in the list consists of the 
            result code, the invokeId supplied in the request, and a byte array.  It is up to the 
            client application to interpret this byte array.  
            </returns>
        </member>
        <member name="T:Xi.Contracts.IRead">
            <summary>
            This interface is composed of methods used to retrieve 
            data, alarms, and events and their histories from the 
            server.
            </summary>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadData(System.String,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the values of one or more 
            data objects in a list.  It is also used as a keep-alive for the 
            read endpoint by setting the listId parameter to 0. In this case,
            null is returned immediately.  </para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The  server identifier of the list that contains data objects to be read.
            Null if this is a keep-alive.
            </param>
            <param name="serverAliases">
            The server aliases of the data objects to read. When this value is null all elements 
            of the list are to be read.
            </param>
            <returns>
            <para>The list of requested values. Each value in this list is identified 
            by its client alias.  If the server alias for a data object to read 
            was not found, an ErrorInfo object will be returned that contains 
            the server alias instead of a value, status, and timestamp.  </para>
            <para>Returns null if this is a keep-alive.</para>
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalDataForTimeInterval(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the historical values that fall between 
            a start and end time for one or more data objects within a specific data 
            journal list.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The server identifier of the list that contains data objects whose 
            historical values are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the first or beginning (of returned list) 
            timestamp for values to be returned.  Valid operands include the 
            Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.  The FilterOperand Operator is used to 
            determine if the returned data should include data values 
            the occur exactly at the first or second time stamp.  If the equals 
            operator is specified then values that occur at the first and second 
            time stamp will be included in the sample set.  Any other operator 
            will not include first or second time stamped values.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the second or ending (of returned list)
            timestamp for values to be returned.  Valid operands include the 
            Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.  The FilterOperand Operator is not used.
            </param>
            <param name="numValuesPerAlias">
            The maximum number of JournalDataReturnValues to be returned per alias.
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read. When this value is null all elements of the list are to be read.
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalDataNext(System.String,System.UInt32,System.UInt32)">
            <summary>
            <para>This method is used to return an in-sequence subset of the 
            historical values selected by the last IRead_ReadJournalDataForTimeInterval() 
            call issued by the client on this client context.  This method is used 
            when the number of values to be returned for one or more aliases 
            exceeds the number specified by the numValuesPerAlias parameter of the 
            IRead_ReadJournalDataForTimeInterval() method.  </para>
            <para>The client may have to reissue this call multiple times to 
            receive all historical values for all aliases.  The client may specify 
            a new numValuesPerAlias with each call to this method to better optimize 
            its performance.  </para>
            <para>The server is responsible for maintaining the list of requested 
            aliases for which values remain, and the timestamp of the last value 
            sent to the client for each alias. </para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The server identifier of the list that contains data objects whose 
            historical values are to be returned.
            </param>
            <param name="numValuesPerAlias">
            The maximum number of data sample values to be returned per alias.
            </param>
            <returns>
            The next set of remaining values for each alias.  If the number of values 
            returned for any one alias is less than numValuesPerAlias, then there are 
            no additional values to return to the client for that alias. If, however, 
            the number returned for any alias is equal to numValuesPerAlias, then the 
            client should issue a ReadJournalDataNext() to retrieve any remaining values.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalDataAtSpecificTimes(System.String,System.UInt32,System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the historical values at specific times for 
            one or more data objects within a specific data journal list.  If no entry exists 
            at the specified time in the data journal for an object, the server creates an 
            interpolated value for that time and includes it in the response as though it 
            actually existed in the journal.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The server identifier of the list that contains data objects whose historical 
            values are to be read.
            </param>
            <param name="timestamps">
            Identifies the timestamps of historical values to be returned for each 
            of the requested data objects. 
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read. When this value is null all elements of the list are to be read.
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalDataChanges(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read changed historical values for one 
            or more data objects within a specific data journal list.  Changed historical 
            values are those that were entered into the journal and then changed (corrected) 
            by an operator or other user.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The server identifier of the list that contains data objects whose historical 
            values are to be read.
            </param>
            <param name="firstTimestamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimestamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read. When this value is null all elements of the 
            list are to be read.
            </param>
            <param name="numValuesPerAlias">
            The maximum number of JournalDataChangedValues to be returned per alias.  
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.  If, however, the number returned for any alias is equal to 
            numValuesPerAlias, then the client should issue a ReadJournalDataChangesNext() 
            to retrieve any remaining values.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalDataChangesNext(System.String,System.UInt32,System.UInt32)">
            <summary>
            <para>This method is used to return an in-sequence subset of the 
            historical values selected by the last IRead_ReadJournalDataChanges() 
            call issued by the client on this client context.  This method is used 
            when the number of values to be returned for one or more aliases 
            exceeds the number specified by the numValuesPerAlias parameter of the 
            IRead_ReadJournalDataChanges() method.  </para>
            <para>The client may have to reissue this call multiple times to 
            receive all historical values for all aliases.  The client may specify 
            a new numValuesPerAlias with each call to this method to better optimize 
            its performance.  </para>
            <para>The server is responsible for maintaining the list of requested 
            aliases for which values remain, and the timestamp of the last value 
            sent to the client for each alias. </para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The server identifier of the list that contains data objects whose 
            historical values are to be returned.
            </param>
            <param name="numValuesPerAlias">
            The maximum number of JournalDataChangedValues to be returned per alias.
            </param>
            <returns>
            The next set of remaining values for each alias.  If the number of values 
            returned for any one alias is less than numValuesPerAlias, then there are 
            no additional values to return to the client for that alias. If, however, 
            the number returned for any alias is equal to numValuesPerAlias, then the 
            client should issue a ReadJournalDataChangesNext() to retrieve any remaining 
            values.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadCalculatedJournalData(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Xi.Contracts.Data.AliasAndCalculation})">
            <summary>
            <para>This method is used to read calculated historical values (e.g. averages or 
            interpolations) for one or more data objects within a specific data journal list.  
            The time-range used to select the historical values is specified by the client. 
            Additionally, the client specifies a calculation period that divides that time 
            range into periods. The server calculates a return value for each of these periods.</para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The server identifier of the list that contains data objects whose historical 
            values are to be read.
            </param>
            <param name="firstTimestamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimestamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="calculationPeriod">
            The time span used to divide the specified time range into individual periods for 
            which return values are calculated.  The specified calculation is performed on the 
            set of historical values of a data object that fall within each period. 
            </param>
            <param name="serverAliasesAndCalculations">
            The list of server aliases for the data objects whose historical 
            values are to be calculated, and the calculation to perform for each.  
            </param>
            <returns>
            The set of calculated values. There is one value for each calculation period within 
            the specified time range for each specific data object.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalDataProperties(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
            This method reads the properties associated with a historized data object.
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The server identifier of the list that contains data objects whose property 
            values are to be read.
            </param>
            <param name="firstTimestamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimestamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="serverAlias">
            The server alias of the data object whose property values are to be read.  
            </param>
            <param name="propertiesToRead">
            The TypeIds of the properties to read. Each property is identified by 
            its property type.
            </param>
            <returns>
            The array of requested property values.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadEvents(System.String,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to read an event list or a subset of it 
            using a filter.
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The server identifier of the list that contains alarms and events 
            to be read.
            </param>
            <param name="filterSet">
            The set of filters used to select alarms and events 
            to be read.
            </param>
            <returns>
            The list of selected alarms and events.
            Null if no alarms or events were selected.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalEvents(System.String,System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            <para>This method is used to read a list of historical alarms or 
            events.  This method only accesses historical events rather 
            than also accessing historical data as does the MMS ReadJournal 
            service.  This is because the return value is strongly typed 
            to historical alarms and event messages and not to historical  
            data.</para>
            <para>To simplify implementation, clients must first define a   
            historical alarm/event list that the server will prepare to access. </para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The server identifier of the list that contains historical alarms and 
            events that are to be read.
            </param>
            <param name="firstTimestamp">
            The filter that specifies the first or beginning (of returned list) 
            timestamp for event messages to be returned.  Valid operands include 
            the Timestamp (UTC) constant defined by the FilterOperand class.
            </param>
            <param name="secondTimestamp">
            The filter that specifies the second or ending (of returned list)
            timestamp for event messages to be returned.  Valid operands include 
            the Timestamp (UTC) constant defined by the FilterOperand class.
            </param>
            <param name="numEventMessages">
            The maximum number of EventMessages to be returned.
            </param>
            <param name="filterSet">
            The set of filters used to select historical alarms and events 
            to be read.
            </param>
            <returns>
            The list of selected historical alarms and events.
            Or null if no alarms or events were selected.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IRead.ReadJournalEventsNext(System.String,System.UInt32,System.UInt32)">
            <summary>
            <para>This method is used to return an in-sequence subset of the 
            historical events selected by the last ReadJournalEvents() 
            call issued by the client on this client context.  This method is used 
            when the number of EventMessages to be returned exceeds the number specified 
            by the numEventMessages parameter of the ReadJournalEvents() method.  </para>
            <para>The client may have to reissue this call multiple times to 
            receive all historical EventMessages selected by the initial call to 
            ReadJournalEvents().  The client may specify a new numEventMessages with each 
            call to this method to better optimize its performance.  </para>
            </summary>
            <param name="contextId">
            The context id.
            </param>
            <param name="listId">
            The server identifier of the list that contains data objects whose 
            historical events are to be returned.
            </param>
            <param name="numEventMessages">
            The maximum number of EventMessages to be returned.
            </param>
            <returns>
            The selected EventMessages. If, however, the number returned is equal to 
            numEventMessages, then the client should issue a ReadJournalEventsNext() 
            to retrieve any remaining EventMessages.
            </returns>
        </member>
        <member name="T:Xi.Contracts.IResourceManagement">
            <summary>
            <para>This interface is composed of methods used to:</para>
            <para>- initiate a context with the server, </para>
            <para>- read the server's MIB, </para>
            <para>- discover objects, alarms, and events supported by the server, </para>
            <para>- create lists within the server of selected objects, alarms, or 
            events, and</para> 
            <para>- create read and write endpoints and add one or more lists to them. </para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.Initiate(System.String,System.String,System.UInt32@,System.UInt32@,System.UInt32@,System.String@)">
            <summary>
            <para>This method is used to establish a context between 
            the client and the server.  The server must authenticate 
            the client when this method is called.</para> 
            <para>Once created, the context is capable of opening Read, 
            Write, Poll, or Callback endpoints at the request of the 
            client. Only one of each type may be opened for a given 
            context. See the OpenEndpoint() method for more information 
            about endpoints. </para>  
            <para>If the WCF connection to the Resource Management 
            Endpoint is inadvertanatly disconnected, the client can 
            prevent the context from timing-out and automatically 
            closing by calling the ReInitiate() method.</para>
            </summary>
            <param name="applicationName">
            The name of the client application.  
            </param>
            <param name="workstationName">
            The name of the workstation on which the client application 
            is running.  
            </param>
            <param name="localeId">
            The localeId to be used for the context. If the requested context 
            is not supported by the server, the server will return its default 
            context. 
            </param>
            <param name="contextTimeout">
            The context timeout is expressed in milliseconds.  If a client request 
            is not received on the context within this period of time, the server 
            will close the context because of inactivity.  The requested timeout 
            value can be negotiated up or down by the server. The negotiated 
            value is returned to the client.  A request value of zero causes 
            the server to use its default timeout.  If the underlying WCF 
            connection is inadvertantly terminated, the client may reopen the 
            context within this time-out period using the ReInitiate() method.
            </param>
            <param name="contextOptions">
            This parameter enables various debug and tracing options used to 
            aide in diagnosing issues. see ContextOptions enum for the 
            valid values.
            </param>
            <param name="reInitiateKey">
            A server-specific string that is to be supplied by the client in the 
            ReInitiate() method call. This parameter is used to prevent interloping 
            clients from re-initiating a context using only the context id that was 
            obtained through observing message sent to unencrypted Xi endpoints.  
            The reinitiate key value returned to the client by this method is 
            server-specific.   
            </param>
            <returns>
            The server generated context id.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.ReInitiate(System.String,System.UInt32@,System.String@)">
            <summary>
            <para>This method is used to reinitate an existing context 
            after a failure of the underlying WCF connection.  The 
            server must reauthenticate the client when this method is 
            called.</para> 
            </summary>
            <param name="existingContextId">
            The context identifier of the existing context to reinitate. 
            </param>
            <param name="contextOptions">
            This parameter enables various  options for the context that may 
            be used, for example, to aide in diagnosing issues. This value 
            may be different than that used in the previous initiation/reinitiation 
            of the context.  See ContextOptions enum for the valid values.
            </param>
            <param name="reInitiateKey">
            A server-specific string that was returned to the client in the last 
            Initiate() or ReInitiate() method call that was used for the context.
            This parameter is used to prevent interloping clients from re-initiating 
            a context using only the context id that was obtained through observing 
            message sent to unencrypted Xi endpoints.  The reinitiate key value 
            returned to the client by this method is server-specific. 
            </param>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.Conclude(System.String)">
            <summary>
            This method is used to close a context. When the context 
            is closed, all resources/endpoints associated with the  
            context are released.
            </summary>
            <param name="contextId">
            The context identifier of the context to close. 
            </param>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.ClientKeepAlive(System.String)">
            <summary>
            To prevent a client – server context from timing out, it is 
            necessary for the client to invoke a server method on the 
            context within the contextTimeout interval.  The ClientKeepAlive 
            method is a very low overhead method for keeping a context alive 
            when a client has no other actions to perform.  A common situation 
            may be where the client has setup ICallback to monitor data values.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.Identify(System.String)">
            <summary>
            <para>This method is used to get the description of the 
            server.  This method can be called before a context has 
            been established with the server.</para>
            </summary>
            <param name="contextId">
            The optional context identifier. This call can be issued 
            without first having established a client context.  
            However, the ServerDetails element of the ServerDescription 
            is not returned unless this parameter is present.
            </param>
            <returns>
            The description of the server. 
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.Status(System.String)">
            <summary>
            This method is used to get the state of the server, and 
            the state of any wrapped servers.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <returns>
            The status of the Xi server and the status of wrapped servers. 
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.LookupResultCodes(System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method returns text descriptions of error codes.</para>  
            </summary>
            <param name="contextId">
            The context identifier. 
            </param>
            <param name="resultCodes">
            The result codes for which text descriptions are being requested.
            </param>
            <returns>
            The list of result codes and if a result code indicates success, 
            the requested text descriptions. The size and order of this 
            list matches the size and order of the resultCodes parameter.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.FindObjects(System.String,Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            <para>This method is used to find objects in the server.  The 
            client uses the findCriteria parameter to identify a starting 
            branch and a set of filter criteria.  It also specifies the 
            maximum number of objects to return.  </para> 
            <para>The server examines the objects that are children of the 
            specified branch and selects those that match the filter criteria.
            Note that "children" are objects whose root paths can be created 
            by appending their names to the path used to identify the starting  
            branch.</para>  
            <para>The object attributes of the selected objects are 
            returned to the client. The number returned is limited by the 
            number specified in the numberToReturn parameter.  If the number 
            returned is less than than that number, then the client can 
            safely assume that the server has no more to return.</para>  
            <para>However, if the number returned is equal to that number, 
            then the client can retrieve the next set of results by issuing 
            another FindObjects() call with the findCriteria parameter set to 
            null. A null findCriteria indicates to the server to continue 
            returning results from those remaining in the list.  The client 
            eventually detects the end of the list by receiving a response 
            that returns less than specified by the numberToReturn parameter.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="findCriteria">
            The criteria used by the server to find objects.  If this 
            parameter is null, then this call is a continuation of the 
            previous find.
            </param>
            <param name="numberToReturn">
            The maximum number of objects to return in a single response.
            </param>
            <returns>
            <para>The list of object attributes for the objects that met 
            the filter criteria. </para>  
            <para>Returns null if the starting object is a leaf, or no objects 
            were found that meet the filter criteria, or if the call was made 
            with a null findCriteria and there are no more objects to return.</para>
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.FindTypes(System.String,Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            <para>This method is used to find type definitions in the server.  The 
            client uses the findCriteria parameter to identify a starting 
            branch and a set of filter criteria.  It also specifies the 
            maximum number of types to return.  </para> 
            <para>The server examines the types that are children of the 
            specified branch and selects those that match the filter criteria.
            Note that "children" are types whose root paths can be created 
            by appending their names to the path used to identify the starting  
            branch.</para>  
            <para>The type attributes attributes of the selected types are 
            returned to the client. The number returned is limited by the 
            number specified in the numberToReturn parameter.  If the number 
            returned is less than than that number, then the client can 
            safely assume that the server has no more to return.</para>  
            <para>However, if the number returned is equal to that number, 
            then the client can retrieve the next set of results by issuing 
            another FindTypes() call with the findCriteria parameter set to 
            null.</para> 
            <para>A null findCriteria indicates to the server to continue 
            returning results from those remaining in the list.  The client 
            eventually detects the end of the list by receiving a response 
            that returns less than specified by the numberToReturn parameter.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="findCriteria">
            The criteria used by the server to find types.  If this 
            parameter is null, then this call is a continuation of the 
            previous find.
            </param>
            <param name="numberToReturn">
            The maximum number of objects to return in a single response.
            </param>
            <returns>
            <para>The list of type attributes for the type that met 
            the filter criteria. </para>  
            <para>Returns null if the starting type is a leaf, or no types 
            were found that meet the filter criteria, or if the call was made 
            with a null findCriteria and there are no more types to return.</para>
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.FindRootPaths(System.String,Xi.Contracts.Data.ObjectPath)">
            <summary>
            <para>Each discoverable object in the server has at least 
            one path to the root (called the root path).  A root path 
            is represented by an ordered list of object names beginning 
            with "Root" and ending with the name of the object.</para>
            <para>This method identifies an object by one of its root 
            paths and requests the server to return any additional root 
            paths that exist.  If there are no other root paths that can 
            be used to reach the object, then null is returned.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="objectPath">
            The root path that identifies the object for which alternate 
            root paths are being requested. 
            </param>
            <returns>
            The list of additional root paths to the specified object.  
            Null if specified objectPath is the only root path to the 
            object. An exception is thrown if the specified objectPath is 
            invalid.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.GetStandardMib(System.String)">
            <summary>
            <para>This method is used to read the standard MIB.</para>  
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <returns>
            The standard MIB is returned.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.GetVendorMib(System.String,System.Collections.Generic.List{Xi.Contracts.Data.InstanceId})">
            <summary>
            <para>This method is used to read the vendor-specific MIB objects.</para>  
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="vendorMibInstanceIds">
            The list of identifiers for the vendor MIB objects to be returned.
            </param>
            <returns>
            The requested vendor-specific MIB objects.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.OpenEndpoint(System.String,System.String,System.String)">
            <summary>
            <para>This method opens an endpoint that can be used to 
            access one or more lists.  Each newly opened endpoint is 
            assigned its own unique identifier.  It may be that the 
            server supports only one endpoint of each type (e.g. Read). 
            In this case a second attempt to open a Read endpoint will 
            succeed and the EndpointId of the already opened Read 
            endpoint will be returned.  </para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="contractType">
            <para>The type of the endpoint as specified by the interface that it 
            supports.  IResourceManagement and IServerDiscovery cannot be created.</para>
            <para>The values are defined using the typeof(IXXX).Name property, where IXXX is 
            the contract name (e.g. IRead).  This value is also used as the value of the 
            following property: </para>
            <para> System.ServiceModel.Description.ServiceEndpoint.Contract.Name  </para>
            </param>
            <param name="endpointUrl">
            The URL of the endpoint as defined by System.ServiceModel.Description.ServiceEndpoint.Address.Uri.OriginalString.
            </param>
            <returns>
            The definition of the endpoint.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.AddListToEndpoint(System.String,System.String,System.UInt32)">
            <summary>
            This method adds a list to an endpoint.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="endpointId">
            A string value that uniquely identifies the endpoint (may be a GUID) 
            to which the list is to be added.
            </param>
            <param name="serverListId">
            The identifier of the list to add to the endpoint.
            </param>
            <returns>
            The list identifier and result code for the list whose 
            add failed. Returns null if the add succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.RemoveListsFromEndpoint(System.String,System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method removes one or more lists from an endpoint.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="endpointId">
            A string value that uniquely identifies the endpoint (may be a GUID) 
            from which the list is to be removed.
            </param>
            <param name="listIds">
            The identifiers of the lists to remove from the endpoint.
            </param>
            <returns>
            The list identifiers and result codes for the lists whose 
            removal failed. Returns null if all removals succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.CloseEndpoint(System.String,System.String)">
            <summary>
            This method closes an endpoint.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="endpointId">
            A string value the uniquely identified the endpoint (may be a GUID) to be deleted.
            </param>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.DefineList(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            <para>This method is used to create a list of data 
            objects or alarms/events within the context.  </para>
            <para>Lists are created in the disabled state, and must be 
            enabled to cause them to update data values or events.
            Creating them in the disabled state was done to improve 
            performance.  It allows the server to wait until data 
            list objects have been added before it begins its
            updating operation.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="clientId">
            The Client LocalId for this list.  Used in callbacks to allow the 
            client to identify this list.
            </param>
            <param name="listType">
            Indicates the type of list to be created.
            Standard list types as defined by the Xi.Contacts.Constants.StandardListType 
            enumeration are: 
            1) Data List, 
            2) History Data List, 
            3) Event List 
            4) History Event List
            </param>
            <param name="updateRate">
            The requested update rate in milliseconds for the list. The  
            update rate indicates how often the server updates the 
            values of elements in the list.  A value of 0 indicates 
            that updating is exception-based. The server may negotiate 
            this value, up or down as necessary to support its efficient 
            operation.
            </param>
            <param name="bufferingRate">
            <para>An optional-use parameter that indicates that the server is 
            to buffer data updates, rather than overwriting them, until either 
            the time span defined by the buffering rate expires or the values 
            are transmitted to the client in a callback or poll response. If 
            the time span expires, then the oldest value for a data object is 
            discarded when a new value is received from the underlying system.</para>
            <para>The value of the bufferingRate is set to 0 to indicate 
            that it is not to be used and that new values overwrite (replace) existing 
            cached values.  </para>
            <para>When used, this parameter contains the client-requested buffering 
            rate, which the server may negotiate up or down, or to 0 if the 
            server does not support the buffering rate. </para>
            <para>The FeaturesSupported member of the StandardMib is used to indicate 
            server support for the buffering rate.</para>
            </param>
            <param name="filterSet">
            The set of filters to be used to select the elements of the list.  
            </param>
            <returns>
            The attributes created for the list.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.GetListAttributes(System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method gets the attributes of a list.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listIds">
            The identifiers for the lists whose attributes are to be 
            retrieved. If this parameter is null, then the attributes for 
            all lists in the context are to be returned.
            </param>
            <returns>
            The list of requested List Attributes. The size and order 
            of this list matches the size and order of the listAliases 
            parameter.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.RenewAliases(System.String,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.AliasUpdate})">
            <summary>
            This method is used to renew the aliases for a list.  Successful completion 
            of this method invalidates the previous server alias, but not the previous 
            client alias. However, the server begins using the new client alias at its 
            earliest opportunity and ceases using the previous client alias. This behavior 
            accommodates the race condition that may occur when this method is being processed 
            by the server concurrently with the publishing of data to the client.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The server identifier for the list whose aliases are to be 
            updated.
            </param>
            <param name="newAliases">
            The list of aliases to be updated. Each AliasUpdate in the list 
            contains the existing server alias and new client alias for it.
            </param>
            <returns>
            The list of updated aliases. The size and order of this list matches 
            the size and order of the listAliases parameter.  Each AliasResult 
            in the list contains the new client alias from the request and its 
            corresponding new server alias assigned by the server.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.DeleteLists(System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method deletes one or more lists for the specified context.  </para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listIds">
            The identifiers for the lists to be deleted.  If this parameter is null,
            then all lists in the context are to be deleted.
            </param>
            <returns>
            The list identifiers and result codes for the lists whose 
            deletion failed. Returns null if all deletes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.AddDataObjectsToList(System.String,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.ListInstanceId})">
            <summary>
            <para>This method is used to add objects to a list.  Objects 
            are added with updating of their values by the server 
            disabled. Updating of values by the server can be enabled 
            using the EnableListUpdating() method.</para>
            <para>For performance reasons, data objects should not be 
            added one at a time by clients. Clients should, instead,
            create a list of data objects and submit them all together 
            to be added to the data list.  </para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The server identifier for the list to which data objects are to be 
            added.
            </param>
            <param name="dataObjectsToAdd">
            The data objects to add.
            </param>
            <returns>
            The list of results. The size and order of this list matches 
            the size and order of the objectsToAdd parameter.   
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.RemoveDataObjectsFromList(System.String,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to remove members from a list.  
            It does not, however, delete the corresponding data object 
            from the server.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The server identifier for the list from which data objects are 
            to be removed.
            </param>
            <param name="serverAliasesToDelete">
            <para>The server aliases of the data objects to remove. When this value 
            is null all elements of the list are to be removed.</para> 
            <para>If the value of a serverAlias in this list is zero, then its 
            zero-based index into the serverAliases list is used as the ClientAlias 
            in a returned AliasResult. </para>
            </param>
            <returns>
            <para>Returns null if all removals succeeded. If not, returns the 
            client and server aliases and result codes for the data objects that could 
            not be removed. Data objects that were successfully removed are not included 
            in this list. See XiFaultCodes claass for standardized result codes.</para> 
            <para>If the value of a serverAlias in the serverAliases list is zero, 
            then its zero-based index into the serverAliases list is used as the 
            ClientAlias in a returned AliasResult to allow the client to locate the 
            entry in the submitted list of serverAliases.</para>
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.ModifyListAttributes(System.String,System.UInt32,System.Nullable{System.UInt32},System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to change the update rate, buffering rate, and/or 
            filter set of a list.  The new value replace the old values if they exist.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The server identifier for the list for which the filters are to 
            be changed.
            </param>
            <param name="updateRate">
            The new update rate of the list.  The server will negotiate this rate to one 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the update rate is not to be updated.  
            </param>
            <param name="bufferingRate">
            The new buffering rate of the list.  The server will negotiate this rate to one 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the buffering rate is not to be updated.
            </param>
            <param name="filterSet">
            The new set of filters.  The server will negotiate these filters to those 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the filters are not to be updated.
            </param>
            <returns>
            The revised update rate, buffering rate, and filter set.  Attributes 
            that were not updated are set to null in this response.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.EnableListUpdating(System.String,System.UInt32,System.Boolean)">
             <summary>
             <para>This method is used to enable or disable updating of an entire 
             list. When this method is called, the enabled state of the list is changed, 
             but the enabled state of the individual elements of the list is unchanged. </para>
             <para>When a list is disabled, the server excludes it from participating in 
             callbacks and polls. However, at the option of the server, the server may continue 
             updating its cache for the elements of the list.</para>
             </summary>
             <param name="contextId">
             The context identifier.
             </param>
             <param name="listId">
             The server identifier for the list for which updating is to be 
             enabled or disabled.
            </param>
             <param name="enable">
             Indicates, when TRUE, that updating of the list is to be enabled,
             and when FALSE, that updating of the list is to be disabled.
             </param>
             <returns>
             The attributes of the list.
             </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.EnableListElementUpdating(System.String,System.UInt32,System.Boolean,System.Collections.Generic.List{System.UInt32})">
             <summary>
             <para>This method is used to enable or disable updating of 
             individual entries of a list.  If the server aliases parameter is 
             null, then all entries of the list are enabled/disabled.  This call 
             does not change the enabled state of the list itself.</para>
             <para>When an element of the list is disabled, the server excludes it 
             from participating in callbacks and polls. However, at the option of the 
             server, the server may continue updating its cache for the element.</para>
             </summary>
             <param name="contextId">
             The context identifier.
             </param>
             <param name="listId">
             The server identifier for the list for which updating is to be 
             enabled or disabled.
            </param>
             <param name="enableUpdating">
             Indicates, when TRUE, that updating of the list is to be enabled,
             and when FALSE, that updating of the list is to be disabled.
             </param>
             <param name="serverAliases">
             <para>The list of aliases for data objects of a list for which updating 
             is to be enabled or disabled.  When this value is null updating of all 
             elements of the list is to be enabled/disabled. In this case, however, 
             the enable/disable state of the list itself is not changed.</para>
             <para>If the value of a serverAlias in this list is zero, then its 
             zero-based index into the serverAliases list is used as the ClientAlias 
             in a returned AliasResult. </para>
             </param>
             <returns>
             <para>Returns null if the server was able to successfully enable/disable 
             the the specified elements for the specified list.  If not, returns the 
             client and server aliases and result codes for the data objects that could 
             not be enabled/disabled. Data objects that were successfully enabled/disabled 
             are not included in this list. See XiFaultCodes claass for standardized 
             result codes. </para> 
             <para>If the value of a serverAlias in the serverAliases list is zero, 
             then its zero-based index into the serverAliases list is used as the 
             ClientAlias in a returned AliasResult to allow the client to locate the 
             entry in the submitted list of serverAliases.</para>
             <para>Throws an exception if the specified context or list could not be found.</para> 
             </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.AddEventMessageFields(System.String,System.UInt32,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
             <summary>
             This method is used to request that category-specific fields be 
             included in event messages generated for alarms and events of 
             the category for the specified Event/Alarm List.
             </summary>
             <param name="contextId">
             The context identifier.
             </param>
             <param name="listId">
             The server identifier for the list for which event message fields are being added. 
            </param>
             <param name="categoryId">
             The category for which event message fields are being added.
             </param>
             <param name="fieldObjectTypeIds">
             The list of category-specific fields to be included in the event 
             messages generated for alarms and events of the category.  Each field 
             is identified by its ObjectType LocalId obtained from the EventMessageFields 
             contained in the EventCategoryConfigurations Standard MIB element.
             </param>
             <returns>
             The ObjectTypeIds and result codes for the fields that could not be 
             added to the event message. Returns null if all succeeded.  
             </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.TouchDataObjects(System.String,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to cause one or more data objects of 
            a list to be "touched".  Data objects that are in the disabled 
            state (see the EnableListElementUpdating() method) are not 
            affected by this method.  This method cannot be used with 
            event lists.</para>
            <para>Touching an enabled data object causes the server to update 
            the data object, mark it as changed (even if their values did not change), 
            and then return it to the client in the next callback or poll.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The server identifier for the lists whose data objects are to be touched.
            </param>
            <param name="serverAliases">
            <para>The aliases for the data objects to touch. When this value is null all 
            elements of the list are to be touched.</para>
            <para>If the value of a serverAlias in this list is zero, then its 
            zero-based index into the serverAliases list is used as the ClientAlias 
            in a returned AliasResult. </para>
            </param>
            <returns>
            <para>Returns null if the server was able to successfully enable/disable 
            the the specified elements for the specified list.  If not, returns the 
            client and server aliases and result codes for the data objects that could 
            not be touched. Data objects that were successfully touched are not included 
            in this list. See XiFaultCodes claass for standardized result codes. </para>
            <para>If the value of a serverAlias in the serverAliases list is zero, 
            then its zero-based index into the serverAliases list is used as the 
            ClientAlias in a returned AliasResult to allow the client to locate the 
            entry in the submitted list of serverAliases.</para>
            <para>Throws an exception if the specified context or list could not be found.</para> 
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.TouchList(System.String,System.UInt32)">
             <summary>
             <para>This method is used to cause a list to be "touched".</para> 
             <para>For lists that contain data objects, this method causes 
             the server to update all data objects in the list that are currently 
             enabled (see the EnableListElementUpdating() method), mark them 
             as changed (even if their values did not change), and then return 
             them all to the client in the next callback or poll. </para>  
             <para>For lists that contain events, this method causes 
             the server to mark all alarms/event in the list as changed, 
             and then return them all to the client in the next callback or poll.</para>
             </summary>
             <param name="contextId">
             The context identifier.
             </param>
             <param name="listId">
             The identifier for the list to be touched.
            </param>
             <returns>
             The result code for the operation.  See XiFaultCodes class for 
             standardized result codes. 
             </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.GetAlarmSummary(System.String,Xi.Contracts.Data.InstanceId)">
            <summary>
            This method is used to request summary information for the 
            alarms that can be generated for a given event source.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="eventSourceId">
            The InstanceId for the event source for which alarm summaries are 
            being requested.
            </param>
            <returns>
            The summaries of the alarms that can be generated by the specified 
            event source.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.EnableAlarms(System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Xi.Contracts.Data.InstanceId})">
            <summary>
            This method is used to enable or disable alarms for a specified area or event source. 
            It is independent of the XiLists on which the alarms may be reported.
            It throws a fault if the requested operation cannot be performed successfully.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="enableFlag">
            This flag indicates, when TRUE, that alarms are to be enabled, and when FALSE, that they 
            are to be disabled.
            </param>
            <param name="areaFlag">
            This flag indicates, when TRUE, that the eventContainerIds parameter contains a list of 
            InstanceIds for areas, and when FALSE, that it contains a list of InstanceIds for event sources.
            </param>
            <param name="eventContainerIds">
            The InstanceId for the area or the event source for which alarms are to be enabled or disabled.
            </param>
            <returns>Null if all requested enable/disable operations succeeded. Otherwise, the list of result codes. The size and 
            order of this list matches that of the eventContainerIds.  Standard result code values are defined by 
            the Xi.Contracts.Constants.XiFaultCodes class. There is one result code for each eventContainerId.</returns>
        </member>
        <member name="M:Xi.Contracts.IResourceManagement.GetAlarmsEnabledState(System.String,System.Boolean,System.Collections.Generic.List{Xi.Contracts.Data.InstanceId})">
            <summary>
            This method returns the enable state for a specified area or event source.
            It throws a fault if the requested operation cannot be performed successfully.
            </summary>
            <param name="contextId">The context identifier.</param>
            <param name="areaFlag">
            This flag indicates, when TRUE, that the eventContainerIds parameter contains a list of 
            InstanceIds for areas, and when FALSE, that it contains a list of InstanceIds for event sources.</param>
            <param name="eventContainerIds">
            The InstanceId for the area or the event source for which alarms are to be enabled or disabled.
            </param>
            <returns>An object with the enabled state and result code for each requested InstanceId.
            </returns>
        </member>
        <member name="T:Xi.Contracts.IRestRead">
            <summary>
            <para>NOTE: Support for the REST Web Services has been removed 
            to allow the Xi.Contracts assembly to be used with the 
            .NET Framework 4 Client Profile.  See comment in source file 
            for how to re enable this feature.</para>
            <para>This interface is composed of methods used to retrieve 
            data, alarms, and events and their histories from the 
            server using REST Web Services.</para>
            </summary>
        </member>
        <member name="M:Xi.Contracts.IRestRead.RestReadData(System.String,System.String)">
            <summary>
            <para>This method is used to read the values of the 
            data objects in a list.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list that contains data objects to be read.
            </param>
            <returns>
            The list of requested values. The size and order of this list 
            matches the size and order of serverAliases parameter.
            </returns>
        </member>
        <member name="T:Xi.Contracts.IServerDiscovery">
            <summary>
            This interface is used to locate Xi servers on the network 
            and their Resource Management endpoints.  Servers that 
            implement this interface may apply access controls to limit 
            the servers a client may discover.  
            </summary>
        </member>
        <member name="M:Xi.Contracts.IServerDiscovery.DiscoverServers">
            <summary>
            This method returns the list of servers the client is 
            authorized to discover.
            </summary>
            <returns>
            List of server entries.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IServerDiscovery.DiscoverServerInfo">
            <summary>
            <para>This method is used to get the description of the 
            server.  It is intended to be used by Xi Directory Services 
            servers to identify an Xi server and obtain its list of 
            Mex endpoint names.</para>
            </summary>
            <returns>
            The description of the server. 
            </returns>
        </member>
        <member name="M:Xi.Contracts.IServerDiscovery.DiscoverAbbreviatedEndpointInfo">
            <summary>
            This method returns an abbreviated set of endpoint definition parameters for 
            use by Silverlight clients and other clients that cannot use Metadata Exhange 
            to retrieve complete endpoint descriptions from the server.  Client 
            applications capable of using Metadata Exchange should not call this method.
            </summary>
            <returns>
            Returns a list of EndpointConfigurationEx objects, one for each endpoint 
            supported by the server.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IServerDiscovery.GetSilverlightPolicy">
            <summary>
            This method reads the clientaccesspolicy.xml from the EXE directory and returns 
            the content to the requester.
            </summary>
            <returns>Returns the clientaccesspolicy.xml as a stream.</returns>
        </member>
        <member name="T:Xi.Contracts.IWrite">
            <summary>
            This interface is composed of methods used to write/update 
            data, alarms, and events and their histories.
            </summary>
        </member>
        <member name="M:Xi.Contracts.IWrite.WriteValues(System.String,System.UInt32,Xi.Contracts.Data.WriteValueArrays)">
            <summary>
            <para>This method is used to write the values of one or more 
            data objects in a list.  It is also used as a keep-alive for the 
            write endpoint by setting the listId parameter to 0. In this case,
            null is returned immediately.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The server identifier of the list that contains data objects to be read.
            Null if this is a keep-alive.
            </param>
            <param name="writeValueArrays">
            The server aliases and values of the data objects to write.
            </param>
            <returns>
            The list server aliases and result codes for the data objects whose 
            write failed. Returns null if all writes succeeded or null if this 
            is a keep-alive.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IWrite.WriteVST(System.String,System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            This method is used to write the data value, status, and 
            timestamp for one or more data objects.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The server identifier of the list that contains the data objects 
            to be written.</param>
            <param name="writeValueArrays">
            The list of values to be written. For performance purposes, this list 
            is represented by typed parallel arrays for the server alias, value,
            timestamp, and status. See the definition of DataValueArraysWithAlias 
            for more information.
            </param>
            <returns>
            The list of error results.  Only values that could not be written are 
            included in this list.
            </returns>
        </member>
        <member name="M:Xi.Contracts.IWrite.WriteJournalData(System.String,System.UInt32,Xi.Contracts.Data.ModificationType,Xi.Contracts.Data.WriteJournalValues[])">
            <summary>
            <para>This method is used to modify historical data values.  
            The modification type parameter indicates the type of 
            modification to perform.  </para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The server identifier of the list that contains the data objects 
            to be written.
            </param>
            <param name="modificationType">
            Indicates the type of modification to perform.  
            </param>
            <param name="valuesToWrite">
            The array of historical values to write.  Each is identified 
            by its list id, its server alias, and its timestamp.
            </param>
            <returns>
            The list of identifiers and error codes for each data object 
            whose write failed. Returns null if all writes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IWrite.WriteJournalEvents(System.String,System.UInt32,Xi.Contracts.Data.ModificationType,Xi.Contracts.Data.EventMessage[])">
            <summary>
            <para>This method is used to modify historical alarms and/or 
            events. The modification type parameter indicates the type of 
            modification to perform.  </para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The server identifier of the list that contains the alarms and/or 
            events to be written.
            </param>
            <param name="modificationType">
            Indicates the type of modification to perform.  
            </param>
            <param name="eventsToWrite">
            The list of historical alarms and/or events to write.  Each 
            is identified by its EventId contained in the EventMessage.
            </param>
            <returns>
            The list server aliases and result codes for the alarms and/or 
            events whose write failed. Returns null if all writes succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IWrite.AcknowledgeAlarms(System.String,System.UInt32,System.String,System.String,System.Collections.Generic.List{Xi.Contracts.Data.EventId})">
            <summary>
            <para>This method is used to acknowledge one or more alarms.</para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The server identifier for the list that contains the alarms to be 
            acknowledged.
            </param>
            <param name="operatorName">
            The name or other identifier of the operator who is acknowledging 
            the alarm.
            </param>
            <param name="comment">
            An optional comment submitted by the operator to accompany the 
            acknowledgement.
            </param>
            <param name="alarmsToAck">
            The list of alarms to acknowledge.
            </param>
            <returns>
            The list EventIds and result codes for the alarms whose 
            acknowledgement failed. Returns null if all acknowledgements 
            succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Contracts.IWrite.Passthrough(System.String,System.String,System.Int32,System.String,System.Byte[])">
            <summary>
            This method allows the client to send a message to the server that 
            the server delivers unmodified to the intended recipient.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="recipientId">
            The recipient identifier. The list of recipients is contained in 
            the RecipientPassthroughs MIB element.   
            </param>
            <param name="invokeId">
            A client-defined integer identifier for this invocation of the passthrough.  When
            used with asynchronous passthroughs, the server returns the invokeId with the response.  
            </param>
            <param name="passthroughName">
            The name of the passthrough message. The list of passthroughs for a recipient 
            is contained in the RecipientPassthroughs MIB element.   
            </param>
            <param name="DataToSend">
            The Data To Send is just an array of bytes.  No interpretation of the data 
            is made by the Xi server.  This byte array is forwarded unaltered to the 
            underlying system.  It is up to the client application to format this byte 
            array in a valid format for the underlying system.
            </param>
            <returns>
            The Passthrough Result returns a Result value and a byte array as 
            returned from the underlying system.  It is up to the client 
            application to interpret this byte array.  If the passthrough returns its 
            response asynchronously, the result code in the response indicates whether 
            the passthrough was invoked. The results of asynchronous passthroughs are 
            returned via the callback or poll interface.
            </returns>
        </member>
    </members>
</doc>
